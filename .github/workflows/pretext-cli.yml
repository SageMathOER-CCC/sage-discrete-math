name: PreTeXt-CLI Actions
on:
  # Runs on pull requests
  pull_request:
    branches: ["*"]

  # Runs on pushes to main
  push:
    branches:
      - main

  schedule:
    - cron: "0 0 * * 1"

  # Runs on demand
  workflow_dispatch:

jobs:
  # ----------------------------------------------------
  build:
    runs-on: ubuntu-latest
    container: oscarlevin/pretext:full
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pretext --version

      # Build Web artifact
      - name: Build and stage the Web target of the project
        run: make clean deploy stage

      - name: Bundle Web output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-deploy
          path: output/stage

      # Build PDF artifact
      - name: Ensure proper asset type in image references for PDF output
        run: ./update-img-refs.py source/ --to-pdf

      - name: Build PDF with PreTeXt
        run: make clean pdf

      - name: Bundle PDF output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf
          path: output/print

  # ----------------------------------------------------
  deploy-ghpages:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "page"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Web artifact
        uses: actions/download-artifact@v4
        with:
          name: web-deploy
          path: deploy

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload Web artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ----------------------------------------------------
  update-pdf:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Fetch latest commit hash on release branch
        run: |
          git fetch origin main
          LATEST_MAIN_HASH=$(git rev-parse --short origin/main)
          echo "Latest commit on main: $LATEST_MAIN_HASH"
          echo "LATEST_MAIN_HASH=$LATEST_MAIN_HASH" >> $GITHUB_ENV

      - name: Checkout to pdf-release branch and get hash from last commit message
        run: |
          # Checkout the pdf-release branch without syncing to main or current branch.
          git fetch origin pdf-release || git checkout --orphan pdf-release
          LAST_COMMIT_MSG=$(git log -2 --pretty=%B)
          echo "Last commit message on pdf-release: $LAST_COMMIT_MSG"
          LAST_MAIN_HASH_COMMIT=$(echo "$LAST_COMMIT_MSG" | grep -oE "Update PDF for ([0-9a-f]{7})" | awk '{print $4}')
          echo "Extracted commit hash from last pdf-release commit: $LAST_MAIN_HASH_COMMIT"
          echo "LAST_MAIN_HASH=$LAST_MAIN_HASH_COMMIT" >> $GITHUB_ENV

      - name: Determine if PDF update is needed
        run: |
          if [[ -z "$LAST_MAIN_HASH" ]]; then
            echo "No last commit hash found on pdf-update, PDF needs an update."
            echo "skip_update=false" >> $GITHUB_ENV
          elif [[ "$LAST_MAIN_HASH" == "$LATEST_MAIN_HASH" ]]; then
            echo "PDF is already up to date. Skipping update."
            echo "skip_update=true" >> $GITHUB_ENV
          else
            echo "PDF needs an update."
            echo "skip_update=false" >> $GITHUB_ENV
          fi

      - name: Skip update if no changes
        if: env.skip_update == 'true'
        run: echo "Skipping PDF update as there are no new changes."

      - name: Download PDF artifact
        if: env.skip_update != 'true'
        uses: actions/download-artifact@v4
        with:
          name: pdf
          path: output/print

      - name: Set up Git user
        if: env.skip_update != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit updated PDF
        if: env.skip_update != 'true'
        run: |
          git checkout pdf-release
          git add output/print/main.pdf
          git commit -m "Update PDF for ${LATEST_MAIN_HASH}"
          git push origin pdf-release --force
