name: PreTeXt-CLI Actions
on:
  # Runs on pull requests
  pull_request:
    branches: ["*"]

  # Runs on pushes to main
  push:
    branches:
      - main

  schedule:
    - cron: "0 0 * * 1"

  # Runs on demand
  workflow_dispatch:

jobs:
  # ----------------------------------------------------
  install-dependencies:
    runs-on: ubuntu-latest
    container: oscarlevin/pretext:full
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pretext --version

  # ----------------------------------------------------
  build:
    runs-on: ubuntu-latest
    needs: install-dependencies
    container: oscarlevin/pretext:full
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # Build Web artifact
      - name: Build Web target with PreTeXt
        run: pretext --verbosity=DEBUG build web --clean --generate --deploys --input=source/main.ptx

      - name: Stage deployment (Web)
        run: pretext --verbosity=DEBUG deploy --stage-only

      - name: Bundle Web output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-deploy
          path: output/stage

      # Build PDF artifact
      - name: Ensure proper asset type in image references for PDF output
        run: ./update-img-refs.py source/ --to-pdf

      - name: Build PDF with PreTeXt
        run: make clean pdf

      - name: Bundle PDF output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf
          path: output/print

  # ----------------------------------------------------
  deploy-ghpages:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "page"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Web artifact
        uses: actions/download-artifact@v4
        with:
          name: web-deploy
          path: deploy

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload Web artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ----------------------------------------------------
  update-pdf:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Fetch and switch to current branch
        run: |
          git fetch origin
          git checkout ${{ github.ref }}

      - name: Create or update pdf-update branch
        run: |
          git fetch origin
          if git show-ref --quiet refs/heads/pdf-update; then
            git checkout pdf-update
          else
            git checkout -b pdf-update ${{ github.ref }}
          fi

      - name: Rebase pdf-update onto current branch (to get latest changes)
        run: |
          git fetch origin
          git rebase origin/${{ github.ref }}

      - name: Commit changes and sync PDF update
        run: |
          git add output/print/main.pdf
          git commit -m "Update PDF: ${LATEST_COMMIT_HASH}" || echo "No changes to commit"
          git push origin pdf-update --force

