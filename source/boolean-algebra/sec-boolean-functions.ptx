<section xml:id="sec-boolean-functions" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Boolean functions</title><idx><h>Boolean functions</h></idx>
    <p>
        A  Boolean function is a function that takes only values 0 or 1 and whose domain is the Cartesian product <m>{\{0, 1\}^n}</m>.
    </p>
    <p>
        In SageMath, Boolean functions can be manipulated through various built-in functions designed for handling Boolean variables and expressions.
    </p>
    <aside>
        <title>Notes</title>
        <p>
          Boolean algebra is crucial in digital circuit design. For example, simplifying the expression of a digital circuit can minimize the number of gates used, which reduces cost and power consumption. Techniques such as Karnaugh maps and Boolean simplification are common in the industry.
        </p>
    </aside>
    <p>
        Before we begin lets import the necessary modules. This will reduce the amount of code we need to type.
    </p>
    <sage>
        <input>
            from sage.logic.propcalc import formula
        </input>
    </sage>
    <p>
        Now let's examine the truth table of the Boolean function <m>h(x, y) = x + \bar{y}</m>.
    </p>
    <sage>
        <input>
            h = formula("x | ~y")
            h.truthtable()
        </input>
    </sage>
    <p>
        Every Boolean function can be written as a sum-of-products expansion by applying the Boolean identities. Let's find the sum-of-products expansion of the Boolean function <m>h(x, y) = x + \bar{y}</m>.
    </p>
    <sage>
        <input>
            # Applying the identity law
            # Warning: Do not use 
            # formula("x &amp; True | True &amp; ~y")
            # h == formula("x &amp; True | True &amp; ~y")
            # True and False are not boolean supported with formula
            # Instead we can assume the &amp; True
        </input>
    </sage>

    <sage>
        <input>
            # Applying the complement law
            h_complement = formula("x &amp; (y | ~y) | (x | ~x) &amp;  ~y")
            h_complement == h
        </input>
    </sage>
    <sage>
        <input>
            # Applying the distributive law
            h_distributive = formula("x &amp; y | x &amp; ~y | x &amp; ~y | ~x &amp; ~y")
            h_distributive == h
        </input>
    </sage>
    <p>
        Here is the sum-of-products expansion of the Boolean function <m>h(x, y) = x + \bar{y}</m>. After applying the identity, complement, and distributive laws, we get <m>h(x, y) = x \cdot y + x \cdot \bar{y} + x \cdot \bar{y} + \bar{x} \cdot \bar{y}</m>.
    </p>
    <sage>
        <input>
            # Applying the idempotent law
            h_idempotent = formula("x &amp; y | x &amp; ~y | ~x &amp; ~y")
            h_idempotent == h
        </input>
    </sage>
    <p>
        We can also confirm the truth table of the <m>h(x, y) = x + \bar{y}</m> and <m>h(x, y) = x \cdot y + x \cdot \bar{y} + x \cdot \bar{y} + \bar{x} \cdot \bar{y}</m> are the same.
    </p>
    <sage>
        <input>
            h_idempotent.truthtable()
        </input>
    </sage>
    
    <idx><h>polynomial</h></idx>
    <sage>
        <input>
            B = BooleanPolynomialRing(3, 'x')
            f = B('x0 + x1 * x2')
            show(f)
        </input>
        <output>
            # Outputs the Boolean expression in polynomial form
        </output>
    </sage>
</section>