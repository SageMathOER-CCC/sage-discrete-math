<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="debugging" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Debugging</title>

    <idx>
        <h>error message</h>
    </idx>

    <p>
        Error messages are an inevitable part of programming. When you encounter one, read it carefully for
        clues about the cause. Some messages are clear and descriptive, while others may seem cryptic. With
        practice, you will develop valuable skills debugging your code and resolving errors
    </p>

    <p>
        Note that not all errors result in error messages. <term>Logical errors</term> occur when the syntax
        is correct, but the program does not produce the expected result. Usually, these are a bit harder to trace.
    </p>

    <p>
        Remember, mistakes are learning opportunities —everyone makes them! Here are some useful debugging tips:
    </p>

    <ul>
        <li>Read the error message carefully —it often provides useful hints.</li>
        <li>Consult the documentation to understand the correct syntax and usage.</li>
        <li>Google-search the error message —it's likely that others have encountered the same issue.</li>
        <li>Check SageMath forums for previous discussions.</li>
        <li>Take a break and return with a fresh perspective.</li>
        <li>Ask the Sage community if you're still stuck after trying all the above steps.</li>
    </ul>

    <p>
        Let's dive in and make some mistakes together!
    </p>

    <p>
        <idx><h>debugging</h><h>syntax error</h></idx>
        A <term>SyntaxError</term> usually occurs when the code is not written according to the language rules.
    </p>

    <sage>
        <input>
            # Run this cell and see what happens
            1message = "Hello, World!"
            print(1message)
        </input>
    </sage>

    <p>
        Why didn't this print <c>Hello, World!</c> to the console? The error message indicates a <c>SyntaxError</c>:
        <c>invalid decimal literal</c>. The issue here is the invalid variable name. Valid <em>identifiers</em> must:
    </p>

    <ul>
        <li>Start with a letter or an underscore (never with a number).</li>
        <li>Avoid any special characters other than the underscores.</li>
    </ul>

    <p>Let's correct the variable name:</p>

    <sage>
        <input>
            message = "Hello, World!"
            print(message)
        </input>
    </sage>

    <p>
        <idx><h>debugging</h><h>name error</h></idx>
        A <term>NameError</term> occurs when a variable or function is referenced before being defined.
    </p>

    <sage>
        <input>
            print(Hi)
        </input>
    </sage>

    <p>
        Sage assumes <c>Hi</c> is a variable, but we have not defined it yet. There are two ways to fix this:
    </p>

    <ul>
        <li>Use quotes to indicate that <c>Hi</c> is a string.</li>
    </ul>

    <sage>
        <input>
            print("Hi")
        </input>
    </sage>

    <ul>
        <li>Alternatively, if we intended <c>Hi</c> to be a variable, then we must define it before first use.</li>
    </ul>

    <sage>
        <input>
            Hi = "Hello, World!"
            print(Hi)
        </input>
    </sage>

    <p> Reading the documentation is essential to understanding the proper use of methods. If we
        incorrectly use a method, we will likely get a <c>NameError</c> (as seen above), an <c>AttributeError</c>,
        a <c>TypeError</c>, or <c>ValueError</c>, depending on the mistake.
    </p>

    <p>
        Here is another example of a <c>NameError</c>:
    </p>

    <sage>
        <input>
            l = [6, 1, 5, 2, 4, 3]
            sort(l)
        </input>
    </sage>

    <p> The <c>sort()</c> method must be called on the list object using dot notation. </p>
    <sage>
        <input>
            l = [4, 1, 2, 3]
            l.sort()
            print(l)
        </input>
    </sage>

    <p>
        <idx><h>debugging</h><h>attribute error</h></idx>
        An <term>AttributeError</term> occurs when an invalid method is called on an object.
    </p>

    <sage>
        <input>
            l = [1, 2, 3]
            l.len()
        </input>
    </sage>

    <p>
        The <c>len()</c> function must be used separately rather than as a method of a list.
    </p>

    <sage>
        <input>
            len(l)
        </input>
    </sage>

    <p>
        <idx><h>debugging</h><h>type error</h></idx>
        A <term>TypeError</term> occurs when an operation or function is applied to an <em>incorrect</em> data type.
    </p>

    <sage>
        <input>
            l = [1, 2, 3]
            l.append(4, 5)
        </input>
    </sage>

    <p>
        The <c>append()</c> method only takes one argument. To add multiple elements, use <c>extend()</c>.
    </p>

    <sage>
        <input>
            l.extend([4, 5])
            print(l)
        </input>
    </sage>

    <p>
        <idx><h>debugging</h><h>value error</h></idx>
        A <term>ValueError</term> occurs when an operation receives an argument of the correct type but with
        an invalid value.
    </p>

    <sage>
        <input>
            factorial(-5)
        </input>
    </sage>

    <p>
        Although the resulting error message is lengthy, the last line informs us that Factorials are only
        defined for non-negative integers.
    </p>

    <sage>
        <input>
            factorial(5)
        </input>
    </sage>

    <p>
        <idx><h>debugging</h><h>logical error</h></idx>
        A <term>Logical error</term> does not produce an error message but leads to incorrect results.
    </p>

    <p>
        Here, assuming your task is to print the numbers from <m>1</m> to <m>10</m>, and you mistakenly write
        the following code:
    </p>

    <sage>
        <input>
            for i in range(10):
                print(i)
        </input>
    </sage>

    <p>
        This instead will print the numbers <m>0</m> to <m>9</m> (because the start is inclusive but not the stop).
        If we want numbers <m>1</m> to <m>10</m>, we need to adjust the range.
    </p>

    <sage>
        <input>
            for i in range(1, 11):
                print(i)
        </input>
    </sage>

    <p>
        To learn more, check out the
        <url href="https://github.com/sagemathinc/cocalc/wiki/MathematicalSyntaxErrors"> CoCalc article</url> about
        the top mathematical syntax errors in Sage.
    </p>
</section>
