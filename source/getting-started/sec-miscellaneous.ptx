<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="other-features-in-sage">
    <title>Miscellaneous Features</title>

    <introduction>
        <p>
            While Sage supports a lot of features that are outside the scope of this book, and
            hence there is little value in covering them in depth beyond a simple explanation of
            each feature or command.
        </p>

        <p>
            The primary goal of this book is to introduce Sage software and demonstrate how it can
            be used to experiment with discrete math concepts within the Sage environment. Sage is
            used here interactively, and mainly covering the basics. Having an understanding of
            any of the commands presented in this section would be crucial for working on a
            production-grade project with complex mathematical models (e.g. handling large datasets).
            In such cases, it would be more appropriate to use these commands within a standalone
            Sage environment. These commands are presented here just for the sake of completeness.
        </p>

        <p>
            Note that these Sage cells allow the user to experiment freely with any of the Sage-
            supported commands. The content of the cells can be altered at runtime (on the live web
            version of the book) and executed in real-time on a remote Sage server. Users can
            modify the content of cells and execute any other Sage commands to explore various
            mathematical concepts interactively.
        </p>
    </introduction>

    <subsection xml:id="reading-writing-files">
        <title>Reading and Writing Files in Sage</title>
            <p>Sage provides various ways to handle input and output (I/O) operations.</p>
            <p>This subsection explores writing data to files and importing data from files.</p>

            <p>Sage allows reading from and writing to files using standard Python file-handling functions.</p>

            <p>
            <em>Writing to a file:</em>
        </p>
        <sage>
        <input>
            with open("output.txt", "w") as file:
                file.write("Hello, Sage!")
        </input>
        </sage>

        <p>
            <em>Reading from a file:</em>
        </p>
        <sage>
        <input>
            with open("output.txt", "r") as file:
                content = file.read()
                print(content)  # Output: Hello, Sage!
        </input>
        </sage>
    </subsection>

    <subsection xml:id="shell-commands-in-sage">
        <title>Executing Shell Commands in Sage</title>

        <p>Sage allows executing shell commands directly using the `!` operator (prefix the shell command to be executed).</p>

        <p>
            <em>listing the content of the current directory showing the file that we just created:</em>
        </p>
        <sage>
        <input>
            !ls -la
        </input>
        </sage>
    </subsection>

    <subsection xml:id="import-export-csv-json">
        <title>Importing and Exporting Data (CSV, JSON, TXT)</title>

        <p>Sage supports structured data formats such as CSV and JSON.</p>

        <p>
            <em>Generating a CSV file using shell command:</em>
        </p>
        <sage>
        <input>
            !printf "Name,Age,Country\nAlice,25,USA\nBob,30,UK\nCharlie,28,Canada\n" > data.csv
        </input>
        </sage>

        <p>
            <em>Reading a CSV file in Sage:</em>
        </p>
        <sage>
        <input>
            import csv

            with open("data.csv", "r") as file:
                reader = csv.reader(file)
                for row in reader:
                    print(row)
        </input>
        </sage>
    </subsection>

    <subsection xml:id="external-libraries">
        <title>Using External Libraries in Sage</title>
        <p>Sage allows using external Python libraries to do advance calculation or access and communicate over a network (urllib.request library) .</p>

        <p>
            <em>Using NumPy for numerical computations:</em>
        </p>
    <sage>
    <input>
        import numpy as np
        array = np.array([1, 2, 3])
        print(array)  # Output: [1 2 3]
    </input>
    </sage>
    </subsection>
</section>
