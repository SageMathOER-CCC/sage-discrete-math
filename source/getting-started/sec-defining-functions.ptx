<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="defining-functions" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Defining Functions</title>
  <p>
    Sage comes with many built-in functions. Math terminology is not always standard, so be sure to read the documentation to learn what exactly these functions do and how to use them. In Sage, you can also define your own functions. Defining a function in Sage is similar to defining a function in Python.
  </p>
  <p>
    To define a function in Sage, use the <c>def</c> keyword followed by the function name and the function's arguments. The function's body is indented. The <c>return</c> keyword is used to return a value from the function.
  </p>
  <p>
    Here we have a function that takes a name as an argument and returns a greeting:
  </p>
  <sage>
    <input>
      def greetings(name):
          return 'Hello, ' + name + '!'
    </input>
  </sage>
  <p>
    Try calling the function for yourself. Be sure to run the Sage cell with the function definition first to define the function and use it in other cells.
  </p>
  <sage>
    <input>
      # Replace 'World' with your name
      greetings('World')
    </input>
  </sage>
  <p>
    You can also add input validation to your functions to make them more robust.
  </p>
  <sage>
    <input>
      def greetings(name):
          if not isinstance(name, str):
              raise ValueError('Name must be a string')
          
          if not name:
              raise ValueError('Name cannot be empty')
          return 'Hello, ' + name + '!'
    </input>
  </sage>
  <p>
    Try calling the function with an empty string or a non-string argument to see the input validation in action.
  </p>
  <sage>
    <input>
      greetings('')
    </input>
  </sage>
  <sage>
    <input>
      greetings(9000)
    </input>
  </sage>
  <p>
    Functions can also include a <c>docstring</c> to provide documentation for the function. The <c>docstring</c> is a string that appears as the first statement in the function body. It is used to describe what the function does and how to use it.
  </p>
  <sage>
    <input>
      def greetings(name):
          """
          Generate a greeting message for a given name.

          This function takes a name as input and returns a greeting string. It ensures the name is a string and not empty, raising a ValueError with an appropriate message if these conditions are not met.

          Parameters:
          - name (str): The name to include in the greeting.

          Returns:
          - str: A greeting message which includes the given name.

          Raises:
          - ValueError: If 'name' is not a string or is an empty string.

          Example:
          >>> greetings("Alice")
          'Hello, Alice!'
          """
          if not isinstance(name, str):
              raise ValueError('Name must be a string')
          
          if not name:
              raise ValueError('Name cannot be empty')
          
          return 'Hello, ' + name + '!'
    </input>
  </sage>
</section>