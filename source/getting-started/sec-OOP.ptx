<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="OOP" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Object-Oriented Programming</title>

  <p>
    <term>Object-Oriented Programming</term> (OOP) is a programming paradigm that models the world as a collection of interacting <term>objects</term>. An object is an <term>instance</term> of a <term>class</term>, which can represent almost anything.
  </p>

  <p>
    <term>Classes</term> act as blueprints that define the structure and behavior of objects. A class specifies the <term>attributes</term> and <term>methods</term> of an object.
    - An <term>attribute</term> is a variable that stores information about the object.
    - A <term>method</term> is a function that interacts with or modifies the object.
    Although you can create custom classes, many useful classes are already available in Sage and Python, such as those for integers, lists, strings, and graphs.
  </p>

  <subsection xml:id="subsec-OOP-in-Sage">
    <title>Objects in Sage</title>

    <p>
      In Python and Sage, almost everything is an object. When assigning a value to a variable, the variable references an object.
      The <c>type()</c> function allows us to check an object's class.
    </p>

    <sage>
      <input>
        vowels = ['a', 'e', 'i', 'o', 'u']
        type(vowels)
      </input>
    </sage>

    <sage>
      <input>
        type('a')
      </input>
    </sage>

    <p>
      The output confirms that <c>'a'</c> is an instance of the <c>str</c> (string) class,
      and <c>vowels</c> is an instance of the <c>list</c> class. We just created a <c>list</c>
      object named <c>vowels</c> by assigning a series of characters within the square brackets
      to a variable. The object <c>vowels</c> represents a <c>list</c> of <c>string</c> elements,
      and we can interact with it using various methods.
    </p>

  </subsection>

  <subsection xml:id="subsection-Dot-Notation">
    <title>Dot Notation and Methods</title>

    <p>
      <term>Dot notation</term> is used to access an object's attributes and methods.
      For example, the <c>list</c> class has an <c>append()</c> method that allows us to add elements to a list.
    </p>

    <sage>
      <input>
        vowels.append('y')
        vowels
      </input>
    </sage>

    <p>
      Here, <c>'y'</c> is passed as a <term>parameter</term> to the <c>append()</c> method, adding it to the end
      of the list. The <c>list</c> class provides many other methods for interacting with lists.
    </p>

  </subsection>

  <subsection xml:id="subsec-Sage-Set-Class">
    <title>Sage's Set Class</title>

    <p>
      While <c>list</c> is a built-in Python class, Sage provides specialized classes for mathematical objects.
      One such class is <c>Set</c>, which we will explore later on in the next chapter.
    </p>

    <sage>
      <input>
        v = Set(vowels)
        type(v)
      </input>
    </sage>

    <p>
      The <c>Set</c> class in Sage provides attributes and methods specifically designed for working with sets.
    </p>

  </subsection>

  <p>
    While OOP might seem abstract at first, it will become clearer as we explore more and dive deeper into Sage features.
    Sage's built-in classes offer a structured way to represent data and perform powerful mathematical operations.
    In the next chapters, we'll see how Sage utilizes OOP principles and its built-in classes to perform mathematical operations.
  </p>

</section>
