<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="OOP" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Object Oriented Programming</title>

  <p>
    <term>Object-Oriented Programming</term> (OOP) is a programming paradigm that mirrors the world as a collection of <term>objects</term> that interact with each other. An object can be used to model almost anything. More specifically, an object is an <term>instance</term> of a <term>class</term>.
  </p>
  <p>
    <term>Classes</term> are like blueprints that define the structure behavior of objects. A class defines the <term>attributes</term> and <term>methods</term> of on object. An attribute is a variable that stores information about the object. A method is a function that can be used to interact or modify the object. Many Sage commands are methods of objects.
  </p>

  <p>
    Let's use these new terms to describe the following example.
  </p>

  <sage>
    <input>
      vowels = ['a', 'e', 'i', 'o', 'u']
      vowels
    </input>
  </sage>

  <p>
    In Python and Sage, when we type a variable name, we are referring to an object. We initialize the object by assigning it a value. In this case, the object is a list of vowels.
  </p>

  <sage>
    <input>
      type(vowels)
    </input>
  </sage>

  <p>
    Sage let us know <c>vowels</c> is an instance of the class <c>list</c>. By assigning a series of characters enclosed in square brackets to the variable <c>vowels</c>, we create a <c>list</c> object. This object, <c>vowels</c>, now represents a list of vowels, and we can interact with it using various methods.
  </p>

  <p>
    <term>Dot notation</term> is a syntax used to access an object's attributes and methods. The list class has methods and attributes that we can use to interact with the list object. For example, we can use the <c>append</c> method to add an element to the list.
  </p>

  <sage>
    <input>
      vowels.append('y')
      vowels
    </input>
  </sage>

  <p>    
    A <term>parameter</term> is a variable that is passed to a method when it is called. In this case, the parameter is the string <c>'y'</c>. The <c>append</c> method adds the string <c>'y'</c> to the end of the list. The list class has many more methods and attributes that we can use to interact with the list object. While <c>list</c> is a built-in Python class, Sage offers many more classes that are specialized for mathematical applications. For example, in the next chapter we will learn about the Sage <c>Set</c> class. Objects instantiated from the <c>Set</c> class have methods and attributes that are useful for working with sets.
  </p>

  <sage>
    <input>
      v = Set(vowels)
      type(v)
    </input>
  </sage>
  
  <p>
    While this concept might seem abstract at first, it becomes clearer as we dive deeper into Sage. We will learn how Sage utilizes OOP principles and built-in classes, offering a structured way to represent data and perform powerful mathematical operations. For a more in-depth look at OOP, check out the <url href="https://doc.sagemath.org/html/en/thematic_tutorials/tutorial-objects-and-classes.html">Sage tutorial</url>
  </p>
</section>