<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="OOP" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Object Oriented Programming</title>
  
  <p>
    What is an <term>object</term>? An object can be used to model almost anything. More specifically, an object is an instance of a <term>class</term>.
  </p>
  
  <p>
    A class provides a template or blueprint for creating objects and defines the <term>attributes</term> (properties) and <term>methods</term> (behaviors) that those objects can have.
  </p>
  
  <p>
    While this concept might seem abstract at first, it becomes clearer as we dive deeper into object-oriented programming (OOP). SageMath utilizes OOP principles, offering a structured way to represent and manipulate data. We can create an object by typing something into our Sage Worksheet or the cells on this page.
  </p>
  
  <p>
    <term>Dot notation</term> is a syntax used in OOP to access an object's attributes and methods. Here is an example of dot notation. There are many more examples of this in Sage.
  </p>

  <sage>
    <input>
      n = 4
      n.sqrt()
    </input>
  </sage>
  <sage>
    <input>
      n = 4
      n.sqrt(all=True)
    </input>
  </sage>
  <sage>
    <input>
      sqrt(2).n()
    </input>
  </sage>
  <sage>
    <input>
      sqrt(2).n(prec=100)
    </input>
  </sage>
</section>