<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="data-types" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Data Types</title>
  <p>
    Let's ask sage what type of <term>object</term> this is.
  </p>
  
  <sage>
    <input>
      type(1+1)
    </input>
  </sage>
  
  <p>
    Sage let us know <c>1 + 1</c> returns an <c>Integer</c>.
  </p>
  
  <sage>
    <input>
      type(1/2)
    </input>
  </sage>
  
  <sage>
    <input>
      type(1/2 + 1)
    </input>
  </sage>
  
  <sage>
    <input>
      type(1/2 + 1.1)
    </input>
  </sage>
  
  <sage>
    <input>
      type(1.1)
    </input>
  </sage>

  <p>
    In the following example there is no need to evaluate an approximation of <c>sqrt(2) * log(3)</c>. Sage will retain the symbolic value for accuracy.
  </p>
  <sage>
      <input>
          mySymbolic = sqrt(2) * log(3)
          print(type(mySymbolic))
          print(mySymbolic)
      </input>
  </sage>

  <p>
    We can also display mathematical notation
  </p>
  <sage>
    <input>
      show(sqrt(2)) 
    </input>
  </sage>

  <p>
    Let's introduce some more types and classes!
  </p>

  <sage>
    <input>
        # Check if 5 in contained in the set of prime numbers
        5 in Primes()
    </input>
  </sage>

  <p>
    Look like this returns <c>True</c>. This is an example of a <term>boolean</term> value. 
  </p>
  <sage>
    <input>
        type(5 in Primes())
    </input>
  </sage>

  <p>
    <term>Lists</term>: Ordered mutable collections of items within a pair of square brackets <c>[]</c>. If an object is mutable, the value can be changed after it is created.
  </p>
  <sage>
      <input>
          myList = [1, 3, 3, 2]
          print(type(myList))
          print(myList)
      </input>
  </sage>

  <p>
      <term>Tuples</term>: Ordered, immutable collections within a pair of parenthesis <c>()</c>. If an object is immutable, the value cannot be changed after it is created.
  </p>
  <sage>
      <input>
          myTuple = (1, 3, 3, 2)
          print(type(myTuple))
          print(myTuple)
      </input>
  </sage>

  <p>
    <term>set</term>: <c>sets()</c> with lowercase <c>s</c> are built into Python. Python sets are collections of unique items within a pair of curly braces <c>{}</c>.
  </p>
  <sage>
      <input>
          myPythonSet = {1, 3, 3, 2}
          # you can also define a set using the set() function
          # myPythonSet = set([1, 3, 3, 2])
          print(type(myPythonSet))
          print(myPythonSet)
      </input>
  </sage>

  <p>
    <term>Set</term> is a built-in Sage class. It is similar to a Python set, with added functionality for mathematical operations.
  </p>
  <sage>
      <input>
          mySageSet = Set([1, 3, 3, 2])
          print(type(mySageSet))
          print(mySageSet)
      </input>
  </sage>

  <p>
      <term>Dictionaries</term>: Collections of key-value pairs.
  </p>
  <sage>
      <input>
        # Python dictionary for the textbook
        discrete_math_textbook_info = {
            "title": "Discrete Math with SageMath",
            "authors": ["Zunaid Ahmed", "Hellen Colman", "Samuel Lubliner"],
            "institution": "City Colleges of Chicago",
            "topics_covered": [
                "Set Theory",
                "Cartesian Products",
                "Combinations and permutations",
                "Binomial theorem",
                "Logic: Propositions. True tables",
                "Quantifiers",
                "Relations",
                "Functions",
                "Recursion",
                "Graphs",
                "Trees",
                "Lattices",
                "Boolean algebras and functions"
                ],
                "format": ["Web", "PDF"]
            }
            
        print(discrete_math_textbook_info)
      </input>
  </sage>

  <p>
    <term>Strings</term>: Sequence of characters used for text. You can use single or double quotes.
  </p>
  <sage>
      <input>
          myString = "Hello, World"
          print(type(myString))
          print(myString)
      </input>
  </sage>

</section>