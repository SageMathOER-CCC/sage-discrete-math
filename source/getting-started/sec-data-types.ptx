<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="data-types" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Data Types</title>
  <p>
    Sage has many different classes of objects. Sage is built on top of Python, so it has all the data types that Python has. Sage also has its own classes that are well suited for mathematical computations.
    Let's ask sage what type of <term>object</term> this is.
  </p>
  <sage>
    <input>
        n = 2
        type(n)
    </input>
  </sage>

  <p>
    In the following example Sage does not evaluate an approximation of <c>sqrt(2) * log(3)</c>. Sage will retain the symbolic value for accuracy.
  </p>
  <sage>
      <input>
          n = sqrt(2) * log(3)
          type(n)
      </input>
  </sage>

  <p>
    <term>Strings</term>: Sequence of characters used for text. You can use single or double quotes.
  </p>
  <sage>
      <input>
          greeting = "Hello, World!"
          type(greeting)
      </input>
  </sage>

  <p>
    <c>True</c> and <c>False</c> <term>boolean</term> values. 
  </p>
  <sage>
    <input>
        # Check if 5 in contained in the set of prime numbers
        bool = 5 in Primes()
        type(bool)
    </input>
  </sage>

  <p>
    <term>Lists</term>: Ordered mutable collections of items within a pair of square brackets <c>[]</c>. If an object is mutable, the value can be changed after it is created.
  </p>
  <sage>
      <input>
          l = [1, 3, 3, 2]
          type(l)
      </input>
  </sage>

  <p>
    Lists are indexed starting at 0. Here we access the first element of a list by asking for the value at index zero.
  </p>
  <sage>
    <input>
        l[0]
    </input>
</sage>
<p>
  Lists have many handy methods.
</p>
<sage>
  <input>
    # Find the number of elements in the list
    len(l)
  </input>
</sage>

  <p>
      <term>Tuples</term>: Ordered, immutable collections within a pair of parenthesis <c>()</c>. If an object is immutable, the value cannot be changed after it is created.
  </p>
  <sage>
      <input>
          t = (1, 3, 3, 2)
          type(t)
      </input>
  </sage>

  <p>
    <term>set</term>: <c>set()</c> with lowercase <c>s</c> are built into Python. Python sets are collections of unique items within a pair of curly braces <c>{}</c>.
  </p>
  <sage>
      <input>
          s = {1, 3, 3, 2}
          type(s)
      </input>
  </sage>

  <p>
    <term>Set</term> is a built-in Sage class. It is similar to a Python set, with added functionality for mathematical operations.
  </p>
  <sage>
      <input>
          S = Set([1, 3, 3, 2])
          type(S)
      </input>
  </sage>
  <p>
    We define the set in a list with square brackets <c>[]</c>. The set is then created with the <c>Set()</c> function. When a list is converted to a set, the duplicates are removed.
  </p>
  <sage>
    <input>
        S = Set([5, 5, 1, 3, 5, 3, 2, 2, 3])
        print(S)
    </input>
</sage>

  <p>
      <term>Dictionaries</term>: Collections of key-value pairs.
  </p>
  <sage>
      <input>
        # Python dictionary for the textbook
        import pprint

        d = {
            "title": "Discrete Math with SageMath",
            "authors": ["Zunaid Ahmed", "Hellen Colman", "Samuel Lubliner"],
            "institution": "City Colleges of Chicago",
            "topics_covered": [
                "Set Theory",
                "Cartesian Products",
                "Combinations and permutations",
                "Binomial theorem",
                "Logic: Propositions. True tables",
                "Quantifiers",
                "Relations",
                "Functions",
                "Recursion",
                "Graphs",
                "Trees",
                "Lattices",
                "Boolean algebras and functions"
                ],
                "format": ["Web", "PDF"]
            }
        print(type(d))
        pprint.pprint(d)
      </input>
  </sage>
  <p>
    The <c>pprint</c> module is used to print the dictionary in a more readable format.
  </p>
</section>