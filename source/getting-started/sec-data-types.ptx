<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="data-types" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Data Types</title>

    <p>
        In computer science, <term>Data types</term> define the properties of data, and consequently the
        behavior of operations on these data types. Since Sage is built on Python, it naturally inherits
        all Python's built-in data types. Sage does also introduces new additional and custom classes and
        specific data types better-suited and optimized for mathematical computations.
    </p>

    <p>
        <idx><h>data types</h><h>integer</h></idx>
        Let's check the type of a simple integer in Sage.
    </p>
    <sage>
    <input>
        n = 2
        print(n)
        type(n)
    </input>
    </sage>

    <p>
        The <c>type()</c> function confirms that <c>2</c> is an instance of Sage's <term>Integer</term> class.
    </p>

    <p>
        <idx><h>data types</h><h>symbolic</h></idx>
        Sage supports <term>symbolic</term> computation, where it retains and preserves the actual value of a
        math expression rather than evaluating them for approximated values.
    </p>
    <sage>
    <input>
        sym = sqrt(2) / log(3)
        show(sym)
        type(sym)
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>rational</h></idx>
        Similarly, Sage uses to its own <c>rational</c> class when dividing two <term>Integers</term>.
    </p>
    <sage>
    <input>
        k = 2/3
        show(k)
        type(k)
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>string</h></idx>
        <term>String</term>: a <c>str</c> is a sequence of characters. Strings can be enclosed in single
        or double quotes.
    </p>
    <sage>
    <input>
        greeting = "Hello, World!"
        print(greeting)
        print(type(greeting))
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>boolean</h></idx>
        <term>Boolean</term>: a (<c>bool</c>) data type represents one of only two possible values:
        <c>True</c> or <c>False</c>.
    </p>
    <sage>
    <input>
        b = 5 in Primes()  # Check if 5 is a prime number
        print(f"{b} is {type(b)}")
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>list</h></idx>
        <term>List</term>: A mutable sequence or collection of items enclosed in square brackets <c>[]</c>.
        (an object is mutable if you can change its value after creating it).
    </p>
    <sage>
    <input>
        l = [1, 3, 3, 2]
        print(l)
        print(type(l))
    </input>
    </sage>

    <p>
        Lists are indexed starting at <c>0</c>. The first element is at index zero, and can be accessed as follows:
    </p>
    <sage>
    <input>
        l[0]
    </input>
    </sage>

    <p>
        The <c>len()</c> function returns the number of elements in a list.
    </p>
    <sage>
    <input>
        len(l)
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>tuple</h></idx>
        <term>Tuple</term>: is an immutable sequence of items enclosed in parentheses <c>()</c>.
        (an object is immutable if you cannot change its value after creating it).
    </p>
    <sage>
    <input>
        t = (1, 3, 3, 2)
        print(t)
        type(t)
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>set (Python)</h></idx>
        <term>set</term> (with a lowercase <c>s</c>): is a Python built-in type, which represents an
        unordered collection of unique items, enclosed in curly braces <c>{}</c>. The printout of
        the following example shows there are no duplicates.
    </p>
    <sage>
    <input>
        s = {1, 3, 3, 2}
        print(s)
        type(s)
    </input>
    </sage>

    <p>
        In Sage, <c>Set</c> (with an uppercase <c>S</c>) extends the native Python's <c>set</c> with additional
        mathematical functionality and operations.
    </p>
    <sage>
    <input>
        S = Set([1, 3, 3, 2])
        type(S)
    </input>
    </sage>

    <p>
        We start by defining a <c>list</c> using the square brackets <c>[]</c>. Then, Sage <c>Set()</c> function
        removes any duplicates and provides the mathematical set operations. Even though Sage supports Python sets,
        we will use Sage <c>Set</c> for the added features. Be sure to define <c>Set()</c> with an uppercase <c>S</c>.
    </p>
    <sage>
    <input>
        S = Set([5, 5, 1, 3, 5, 3, 2, 2, 3])
        print(S)
    </input>
    </sage>

    <p>
        <idx><h>data types</h><h>dictionary</h></idx>
        A <term>Dictionary</term> is a collection of key-value pairs, enclosed in curly braces <c>{}</c>.
    </p>
    <sage>
    <input>
        d = {
            "title": "Discrete Math with SageMath",
            "institution": "City Colleges of Chicago",
            "topics_covered": [
                "Set Theory",
                "Combinations and Permutations",
                "Logic",
                "Quantifiers",
                "Relations",
                "Functions",
                "Recursion",
                "Graphs",
                "Trees",
                "Lattices",
                "Boolean Algebras",
                "Finite State Machines"
            ],
            "format": ["Web", "PDF"]
        }
        type(d)
    </input>
    </sage>

    <p>
        Use the <c>pprint</c> module to improve the dictionary readability.
    </p>
    <sage>
    <input>
        import pprint
        pprint.pprint(d)
    </input>
    </sage>

</section>
