<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-flow-control-structures" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Flow Control Structures</title>
    <idx>
        <h>flow controls</h>
        <h>if statement</h>
        <h>elif</h>
        <h>else</h>
        <h>while loop</h>
        <h>control structures</h>
    </idx>

    <introduction>
        <p>
            When writing programs, we want to control the flow of execution. Flow control
            structures allow your code to make decisions or repeat actions based on conditions. These structures
            are part of Python and work the same way in Sage. There are three primary types of flow control structures:
            <ul>
                <li>
                    <p>
                        <term>Assignment</term> statements store values in <em>variables</em>. These let us reuse results
                        and build more complex expressions step by step. An assignment is performed using the <c>=</c> operator
                        as discussed earlier (see <xref ref="subsec-Variables-and-Names"/>). Note that Sage also
                        supports compound assignment operators like <c>+=</c>, <c>-=</c>, <c>*=</c>, <c>/=</c>, and <c>%=</c> which
                        combine assignment with basic arithmetic operations (addition, subtraction, multiplication, division and modulus).
                    </p>
                </li>
                <li>
                    <p>
                        <term>Branching</term> uses <em>conditional statements</em> like <c>if</c>, <c>elif</c>, and
                        <c>else</c> to execute different blocks of code based on logical tests.
                    </p>
                </li>
                <li>
                    <p>
                        <term>Loops</term> such as <c>for</c> and <c>while</c> let us iterate over some data structures
                        and also repeat blocks of code multiple times. This is useful when processing sequences, performing
                        computations, or automating repetitive tasks.
                    </p>
                </li>
            </ul>
            These core concepts apply to almost every programming language and are fully supported in Sage through its
            Python foundation.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                Sage uses the same control structures as Python, so most Python syntax for logic and
                repetition will work seamlessly in Sage.
            </p>
        </aside>
    </introduction>

    <subsection xml:id="subsec-if-else">
        <title>Conditional Statements</title>
        <p>
            The <c>if</c> statement lets your program execute a block of code only when a condition
            is true. You can add <c>else</c> and <c>elif</c> clauses to cover additional conditions.
        </p>

        <sage>
            <input>
                x = 7
                if x % 2 == 0:
                    print("x is even")
                elif x % 3 == 0:
                    print("x is divisible by 3")
                else:
                    print("x is odd and not divisible by 3")
            </input>
        </sage>

        <p>
            Use indentation to define blocks of code that belong to the <c>if</c>, <c>elif</c>,
            or <c>else</c> clauses. Just like in Python, the indentation is significant and is
            used to define code blocks.
        </p>
    </subsection>

    <subsection xml:id="subsec-iteration">
        <title>Iteration</title>
        <idx>
            <h>iteration</h>
            <h>for loop</h>
        </idx>

        <p>
            Iteration is a programming technique that allows us to efficiently repeat instructions with minimal syntax.
            The <c>for</c> loop assigns a value from a sequence to the loop variable and executes the loop body once for each value.
        </p>

        <p>Here is a basic example of a <c>for</c> loop:</p>

        <sage>
            <input>
                # Print the numbers from 0 to 19
                # Notice that the loop is zero-indexed and excludes 20
                for i in range(20):
                    print(i)
            </input>
        </sage>

        <p>
            By default, <c>range(n)</c> starts at <m>0</m>. To specify a different starting value, provide two arguments:
        </p>

        <sage>
            <input>
                # Here, the starting value (10) is included
                for i in range(10, 20):
                    print(i)
            </input>
        </sage>

        <p>
            You can also define a step value to control the increment:
        </p>

        <sage>
            <input>
                # Prints numbers from 30 to 90, stepping by 9
                for i in range(30, 90, 9):
                    print(i)
            </input>
        </sage>

        <idx>
            <h>iteration</h>
            <h>list comprehension</h>
        </idx>

        <subsubsection xml:id="subsec-list-comprehension">
            <title>List Comprehension</title>

            <p>
                List comprehension is a concise way to create lists. Unlike Python's <c>range()</c>,
                Sage's list comprehension syntax includes the ending value in a range.
            </p>

            <sage>
                <input>
                    # Create a list of the cubes of the numbers from 9 to 20
                    # The for loop is written inside square brackets
                    [n**3 for n in [9..20]]
                </input>
            </sage>

            <p>
                You can also filter elements using a condition. Below, we create a list containing only
                the cubes of even numbers:
            </p>

            <sage>
                <input>
                    [n**3 for n in [9..20] if n % 2 == 0]
                </input>
            </sage>

        </subsubsection>
    </subsection>

    <subsection xml:id="subsec-other-flow">
        <title>Other Flow Control Structures</title>
        <p>
            In addition to <c>if</c> statements, Sage supports other common Python control structures:
        </p>

        <ul>
            <li>
                <p>
                    The <c>while</c> loops repeats a block of code while a condition remains true.
                </p>
            </li>
        <li>
            <p>
                The <c>break</c> statement terminates and exit a loop early.
            </p>
        </li>
        <li>
            <p>
                The <c>continue</c> statement skips the rest of the loop body and jump to the next iteration.
            </p>
        </li>
        <li>
            <p>
                The <c>pass</c> statement serves as a placeholder for future code to be added later, or to tell
                Sage do nothing (useful for example when we want to catch an exception so that the program does
                not crash, yet choose no to do anything with the exception object).
            </p>
        </li>
        </ul>

        <p>
            We will see examples on how to use these statements later on in the book. Here is a quick example
            of a <c>while</c> loop that prints out the numbers from <m>0</m> to <m>4</m>:
        </p>
        <sage>
            <input>
                count = 0
                while count &lt; 5:
                    print(count)
                    count += 1
            </input>
        </sage>
    </subsection>
</section>
