<section xml:id="sec-practical-applications">
    <title>Logic Gates in action</title>
    <introduction>
        <p>
            Logic gates are fundamental building blocks in digital circuits and play a crucial role in the design of modern computing systems. They operate based on binary principles, where the input and output values are either high (<c>1</c>) or low (<c>0</c>), corresponding to different logical conditions. Their importance spans from simple devices like calculators to advanced systems like microprocessors, enabling core operations like arithmetic, data routing, and memory storage.
        </p>
        <p>
            To better understand how logic gates impact our daily lives, let's explore a few real-world applications. These examples showcase how simple logic circuits contribute to sophisticated operations within digital devices.
        </p>
    </introduction>

    <subsection xml:id="sec-full-adder">
        <title>Full Adder: Arithmetic with Logic Gates</title>
        <p>
            In digital systems, adding numbers is a fundamental task, and this is where the <term>full adder</term> circuit comes into play. A full adder is a logic circuit that adds three bits: two input bits and a carry bit from a previous addition. To understand its importance, let's break it down:
        </p>

        <p>
            <term>Binary Addition Basics</term>: In binary, numbers are represented by just <c>0</c>s and <c>1</c>s. When adding two binary numbers, if the result is <c>1 + 1</c>, the sum is <c>0</c>, and a carry of <c>1</c> is generated (similar to how <c>9 + 1</c> in decimal gives <c>10</c>, where <c>0</c> is the sum, and <c>1</c> is carried to the next column). A full adder can handle this carry, making it an essential part of multi-bit addition.
        </p>

        <p>
            <term>How a Full Adder Works</term>: The full adder has three inputs:
            <itemizedlist>
                <item><term>A</term>: One of the input bits.</item>
                <item><term>B</term>: The second input bit.</item>
                <item><term>C (Carry-in)</term>: A carry bit from a previous addition.</item>
            </itemizedlist>
            It then outputs two results:
            <itemizedlist>
                <item><term>Sum</term>: The sum of the three bits.</item>
                <item><term>Carry-out</term>: The carry bit, which may be passed to the next stage of addition.</item>
            </itemizedlist>
            The circuit achieves this using a combination of three types of logic gates:
            <itemizedlist>
                <item><c>XOR</c> gates to compute the sum of the input bits.</item>
                <item><c>AND</c> and <c>OR</c> gates to calculate the carry bits.</item>
            </itemizedlist>
        </p>

        <p>
            <term>Detailed Example</term>: Let’s consider adding two binary digits, <c>A = 1</c>, <c>B = 1</c>, with a carry-in of <c>1</c>:
            <itemizedlist>
                <item>The XOR gate first adds A and B: <c>1 XOR 1 = 0</c> (because XOR outputs <c>1</c> only if one input is <c>1</c> but not both).</item>
                <item>The result is XORed with the carry-in: <c>0 XOR 1 = 1</c>.</item>
                <item>The sum is <c>1</c>.</item>
                <item>The AND gate checks if both A and B are <c>1</c>, which they are, so the result is <c>1</c>.</item>
                <item>This carry-out bit is passed to the next full adder in a sequence if needed.</item>
            </itemizedlist>
        </p>

        <sage>
            <input>
                from sympy.logic.boolalg import Xor, And, Or
                from sympy.abc import A, B, C

                # Full Adder logic
                def full_adder(A, B, C):
                    sum_output = Xor(Xor(A, B), C)
                    carry_output = Or(And(A, B), And(Xor(A, B), C))
                    return sum_output, carry_output

                # Print full truth table for Full Adder
                print("A B C | Sum Carry")
                print("-" * 20)
                for A_val in [False, True]:
                    for B_val in [False, True]:
                        for C_val in [False, True]:
                            sum_output, carry_output = full_adder(A_val, B_val, C_val)
                            print(f"{int(bool(A_val))} {int(bool(B_val))} {int(bool(C_val))} | {int(bool(sum_output))}   {int(bool(carry_output))}")
            </input>
            <output>
            </output>
        </sage>

        <p>
            Full adders are essential in arithmetic operations, especially in computer processors. They allow for multi-bit addition by chaining together, where the carry-out from one full adder becomes the carry-in for the next, enabling larger operations like adding two multi-bit binary numbers.
        </p>
    </subsection>

    <subsection xml:id="sec-multiplexer">
        <title>Multiplexers: Routing Data</title>
        <p>
            In many digital systems, it’s often necessary to choose between multiple sources of data and direct the selected data to a single destination. This process is called <term>multiplexing</term>, and it’s accomplished using a circuit known as a <term>multiplexer</term> or <term>mux</term>. A multiplexer selects one of several input signals and forwards it to the output based on control signals called select lines.
        </p>

        <p>
            Multiplexers are useful in scenarios where multiple signals need to share the same output line or resource. Instead of having separate hardware for each signal, a multiplexer can route the appropriate input to the output based on the current needs of the system, saving space and reducing complexity. They are heavily used in communication systems, CPUs, and memory devices, where efficient data routing is essential.
        </p>

        <p>
            For instance, consider a <c>4-to-1</c> multiplexer, which has four input signals but only one output. The selection of which input is sent to the output is controlled by two additional signals called select lines. Depending on the values of these select lines, the multiplexer connects one of the four inputs to the output.
        </p>

        <p>
            The logic behind multiplexers uses a combination of gates to manage this routing. When the select lines are set to a specific combination, they determine which input to send to the output by enabling the respective logic gate combination.
        </p>
        <sage>
            <input>
                from sympy.logic.boolalg import Or, And, Not
                from sympy import symbols

                # Define variables A, B, S0, S1
                A, B, S0, S1 = symbols('A B S0 S1')

                # 4-to-1 Multiplexer logic
                mux_output = Or(
                    And(Not(S0), Not(S1), A),  # Select input A
                    And(S0, Not(S1), B),       # Select input B
                    # Additional inputs can be added for larger multiplexers
                )

                # Assign input and select line values
                A_val = True
                B_val = False
                S0_val = True
                S1_val = False

                # Evaluate the multiplexer
                evaluated_mux = mux_output.subs({A: A_val, B: B_val, S0: S0_val, S1: S1_val})
                evaluated_mux
            </input>
            <output>
            </output>
        </sage>

        <p>
            Multiplexers are heavily used in communication systems, like in your computer's CPU, to manage and control the flow of data between different components.
        </p>
    </subsection>

    <subsection xml:id="sec-memory-circuits">
        <title>Memory Circuits: Storing Data</title>
        <p>
            In digital systems, one of the most critical tasks is storing and retrieving data. Memory circuits accomplish this by using combinations of logic gates to hold data, even after the input signals have changed. These circuits form the backbone of memory devices like registers, Random Access Memory (RAM), and caches, which are used to store instructions and data in modern computers.
        </p>

        <p>
            The basic building block of memory circuits is a type of circuit called a <term>flip-flop</term>. Flip-flops are used to store a single bit of data, which can either be a <c>0</c> or a <c>1</c>. Flip-flops are created using logic gates such as <c>NAND</c> or <c>NOR</c> gates, arranged in specific configurations to allow them to "remember" their state even after the input signal has been removed. This property makes flip-flops fundamental in storing data temporarily in a system.
        </p>

        <p>
            One common example of a flip-flop is the <term>SR (Set-Reset) flip-flop</term>, which is used to set a bit to <c>1</c> or reset it to <c>0</c>. The SR flip-flop is typically built using two cross-coupled NAND gates. It operates with two inputs: the Set input (<c>S</c>) and the Reset input (<c>R</c>). Depending on the combination of these inputs, the flip-flop will either store a <c>1</c>, store a <c>0</c>, or retain its previous value. This ability to hold a state is what allows SR flip-flops to act as <c>1</c>-bit memory elements.
        </p>

        <p>
            Flip-flops like the SR flip-flop are used to construct larger memory units. For instance, a register, which stores a group of bits, is made by combining several flip-flops. Memory circuits such as these are essential in the construction of computer memory, where data needs to be stored and accessed quickly.
        </p>
        <sage>
            <input>
                from sympy.logic.boolalg import Nand
                from sympy import symbols

                # Define variables S, R
                S, R = symbols('S R')

                # SR Flip-flop using NAND gates
                Q_not = Nand(R, True)  # Assume initial state for Q (True in this case)
                Q = Nand(S, Q_not)     # Set input (S)

                # Assign initial values for Set and Reset
                S_val = True
                R_val = False

                # Now evaluate both Q and Q_not with the given S and R values
                evaluated_Q_not = Q_not.subs({R: R_val})
                evaluated_Q = Q.subs({S: S_val, Q_not: evaluated_Q_not})

                evaluated_Q, evaluated_Q_not
            </input>
            <output>
            </output>
        </sage>

        <p>
            Memory circuits like this are used to build larger memory systems such as registers and Random Access Memory (RAM), where bits of data need to be stored and accessed efficiently.
        </p>
    </subsection>

    <conclusion>
        <p>
            These are just a few examples of how logic gates are used in real-world applications. From performing arithmetic operations in processors, routing data in communication systems, to storing data in memory circuits, logic gates form the backbone of modern computing systems.
        </p>
    </conclusion>

</section>
