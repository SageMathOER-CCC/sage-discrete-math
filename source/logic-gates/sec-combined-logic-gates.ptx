<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-combined-logic-gates" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Combining Logic Gates and Simplifying Circuits</title>

    <subsection>
        <title>Combinations of Logic Gates</title>
        <p>
            Logic gates can be combined to create more complex circuits that perform specific tasks. By linking gates together, we can create circuits that process multiple inputs to produce a desired output. For example, combining an AND gate and a NOT gate results in a NAND gate, which inverts the output of the AND gate. More complex circuits, such as half-adders and multiplexers, are built by combining basic gates in strategic ways.
        </p>
        <p>
            Let's look at a simple example where an OR gate is combined with a NOT gate. The OR gate takes two inputs and produces a 1 if either input is 1. By applying a NOT gate to the output, the circuit produces the opposite, meaning it will only produce 1 if both inputs are 0.
        </p>
        <sage>
            <input>
                from sympy.logic.boolalg import Or, Not
                from sympy.abc import A, B

                # Define the logic circuit: NOT(OR(A, B))
                circuit_output = Not(Or(A, B))

                # Assign values to A and B
                A_val = False
                B_val = False

                # Substitute values of A and B into the circuit and evaluate
                evaluated_output = circuit_output.subs({A: A_val, B: B_val})
                evaluated_output
            </input>
            <output>
                # Shows the evaluated result of the NOT(OR(A, B)) circuit
            </output>
        </sage>


        <p>
            Combining basic gates allows us to create circuits for various practical applications. For example, combining AND and OR gates is a key part of building circuits like arithmetic logic units (ALUs) inside CPUs.
        </p>
    </subsection>

    <subsection>
        <title>Boolean Algebra and Logic Gates</title>
        <p>
            Boolean algebra provides a way to simplify complex logic circuits. By using Boolean algebra rules, you can take a complicated circuit and reduce it to a simpler form without changing its functionality. For example, the expression <m>(A AND B) OR (A AND NOT B)</m> can be simplified to just <m>A</m>.
        </p>
        <p>
            Here's a practical example. Consider the following Boolean expression, which combines several gates:
        </p>
        <sage>
            <input>
                from sympy.logic.boolalg import And, Or, Not
                from sympy import simplify
                A, B, C = True, False, True
                complex_expr = Or(And(A, B), And(A, Not(B)), And(C, B))
                simplified_expr = simplify(complex_expr)
                simplified_expr
            </input>
            <output>
                # Shows the simplified form of the Boolean expression
            </output>
        </sage>

        <p>
            Boolean algebra helps optimize circuits, reducing the number of gates needed and making the system more efficient. It's a key tool in designing everything from small circuits to large-scale computing systems.
        </p>
    </subsection>

    <subsection>
        <title>Truth Tables and Logic Circuits</title>
        <p>
            Truth tables are a visual way to represent how inputs to a logic circuit map to its outputs. For each possible combination of inputs, the table shows the corresponding output, making it easier to analyze and understand the behavior of the circuit.
        </p>
        <p>
            Letâ€™s create a truth table for a circuit that combines an AND gate and an OR gate. This will help us visualize how the output changes with different input values.
        </p>
        <sage>
            <input>
                from sympy.logic.boolalg import And, Or
                from sympy.abc import A, B
                def generate_truth_table():
                    table = []
                    for A_val in [False, True]:
                        for B_val in [False, True]:
                            and_output = And(A_val, B_val)
                            or_output = Or(A_val, B_val)
                            table.append([A_val, B_val, and_output, or_output])
                    return table
                generate_truth_table()
            </input>
            <output>
                # Shows the truth table for AND and OR gates with two inputs
            </output>
        </sage>
        <p>
            In this example, the truth table helps us see how the AND gate only produces 1 when both inputs are 1, while the OR gate produces 1 whenever at least one input is 1.
        </p>

        <p>
            Truth tables are an essential tool for designing and analyzing logic circuits, allowing you to predict the behavior of even complex circuits by systematically evaluating every possible input combination.
        </p>
    </subsection>

</section>
