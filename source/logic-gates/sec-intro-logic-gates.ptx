<section xml:id="sec-intro-logic-gates" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction to Logic Gates</title>

    <subsection>
        <title>Basic Logic Gates</title>
        <idx>
            <h>logic gates</h>
            <h>AND</h>
            <h>OR</h>
            <h>NOT</h>
            <h>NAND</h>
            <h>NOR</h>
            <h>XOR</h>
            <h>XNOR</h>
        </idx>
        <p>
            Logic gates are the foundation of digital circuits. They process binary inputs (<c>0</c>s and <c>1</c>s) to produce specific outputs, defined by truth tables. Common gates include <c>AND</c>, <c>OR</c>, <c>NOT</c>, <c>NAND</c>, <c>NOR</c>, <c>XOR</c>, and <c>XNOR</c>. These gates combine to form complex systems such as CPUs and memory circuits.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                Logic gates underpin modern computing, enabling operations like addition, decision-making, and data processing.
            </p>
        </aside>
    </subsection>

    <subsection>
        <title>AND Gate</title>
        <p>
            The <c>AND</c> gate produces a <c>1</c> only when both inputs are <c>1</c>.
        </p>
        <figure>
            <media>
                <image source="logic-gates/and.png" width="50%"/>
            </media>
            <caption>AND Gate</caption>
        </figure>
        <sage>
            <input>
                from sympy.logic.boolalg import And
                from sympy.abc import A, B
                And(A, B)
            </input>
        </sage>
        <p>
            Truth table for the <c>AND</c> gate:
        </p>
        <sage>
            <input>
                # Generate truth table for AND gate
                print("\nA | B | A AND B")
                print("--|---|--------")
                for A in [False, True]:
                    for B in [False, True]:
                        print(f"{int(A)} | {int(B)} | {int(bool(And(A, B)))}")
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>OR Gate</title>
        <p>
            The <c>OR</c> gate produces a <c>1</c> if at least one input is <c>1</c>.
        </p>
        <figure>
            <media>
                <image source="logic-gates/or.png" width="50%"/>
            </media>
            <caption>OR Gate</caption>
        </figure>
        <sage>
            <input>
                from sympy.logic.boolalg import Or
                from sympy.abc import A, B
                Or(A, B)
            </input>
        </sage>
        <p>
            Truth table for the <c>OR</c> gate:
        </p>
        <sage>
            <input>
                # Generate truth table for OR gate
                print("\nA | B | A OR B")
                print("--|---|--------")
                for A in [False, True]:
                    for B in [False, True]:
                        print(f"{int(A)} | {int(B)} | {int(bool(Or(A, B)))}")
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>NOT Gate</title>
        <p>
            The <c>NOT</c> gate inverts the input: <c>1</c> becomes <c>0</c>, and <c>0</c> becomes <c>1</c>.
        </p>
        <figure>
            <media>
                <image source="logic-gates/not.png" width="50%"/>
            </media>
            <caption>NOT Gate</caption>
        </figure>
        <sage>
            <input>
                from sympy.logic.boolalg import Not
                from sympy.abc import A
                Not(A)
            </input>
        </sage>
        <p>
            Truth table for the <c>NOT</c> gate:
        </p>
        <sage>
            <input>
                # Generate truth table for NOT gate
                print("\nA | NOT A")
                print("--|-------")
                for A in [False, True]:
                    print(f"{int(A)} | {int(bool(Not(A)))}")
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Derived Gates</title>
        <p>
            Additional gates derive from <c>AND</c>, <c>OR</c>, and <c>NOT</c>, offering varied functionality:
        </p>
        <ul>
            <li><c>NAND</c>: Produces <c>0</c> only when both inputs are <c>1</c>.</li>
            <li><c>NOR</c>: Produces <c>1</c> only when both inputs are <c>0</c>.</li>
            <li><c>XOR</c>: Produces <c>1</c> when inputs differ.</li>
            <li><c>XNOR</c>: Produces <c>1</c> when inputs are the same.</li>
        </ul>
        <figure>
            <media>
                <image source="logic-gates/nand.png" width="25%"/>
                <image source="logic-gates/nor.png" width="25%"/>
                <image source="logic-gates/xor.png" width="25%"/>
                <image source="logic-gates/xnor.png" width="25%"/>
            </media>
            <caption>Symbols for Derived Gates</caption>
        </figure>
        <aside>
            <title>Notes</title>
            <p>
                These gates are critical for advanced functions, like error detection (<c>XOR</c>) and parity checking (<c>XNOR</c>).
            </p>
        </aside>
    </subsection>
</section>
