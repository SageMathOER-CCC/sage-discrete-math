<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-intro-logic-gates" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction to Logic Gates</title>

    <p>
        Logic gates are the building blocks of digital circuits. They process binary inputs (0s and 1s) and produce a single binary output. Logic gates are fundamental to how computers and other digital devices function, as they make decisions based on inputs and perform tasks like arithmetic, data storage, and control operations. In this chapter, we will explore the most common types of logic gates, how they are used, and how they form the basis of complex circuits.
    </p>

    <sage>
        <input>
            from sympy.logic.boolalg import And, Or, Not, Nand, Nor, Xor, Equivalent
            from sympy.abc import A, B
            A = True
            B = False
            # Example: AND gate with inputs A and B
            And(A, B)
        </input>
        <output>
            # Shows the result of AND gate when A is True and B is False
        </output>
    </sage>

    <aside>
        <title>Notes</title>
        <p>
            Logic gates are the foundation of modern computing. Every operation your computer performs, from adding numbers to displaying images, is made up of logic gates that process binary signals (0s and 1s).
        </p>
    </aside>

    <p>
        The most common logic gates include AND, OR, NOT, NAND, NOR, XOR, and XNOR. Each gate has its own symbol and truth table that defines how it processes inputs to produce an output. Understanding these basic gates is the first step to learning how digital systems work, as more complex circuits are built by combining these gates.
    </p>

        <idx><h>AND</h></idx>
        <idx><h>OR</h></idx>
        <idx><h>NOT</h></idx>
        <idx><h>NAND</h></idx>
        <idx><h>NOR</h></idx>
        <idx><h>XOR</h></idx>
        <idx><h>XNOR</h></idx>

        <p>
            Logic gates operate on binary values (0s and 1s). Letâ€™s take a look at the basic gates and how they function with example inputs.
        </p>

        <p>
            AND gate: Produces a 1 only if both inputs are 1.
        </p>
        <sage>
            <input>
                A = True
                B = False
                And(A, B)
            </input>
            <output>
                # Shows the result of AND gate when A is True and B is False
            </output>
        </sage>

        <p>
            OR gate: Produces a 1 if at least one input is 1.
        </p>
        <sage>
            <input>
                A = True
                B = False
                Or(A, B)
            </input>
            <output>
                # Shows the result of OR gate when A is True and B is False
            </output>
        </sage>

        <p>
            NOT gate: Produces the opposite of the input, 1 becomes 0 and 0 becomes 1.
        </p>
        <sage>
            <input>
                A = True
                Not(A)
            </input>
            <output>
                # Shows the result of NOT gate when A is True
            </output>
        </sage>

        <p>
            NAND gate: Produces a 0 only if both inputs are 1.
        </p>
        <sage>
            <input>
                A = True
                B = True
                Nand(A, B)
            </input>
            <output>
                # Shows the result of NAND gate when A is True and B is True
            </output>
        </sage>

        <p>
            NOR gate: Produces a 1 only if both inputs are 0.
        </p>
        <sage>
            <input>
                A = False
                B = False
                Nor(A, B)
            </input>
            <output>
                # Shows the result of NOR gate when A and B are both False
            </output>
        </sage>

        <p>
            XOR gate: Produces a 1 if exactly one input is 1, but not both.
        </p>
        <sage>
            <input>
                A = True
                B = False
                Xor(A, B)
            </input>
            <output>
                # Shows the result of XOR gate when A is True and B is False
            </output>
        </sage>

        <p>
            XNOR gate (equivalent gate): Produces a 1 if both inputs are the same.
        </p>
        <sage>
            <input>
                A = True
                B = True
                Equivalent(A, B)
            </input>
            <output>
                # Shows the result of XNOR gate when A is True and B is True
            </output>
        </sage>

        <p>
            These basic gates form the foundation for more complex circuits, allowing us to build anything from simple logic operations to entire computer processors.
        </p>

        <aside>
            <title>Notes</title>
            <p>
                These logic gates are used to design everything from simple calculators to complex CPUs. Understanding the behavior of each gate is like learning the alphabet of digital logic.
            </p>
        </aside>


</section>