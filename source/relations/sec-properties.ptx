<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="properties" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Properties</title>
    <introduction>
        <p>
            A relation may satisfy certain properties:
        
            <ul>
                <li>
                    <p>
                        <term>Reflexive</term>:
                        <m>
                            aRa \: \forall a \in A
                        </m>
                    </p>
                </li>
                <li>
                    <p>
                        <term>Symmetric</term>:
                        <m>
                            \text{If } aRb \text{ then } bRa \: \forall a, b \in A
                        </m>
                    </p>
                </li>
                <li>
                    <p>
                        <term>Antisymmetric</term>:
                        <m>
                            \text{If } aRb \text{ and } bRa \text{ then } a = b \: \forall a, b \in A
                        </m>
                    </p>
                </li>
                <li>
                    <p>
                        <term>Transitive</term>:
                        <m>
                            \text{If } aRb \text{ and } bRc \text{ then } aRc \: \forall a, b, c \in A
                        </m>
                    </p>
                </li>
            </ul>
        </p>
        <p>
            Sage is open-source and many people work on the software for free, when they can find the available time. While Sage has many built-in methods, in some cases, we may need to define our own functions to check for certain properties. When you see the <c>def</c> keyword, it means that we are defining a function. The function is a block of code that only runs when it is called. If you would like to reuse the functions defined in this section, you can copy and paste the function definitions into your own Sage worksheet. For methods built into Sage, you can use them directly, without including the definitions. If you feel inspired, try <url href="https://doc.sagemath.org/html/en/faq/faq-contribute.html">contributing</url> to the official Sage project.
        </p>
    </introduction>

    <subsection xml:id="subsec-reflexive">
        <title>Reflexive</title>
        <p>
            A relation <m>R</m> is reflexive if <m>a</m> relates to <m>a</m> for all elements <m>a</m> in the set <m>A</m>. This means all the elements relate to themselves.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3])
                R = Set([(1, 1), (2, 2), (3, 3), (1, 2), (2, 3)])
                show(R)
            </input>
          </sage>
          <p>
            Let's define a function to check if the relation <m>R</m> on set <m>A</m> is reflexive. We'll create a set of <m>(a, a)</m> pairs for each element <m>a</m> in <m>A</m> and check if this set is a subset of <m>R</m>. This will return <c>True</c> if the relation is reflexive and <c>False</c> otherwise.
          </p>
          <sage>
            <input>
                def is_reflexive_set(A, R):
                    reflexive_pairs = Set([(a, a) for a in A])
                    return reflexive_pairs.issubset(R)

                is_reflexive_set(A, R)
            </input>
          </sage>

          <p>
            If we are working with <c>DiGraphs</c>, we can use the method <c>has_edge</c> to check if the graph has a loop for each vertex. Alternatively, if you omit the <c>loops=True</c>, the resulting <c>ValueError</c> message informs us we cannot add edges in our graph without loops, and our relation satisfies the reflexive property.
          </p>
          <sage>
            <input>
                A = [1, 2, 3]
                R = [(1, 1), (2, 2), (3, 3), (1, 2), (2, 3)]

                G = DiGraph(R, loops=True)

                def is_reflexive_digraph(A, G):
                    return all(G.has_edge(a, a) for a in A)

                is_reflexive_digraph(A, G)
            </input>
          </sage>
    </subsection>

    <subsection xml:id="subsec-symmetric">
        <title>Symmetric</title>
        <p>
            A relation is symmetric if <m>a</m> relates to <m>b</m>, then <m>b</m> relates to <m>a</m>. The relation is symmetric if the order of the elements does not matter.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3])

                R = Set([(1, 2), (2, 1), (3, 3)])

                def is_symmetric_set(relation_R):
                    inverse_R = Set([(b, a) for (a, b) in relation_R])
                    return relation_R == inverse_R

                is_symmetric_set(R)
            </input>
        </sage>
        <sage>
            <input>
                relation_R = [(1, 2), (2, 1), (3, 3)]

                G = DiGraph(relation_R, loops=true)

                def is_symmetric_digraph(digraph):
                    return digraph.edges(labels=False) == digraph.reverse().edges(labels=False)
                
                is_symmetric_digraph(G)
            </input>
        </sage>
    </subsection>
    <subsection xml:id="subsec-anti-symmetric">
        <title>Antisymmetric</title>
        <sage>
            <input>
                D = DiGraph([(1, 2), (3, 1), (1,1)], loops=true)

                D.antisymmetric()
            </input>
        </sage>
        <sage>
            <input>
                S = Set([1, 2, 3])

                relation = [(a, b) for a in S for b in S if b % a == 0]

                G = DiGraph(relation, loops=true)

                G.antisymmetric()
            </input>
        </sage>

        <p>
            We can also define a function to check for the antisymmetric property in a <c>Set</c>:
        </p>
        <sage>
            <input>
                relation = Set([(1, 2), (2, 3), (3, 4), (4, 1)])

                def is_antisymmetric(relation):
                    for a, b in relation:
                        if (b, a) in relation and a != b:
                            return False
                    return True

                is_antisymmetric(relation)
            </input>
        </sage>
    </subsection>

    <subsection xml:id="subsec-transitive">
        <title>Transitive</title>
        <sage>
            <input>
                D = DiGraph([(1, 2), (2, 3), (1, 3)], loops=True)

                D.is_transitive()
            </input>
        </sage>

        <p>
            Sage <c>Sets</c> don't have a built-in method to check if a relation is transitive. However, we can convert a Set to a list and create a directed graph from the relation. Then, we can use the built-in method <c>is_transitive</c> to check if the graph is transitive.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3])
                
                R = Set([(1, 2), (2, 3), (1, 3)])
                
                relation= list(R)

                G = DiGraph(relation)

                G.is_transitive()
            </input>
        </sage>
    </subsection>
</section>