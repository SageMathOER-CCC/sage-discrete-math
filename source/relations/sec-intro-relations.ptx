<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="intro-relations" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Introduction to Relations</title><idx><h>relation</h></idx>
    <p>
        A <term>relation</term> <m>R</m> from set <m>A</m> to set <m>B</m> is any subset of the Cartesian product <m>A \times B</m>, indicating that <m>R \subseteq A \times B</m>. We can ask Sage to decide if <m>R</m> is a relation from <m>A</m> to <m>B</m>. First, construct the Cartesian product <m>C = A \times B</m>. Then, build the set <m>S</m> of all subsets of <m>C</m>. Finally, ask if <m>R</m> is a subset of <m>S</m>.
    </p>
    <aside>
        <title>Notes</title>
        <p>
            Relations are key in social networks—they're what model the connections between people. Take Facebook, for example: it uses relations to show who's friends with who (like someone from set A being friends with someone from set B). These connections form social graphs, which Facebook then analyzes to suggest new friends, groups, or content to keep you engaged and connected with others.
        </p>
    </aside>
    <p>
        Recall the Cartesian product consists of all possible ordered pairs <m>(a, b)</m>, where <m>a \in A</m> and <m>b \in B</m>. Each pair combines an element from set <m>A</m> with an element from set <m>B</m>.
    </p>
    <p>
        In this example, an element in the set <m>A</m> relates to an element in <m>B</m> if the element from <m>A</m> is twice the element from <m>B</m>.
    </p>
    <sage>
        <input>
            A = Set([1, 2, 3, 4, 5, 6])
            B = Set([1, 2, 7])

            C = Set(cartesian_product([A, B]))
            S = Subsets(C)

            R = Set([(a, b) for a in A for b in B if a==2*b])

            print("R =", R)
            print("Is R a relation from set A to set B?", R in S)
        </input>
    </sage>

    <p>
        Let's use relations to explore matching items of clothes. Let's define two sets, jackets and shirts, as examples:
    </p>
    <aside>
        <title>Notes</title>
        <p>
            In fashion retail, understanding the relationship between items like jackets and shirts helps create better recommendation systems. When companies know how people tend to pair clothing, they can suggest full outfits that work well together. It’s a great way to help customers visualize complete looks, making them more likely to buy items that fit their style and preferences.
        </p>
    </aside>
    <p>
        <me>
            \text{jackets} = \{j_1, j_2, j_3\}
        </me>
        <me>
            \text{shirts} = \{s_1, s_2, s_3, s_4\}
        </me>
    </p>
    <p>
        The Cartesian product of jackets and shirts includes all possible combinations of jackets with shirts.
    </p>
    <sage>
        <input>
            # Define the sets of jackets and shirts
            jackets = Set(['j1', 'j2', 'j3'])
            shirts = Set(['s1', 's2', 's3', 's4'])

            # View all the possible combinations of jackets and shirts
            C = cartesian_product([jackets, shirts])

            Set(C)
        </input>
    </sage>
    <p>
        Since the Cartesian product returns all the possible combinations, some jackets and shirts will clash. Let's create a relation from jackets to shirts based on matching the items of clothing.
    </p>
    <sage>
        <input>
            # Define a matching relation between jackets and shirts
            R = Set([('j1', 's1'), ('j2', 's3'), ('j3', 's4'), ('j1', 's2')])

            print("Matching relation R =", R)
        </input>
    </sage>
</section>