<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="digraphs" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Digraphs</title><idx><h>digraph</h></idx>
    <p>
        A digraph, or directed graph, is a visual representation of a relation <m>R</m> on the set <m>A</m>. Every element in set <m>A</m> is shown as a node (vertex). An arrow from the node <m>a</m> to the node <m>b</m> represents the pair <m>(a,b)</m> on the relation <m>R</m>.
    </p>
    <aside>
        <title>Notes</title>
        <p>
            Think of digraphs as maps that show how data flows between computers in a network. Each computer or router is like a city, and the roads between them show the direction of the data. By using digraphs, network engineers can see where the traffic jams are happening and fix them to make everything run smoothly. The same idea applies to social networks, like Twitter. For example, someone might follow you, but you don’t have to follow them back—that’s where the direction matters. Digraphs make it easy to see who the big influencers are. They even help researchers figure out how academic papers are connected by citations, which is useful for spotting groundbreaking research.
        </p>
    </aside>
    <sage>
        <input>
            # Define the set A
            A = Set([2, 3, 4, 6, 8])

            # Define the relation R on A: aRb iff a divides b
            R = [(a, b) for a in A for b in A if a.divides(b)]

            DiGraph(R, loops=true)
        </input>
    </sage>
    <p>
        We can add a title to the digraph with the <c>name</c> parameter.
    </p>
    <aside>
        <title>Real-world Application: Social Network Analysis</title>
        <p>
            Digraphs come in handy when relationships have a clear direction, like who follows who on Twitter or how academic papers cite one another. By mapping these connections, digraphs make it easy to spot influential figures on social media—those who are followed by many, even if they don’t follow back. In the academic world, citation digraphs work similarly, showing which papers are referenced the most. This helps researchers figure out which studies have had the biggest impact and are considered key to the field.
        </p>
    </aside>
    <sage>
        <input>
            DiGraph(R, loops=true, name="Look at my digraph")
        </input>
    </sage>
    <p>
        If the digraph does not contain a relation from a node to itself, we can omit the <c>loops=true</c> parameter. If we happen to forgot to include the parameter when we need to, Sage will give us a descriptive error message.
    </p>
    <sage>
        <input>
            # Define the set A
            A = Set([2, 3, 4, 6, 8])

            # Define the relation R on A: aRb iff a &lt; b
            R = [(a, b) for a in A for b in A if a &lt; b]
            DiGraph(R)
        </input>
    </sage>
    <aside>
        <title>Real-world Application: Systems Biology</title>
        <p>
            In biology, digraphs help scientists figure out how genes or proteins interact with each other. Imagine each gene as a person and the edges as their interactions—whether they’re helping, hindering, or ignoring each other. This type of mapping is crucial when trying to understand which genes cause certain behaviors or diseases.
        </p>
    </aside>
    <p>
        We can also define the digraph using pair notion for relations.
    </p>
    <sage>
        <input>
            DiGraph([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])
        </input>
    </sage>

    <p>
        Alternatively, we can define the digraph directly. The element on the left of the <c>:</c> is a node. The node relates to the elements in the list on the right of the <c>:</c>.
    </p>
    <sage>
        <input>
            # 1 relates to 2, 3, and 4
            # 2 relates to 3 and 4
            # 3 relates to 4
            DiGraph({1: [2, 3, 4], 2: [3, 4], 3: [4]})
        </input>
    </sage>
</section>