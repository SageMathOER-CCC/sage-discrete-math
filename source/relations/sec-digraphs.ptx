<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="digraphs" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Digraphs</title><idx><h>digraph</h></idx>
    <p>
        A digraph, or directed graph, is a visual representation of a relation <m>R</m> on the set <m>A</m>. Every element in set <m>A</m> is shown as a node (vertex). An arrow from the node <m>a</m> to the node <m>b</m> represents the pair <m>(a,b)</m> on the relation <m>R</m>.
    </p>
    <aside>
        <title>Notes</title>
        <p>
            Digraphs are essential in the modeling of computer networks, where nodes represent computers or routers, and directed edges represent the direction of data flow. This aids in understanding and optimizing network traffic and routing protocols, ensuring efficient and secure communication between devices. Network administrators can use digraphs to visualize and identify bottlenecks or vulnerabilities in the flow of information across the network, which helps in improving overall system performance.
        </p>
    </aside>
    <sage>
        <input>
            # Define the set A
            A = Set([2, 3, 4, 6, 8])

            # Define the relation R on A: aRb iff a divides b
            R = [(a, b) for a in A for b in A if a.divides(b)]

            DiGraph(R, loops=true)
        </input>
    </sage>
    <p>
        We can add a title to the digraph with the <c>name</c> parameter.
    </p>
    <aside>
        <title>Real-world Application: Social Network Analysis</title>
        <p>
            In social network analysis, digraphs are used to represent relationships where direction matters, such as Twitter followers or citations in academic papers. A digraph helps identify influential users in social media platforms by visualizing who follows whom. In the academic world, citation digraphs reveal which research papers are most referenced, indicating key research influences. This helps researchers and analysts determine the impact and importance of users or documents within a network.
        </p>
    </aside>
    <sage>
        <input>
            DiGraph(R, loops=true, name="Look at my digraph")
        </input>
    </sage>
    <p>
        If the digraph does not contain a relation from a node to itself, we can omit the <c>loops=true</c> parameter. If we happen to forgot to include the parameter when we need to, Sage will give us a descriptive error message.
    </p>
    <sage>
        <input>
            # Define the set A
            A = Set([2, 3, 4, 6, 8])

            # Define the relation R on A: aRb iff a &lt; b
            R = [(a, b) for a in A for b in A if a &lt; b]
            DiGraph(R)
        </input>
    </sage>
    <aside>
        <title>Real-world Application: Systems Biology</title>
        <p>
            Directed graphs are crucial in systems biology, where they model regulatory networks. Nodes represent genes or proteins, and directed edges illustrate regulatory influences, such as how one gene activates or represses another. These models are fundamental for decoding complex biological systems and interactions, helping biologists understand genetic pathways, disease mechanisms, and potential therapeutic targets by analyzing how genes or proteins influence each other in biological processes.
        </p>
    </aside>
    <p>
        We can also define the digraph using pair notion for relations.
    </p>
    <sage>
        <input>
            DiGraph([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])
        </input>
    </sage>

    <p>
        Alternatively, we can define the digraph directly. The element on the left of the <c>:</c> is a node. The node relates to the elements in the list on the right of the <c>:</c>.
    </p>
    <sage>
        <input>
            # 1 relates to 2, 3, and 4
            # 2 relates to 3 and 4
            # 3 relates to 4
            DiGraph({1: [2, 3, 4], 2: [3, 4], 3: [4]})
        </input>
    </sage>
</section>