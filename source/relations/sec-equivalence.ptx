<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="equivalence" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Equivalence</title>

    <p>
        A relation on a set is called an <term>equivalence relation</term> if it is reflexive, symmetric, and transitive. The <term>equivalence class</term> of an element <m>a</m> in a set <m>A</m> is the set of all elements in <m>A</m> that are related to <m>a</m> by this relation, denoted by:
    </p>
    <me>
        |a| = \{x \in A \; | \; xRa\}
    </me>
    <p>
        Here, <m>|a|</m> represents the equivalence class of <m>a</m>, comprising all elements in <m>A</m> that are related to <m>a</m> through the relation <m>R</m>. This illustrates the grouping of elements into equivalence classes.
    </p>
    <p>
        Consider a set <m>A</m> defined as:
    </p>
    <me>
        A = \{x \; | \; x \text{ is a person living in a given building} \}
    </me>
    <sage>
        <input>
            # Define the set of people
            A = Set(['p_1', 'p_2', 'p_3', 'p_4', 'p_5', 'p_6', 'p_7', 'p_8', 'p_9', 'p_10'])
            A
        </input>
    </sage>
    <p>
        Create sets for the people living on each floor of the building:
    </p>
    <sage>
        <input>
            import pprint

            # Define the floors as a dictionary, mapping floor names to sets of people
            floors = {
                'first_floor': Set(['p_1', 'p_2', 'p_3', 'p_4']),
                'second_floor': Set(['p_5', 'p_6', 'p_7']),
                'third_floor': Set(['p_8', 'p_9', 'p_10'])
            }

            pprint.pprint(floors)
        </input>
    </sage>

    <p>
        Let <m>R</m> be the relation on <m>A</m> described as follows:
    </p>
    <me>
        \text{x R y iff x and y live in the same floor of the building.}
    </me>
    <sage>
        <input>
            # Define the relation R based on living on the same floor
            R = Set([(x, y) for x in A for y in A if any(x in floors[floor] and y in floors[floor] for floor in floors)])
            R
        </input>
    </sage>
    <p>
        This relation demonstrates the properties of an equivalence relation:
    </p>
    <p>
        <term>Reflexive</term>: A person lives in the same floor as themselves.
    </p>
    <sage>
        <input>
            def is_reflexive_set(A, R):
                reflexive_pairs = Set([(a, a) for a in A])
                return reflexive_pairs.issubset(R)

            is_reflexive_set(A, R)
        </input>
    </sage>

    <p>
        <term>Symmetric</term>: If person <m>a</m> lives in the same floor as person <m>b</m>, then person <m>b</m> lives in the same floor as person <m>a</m>.
    </p>
    <sage>
        <input>
            def is_symmetric_set(relation_R):
                inverse_R = Set([(b, a) for (a, b) in relation_R])
                return relation_R == inverse_R

            is_symmetric_set(R)
        </input>
    </sage>

    <p>
        <term>Transitive</term>: If person <m>a</m> lives in the same floor as person <m>b</m> and person <m>b</m> lives in the same floor as person <m>c</m>, then person <m>a</m> lives in the same floor as person <m>c</m>.
    </p>
    <sage>
        <input>
            G = DiGraph(list(R), loops=true)
            G.is_transitive()
        </input>
    </sage>
    <p>
        For the equivalence class, considering a person <m>a</m> as an example:
    </p>
    <me>
        |a| = \{ x \in A \; | \; xRa \} = \text{all people living on the same floor as person a}
    </me>
    <p>
        This definition confirms that the equivalence class for person <m>a</m> includes all individuals residing on the same floor, effectively grouping the building's residents into equivalence classes based on their floors.
    </p>
</section>