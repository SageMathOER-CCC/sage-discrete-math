<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="equivalence" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Equivalence</title>
    <p>
        A relation is called an <term>equivalence relation</term> if it satisfies three key properties:
    </p>
    <ul>
        <li>
            <p>
                <term>Reflexive</term>
            </p>
            <li>
                <p>
                    a relates to a for all elements a in the set A. All the elements relate to themselves.
                </p>
            </li>
        </li>
        <li>
            <p>
                <term>Symmetric</term>
            </p>
            <li>
                <p>
                    If a relates to b, then b relates to a. The relation is symmetric if the order of the elements does not matter.
                </p>
            </li>
        </li>
        <li>
            <p>
                <term>Transitive</term>
            </p>
            <li>
                <p>
                    If a relates to b and b relates to c, then a relates to c.
                </p>
            </li>
        </li>
    </ul>

    <p>
        The <term>class of equivalence</term> for an element a in set A is defined by the set:
    </p>
    <me>
        |a| = \{x \in A \; | \; xRa\}
    </me>
    <p>
        This set comprises all elements in A that are related to a through the relation R, illustrating how elements are grouped into equivalence classes.
    </p>
    <p>
        Consider set A as defined by the scenario:
    </p>
    <p>
        <me>
            \text{Let A } = \{x \; | \; x \text{ is a person living in a given building} \}
        </me>
    </p>
    <sage>
        <input>
            # Define the set of people
            A = Set(['p_1', 'p_2', 'p_3', 'p_4', 'p_5', 'p_6', 'p_7', 'p_8', 'p_9', 'p_10'])

            # Define the floors as a dictionary, mapping floor names to sets of people
            floors = {
                'first_floor': Set(['p_1', 'p_2', 'p_3', 'p_4']),
                'second_floor': Set(['p_5', 'p_6', 'p_7']),
                'third_floor': Set(['p_8', 'p_9', 'p_10'])
            }

            print("Set of all people:", A)
            print("sets of floors:", floors)
        </input>
    </sage>

    <p>
        In this context, let R be the relation on A described as follows:
    </p>
    <me>
        \text{x R y iff x and y live in the same floor of the building.}
    </me>
    <sage>
        <input>
            # Define the relation R based on living on the same floor
            R = Set([(x, y) for x in A for y in A if any(x in floors[floor] and y in floors[floor] for floor in floors)])
            R
        </input>
    </sage>
    <p>
        This relation demonstrates the properties of an equivalence relation:
    </p>
    <p>
        <ul>
            <li>
                <p>
                    <term>Reflexive</term>: A person lives in the same floor as themselves.
                </p>
            </li>
            <li>
                <p>
                    <term>Symmetric</term>: If person x lives in the same floor as person y, then person y lives in the same floor as person x.
                </p>
            </li>
            <li>
                <p>
                    <term>Transitive</term>: If person x lives in the same floor as person y and person y lives in the same floor as person z, then person x lives in the same floor as person z.
                </p>
            </li>
        </ul>
    </p>
    <sage>
        <input>
            # Implement more optimal runtime for larger sets
            # Function to check reflexivity
            def is_reflexive(set_A, relation):
                return all((a, a) in relation for a in set_A)

            # Function to check symmetry
            def is_symmetric(relation):
                return all((b, a) in relation for a, b in relation)

            # Function to check transitivity
            def is_transitive(relation, set_A):
                return all((a, c) in relation for a in set_A for b in set_A for c in set_A if (a, b) in relation and (b, c) in relation)

            # Display properties of the relation R
            print("Reflexive:", is_reflexive(A, R))
            print("Symmetric:", is_symmetric(R))
            print("Transitive:", is_transitive(R, A))
        </input>
    </sage>
    <p>
        For the class of equivalence, considering person a as an example:
    </p>
    <me>
        | \text{person a} | = \{ x \in A \; | \; x R a \} = \text{all people living on the same floor as person a}
    </me>
    <p>
        This definition shows that the class of equivalence for person a includes all individuals residing on the same floor as a. The relation "living on the same floor as" groups the building's residents into sets, with each set corresponding to a floor, forming an equivalence class.
    </p>
    <sage>
        <input>
            # Function to check if the relation is an equivalence relation
            def check_equivalence_relation(set_A, relation):
                return is_reflexive(set_A, relation) and is_symmetric(relation) and is_transitive(relation, set_A)

            # Check if the relation is an equivalence relation
            print("Is it an equivalence relation?", check_equivalence_relation(A, R))
        </input>
    </sage>
</section>