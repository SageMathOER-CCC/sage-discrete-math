<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="partial-order" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Partial Order</title>
    <idx><h>partial order</h></idx>
    <idx><h>poset</h></idx>
    <p>
        A relation <m>R</m> on a set is a Partial Order (PO) <m>\prec</m> if it satisfies the reflexive, antisymmetric, and transitive properties. A poset is a set with a partial order relation. For example, the following set of numbers with a relation given by divisibility is a poset.
    </p>
    <sage>
        <input>
            A = Set([1, 2, 3, 4, 5, 6, 8])

            R = [(a, b) for a in A for b in A if a.divides(b)]

            D = DiGraph(R, loops=True)

            plot(D)
        </input>
    </sage>

    <idx><h>Hasse diagram</h></idx>
    <p>
        A Hasse diagram is a simplified visual representation of a poset. Unlike a digraph, the relative position of vertices has meaning: if <m>x</m> relates to <m>y</m>,  then the vertex <m>x</m> appears lower in the drawing than the vertex <m>y</m>. Self-loops are assumed and not shown. Similarly, the diagram assumes the transitive property and does not explicitly display the edges that are implied by the transitive property.
    </p>
    <aside>
        <title>Notes</title>
        <p>
            Partial orders and Hasse diagrams help analyze task dependencies in scheduling applications.
        </p>
    </aside>
    <p>
        If <m>R</m> is a partial order relation on <m>A</m>, then the function <c>Poset((A, R))</c> computes the Hasse diagram associated to <m>R</m>.
    </p>
    <sage>
        <input>
            A = Set([1, 2, 3, 4, 5, 6, 8])

            R = [(a, b) for a in A for b in A if a.divides(b)]

            P = Poset((A, R))

            plot(P)
        </input>
    </sage>
    <p>
        Moreover, the <c>cover_relations()</c> function shows the pairs depicted in the Hasse diagram after the previous simplifications.
    </p>
    <sage>
        <input>
            P.cover_relations()
        </input>
    </sage>
    <p>
        The <c>.has_bottom()</c> function tests for a bottom element of a poset.
    </p>
    <sage>
        <input>
            P.has_bottom()
        </input>
    </sage>
    <p>
        The same applies for the <c>.has_top()</c> function but with a top element.
    </p>
    <sage>
        <input>
            P.has_top()
        </input>
    </sage>
    <p>
        The bottom element of a poset, if one exists, can be found with the <c>.bottom()</c> attribute.
    </p>
    <sage>
        <input>
            P.bottom()
        </input>
    </sage>
    <p>
        Similarly, the top element of a poset, if one exists, can be found with the <c>.top()</c> attribute.
    </p>
    <sage>
        <input>
            P.top()
        </input>
    </sage>
    <p>
        Notice that <m>P</m> does not have a top element, causing nothing to be returned by <c>P.top()</c>.
    </p>

</section>
