<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="relations-in-action" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Relations in Action</title>
    <introduction>
        <p>
            Imagine you are responsible for the UX on a website with two distinct features. You must color-code the two features using both a dark-mode and a light-mode. Both schemes must maximize hue contrast while using the brand's colors.
        </p>
        <p>
            Here is the <c>Set</c> of approved colors.
        </p>
        <sage>
            <input>
            C = Set(['paleturquoise', 'maroon', 'teal', 'green',
                'violet', 'firebrick'])
            # Sage has a built in dictionary of colors and we can test to see if our colors are in it 
            print("Colors are in the sage dictionary: " + str(C.issubset(Set(colors))))
            </input>
        </sage>
    </introduction>
    <subsection xml:id="subsec-Color-Complements">
    <title>Color Complements</title>
        <p>
            Complementary colors are two colors, whose hues are <m>180^\circ</m> away from each other on the color wheel. This results in maximized hue contrast.
        </p>  
        <figure xml:id="fig-complements">
            <caption>On RGB displays, red and cyan are complementary colors.</caption>
                <image width="60%" xml:id="complement-wheel"> 
                <shortdescription> RGB color wheel with a line connecting red and cyan</shortdescription>
                <latex-image>
                    \begin{tikzpicture}
                		\shade[shading=color wheel] (0,0) circle (1.5);
            			\draw [fill=white, white](0,0) circle (1);
                        \draw [black, fill = white] (0,-1.25) circle (0.25) node[black] {C}
            			(0,1.25) circle (0.25) node[black] {R};
                        \draw[very thick] (0,1) -- (0,-1);
            		\end{tikzpicture}
                </latex-image>
            </image>
        </figure>
        <p>
            RGB values complicate work with hues so the <c>.hsl()</c> attribute and the hue values it generates will be used to compute which colors are complements. The <c>.hsl()</c> attribute outputs in the format <c>(hue, saturation, lightness)</c> with all values, <m>v</m>, in the range <m>0 \leq v \leq 1</m>, so increments of <m>180^\circ</m>, will be replaced by increments of <c>1/2</c>. 
        </p>
        <p>
            Here is a relation, on <m>C</m>, that maps colors to their complements using the method above.
        </p>
        <sage>
            <input>
                def iscomplement(v, k):
                #Sage allows us to convert floats to rationals to avoid floating point imprecision
                    v_hue = Rational(colors[v].hsl()[0])
                    k_hue = Rational(colors[k].hsl()[0])
                    return v_hue == k_hue + 1/2

                Complements = Set([(c1, c2) for c1 in C for c2 in C
                    if iscomplement(c1, c2)])
                Complements
            </input>
        </sage>
        <p>
            It may appear as if <c>Complements</c> relation is an equivalence relation, but this is not the case; colors do not complement themselves therefore the relation is not reflexive.
        </p>
        </subsection>
        <subsection xml:id="subsec-Dark-Light-Mode">
            <title>Light and Dark Modes</title>
            <introduction>
                <p>
                    A partial order on <c>Complements</c> can be created, as relations are themselves sets, to select which color pairs should be used for the dark-mode and the light-mode. The poset will be created by adding the lightness values of both colors in the pair then ordering the pairs based on the size of the total of the lightness values. This results in the highest total at the top of the poset and the lowest total at the bottom of the poset.
                </p>
            </introduction>
                <sage>
                    <input>
                        def isBrighterPair(v,k):
                            v_brightness = colors[v[0]][2] + colors[v[1]][2]
                            k_brightness = colors[k[0]][2] + colors[k[1]][2]
                            return v_brightness &lt; k_brightness 
                            
                        S_order = Set([(p1,p2) for p1 in Complements for p2 in Complements
                            if isBrighterPair(p1,p2)])
                        S_order
                    </input>
                </sage>
                <p>
                    A Hasse diagram can now be used to visually analyze the poset. 
                </p>
                <sage>
                    <input>
                        P = Poset((list(Complements), list(S_order)))
                        P.plot(vertex_size=17000, figsize=9)
                    </input>
                </sage>
                <p>
                    Alternatively, the <c>.top()</c> and <c>.bottom()</c> attributes can be used to see the top and bottom of the poset if they exist.
                </p>
                <sage>
                    <input>
                        highest_pair = P.top() 
                        lowest_pair = P.bottom() 

                        print("The highest lightness pair is: " + str((highest_pair)))
                        print("The lowest lightness pair is: " + str(lowest_pair))
                    </input>
                </sage>
                <p>
                    Both methods show that teal and maroon are at the bottom while pale turquoise and firebrick are at the top. So pale turquoise and firebrick will be used for light-mode while teal and maroon will be used for dark-mode.
                </p>
                <p>
                    The <c>.html_color()</c> attribute can be used to find the corresponding hex codes for these colors for use in the website's code.
                </p>
                <sage>
                    <input>
                        highest_hex = (colors[highest_pair[0]].html_color(),
                            colors[highest_pair[1]].html_color())
                        lowest_hex = (colors[lowest_pair[0]].html_color(),
                            colors[lowest_pair[1]].html_color())

                        print("Light-mode hex colors are: " + str(highest_hex))
                        print("Dark-mode hex colors are: " + str(lowest_hex))
                    </input>
                </sage>
        </subsection>
</section>
