<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="relations-in-action" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Relations in Action</title>
    <introduction>
        <p>
            Imagine you are shopping for clothing online and want color scheme suggestions for the outfit you are creating. The website you are shopping on has many color options and far too many potential combinations to evaluate on your own. Sage can solve this by narrowing down the options for your preferred color scheme rules.
        </p>
        <p>
            Python's <c>colour</c> package has a dictionary of color values and names that will be used as a stand-in for the color information provided by the website. We will use a dictionary because it allows for us to see outputs as color names as opposed to RGB values.
        </p>
        <sage>
            <input>
                from colour import COLOR_NAME_TO_RGB as Website_Color_Data
                U = {}
                for v, k in Website_Color_Data.items():
                    #The original dictionary's RGB values are on a scale of 0-255 so the must be converted to sage's 0-1 scale
                    U.setdefault((k[0]/255, k[1]/255, k[2]/255), v) <!-- setdefault is used because the original dictionary has repeat entries for words containing 'grey' and 'gray' and this implementation keeps the American spelling only-->  
                print('The dictionary has ' + str(len(U)) + ' entries')
            </input>
        </sage>
        <p>
           The dictionary is very large and it would force sage to calculate many irrelevant pairs in a relation. Personal preferences are necessary to narrow down the set sage works with. 
        </p>
        <p>
           For this example, you will be creating an outfit out of a tee-shirt, over-shirt, and bottoms. Each clothing item will be represented by a set of the colors, as strings, that are available for that clothing item. With this we can now create the set of colors that we want to work with.
        </p>
        <sage>
            <input>
                Tee = Set(['maroon', 'beige', 'azure', 'brown', 'navy', 'olive', 'ivory', 'lavender', 'firebrick', 'sandybrown', 'honeydew'])
                Over = Set(['maroon', 'beige', 'azure', 'beige', 'tan', 'brown', 'navy', 'slateblue', 'khaki', 'ivory', 'lavender', 'firebrick'])
                Bottoms = Set(['maroon', 'beige', 'azure', 'tan', 'brown', 'navy', 'olive', 'khaki', 'ivory', 'lavender', 'firebrick', 'honeydew'])
                C = Tee | Over | Bottoms 
                show(C)
            </input>
        </sage>
    </introduction>
    <subsection xml:id="subsec-Color-Complements">
    <title>Color Complements</title>
        <p>
            Complementary colors are two colors, who's hues are <m>180^\circ</m> away from each other on the color wheel. RGB values do not let us compare hues easily so we will use the <c>rgb2hsl</c> command, from the <c>colour</c> package, and the hue values it generates to compute which colors are complements. The <c>rgb2hsl</c> command outputs in the format <c>(hue, saturation, lightness)</c> with all values, <m>v</m>, in the range <m>0 \leq v \leq 1</m>, so instead of checking for complements with increments of <m>180^\circ</m>, we will use increments of <c>0.5</c>.
        </p>  
        <figure xml:id="fig-complements">
            <caption>Cyan and red are complementary colors.</caption>
                <image width="100%" xml:id="complement-wheel"> 
                <shortdescription> RGB color wheel with a line connecting red and cyan</shortdescription>
                <latex-image>
                    \begin{tikzpicture}
                		\shade[shading=color wheel]  (0,0) circle (1.5);
            			\draw [fill=white, white](0,0) circle (1);
			            \draw [black, fill = white] (0,-1.25) circle (0.25) node[black] {C}
            			(0,1.25) circle (0.25) node[black] {R};
			            \draw[very thick] (0,1) -- (0,-1);
            		\end{tikzpicture}
                </latex-image>
            </image>
        </figure>
        <p>
            Here is a relation, on <m>C</m>, that maps colors to their complements.
        </p>
        <sage>
            <input>
                from colour import rgb2hsl
                from math import isclose
                # To account for rounding and floating point errors isclose will be used instead of ==

                def iscomplement(v, k)
                # The color wheel loops around on itself meaning we need to check for complements even when hue + 0.5 > 1
                    return isclose(rgb2hsl(v)[0], (rgb2hsl(k)[0] + 0.5) - floor(rgb2hsl(k)[0] + 0.5), abs_tol=1e-8) <!-- Can't use '% 1' because floating point errors cause negative outputs with blue hues causing false negatives-->

                Complement = Set([(U[a],U[b]) for a in U for b in U if iscomplement(a, b) and U[a] in C and U[b] in C])
                list(Complement) <!-- Lists are called because pprint.pprint() does not organize the output of sage sets -->
            </input>  
        </sage>
        <p>
            It may appear as if the <c>Complement</c> relation can be categorized as an equivalence relation, but this is not the case; colors do not complement themselves therefore the relation is not reflexive.
        </p>
        <subsubsection xml:id="subsubsec-Complementary-Outfits">
        <title>Complementary Outfits</title>
            <introduction>
                <p>
                    If you wanted the over-shirt and bottoms to match, you could have your outfit consist of two complementary colors. The colors available for the over-shirt are different from the colors available for the bottoms, so a new set of both clothing items' colors must be made.
                </p>
            </introduction>    
                <sage>
                    <input>
                        over_bottom = Over &amp; Bottoms
                        show(over_bottom)
                    </input>
                </sage>
                <p>
                   The <c>Complement</c> relation does not describe all complementary outfits with the given restraints. This can be fixed by intersecting the relation with <c>over_bottom</c><m>\times</m><c>Tee</c> because this imparts the restraints of complements and website inventory.
                </p>
                <sage>
                    <input>
                       C_outfits = Set(cartesian_product([over_bottom, Tee])) &amp; Complement
                       list(C_outfits)
                    </input>
                </sage>
            </subsubsection>
        </subsection>
        <subsection xml:id="subsec-Triadic-Schemes">
            <title>Triadic Schemes</title>
            <introduction>
                <p>
                    If you want each component of your outfit to be of a differ color, you can use a triadic color scheme. Triadic color schemes consist of three different colors, where each color is <m>120^\circ</m> or <m>240^\circ</m> away on the color wheel.
                </p>  
                <figure xml:id="fig-triadic">
                    <caption>Red, green, and blue form a triadic color scheme</caption>
                        <image width="100%" xml:id="triadic-wheel"> 
                        <shortdescription> RGB color wheel with a triangle connecting red, green, and blue.</shortdescription>
                        <latex-image>
                            \begin{tikzpicture} [xrange=-1.5:1.5,yrange=-1.5:1.5] 
                        		\shade[shading=color wheel]  (0,0) circle (1.5);
                    			\draw [fill=white, white](0,0) circle (1);
                    			\draw[very thick] (1.0825,-0.625) -- (0,1.25) -- (-1.0825,-0.625) -- cycle;
                    			\draw [black, fill = white] (0,1.25) circle (0.25) node[black] {R}
                    			(-1.0825,-0.625) circle (0.25) node[black] {B}
                    			(1.0825,-0.625) circle (0.25) node[black] {G};
                    		\end{tikzpicture}
                        </latex-image>
                    </image>
                </figure> 
            </introduction>
            <p>
                Here is a relation that maps a color to the colors with the hue <m>120^\circ</m> to its right. 
            </p>
            <sage>
                <input>
                    def is120(v,k):
                        return isclose(rgb2hsl(v)[0], (rgb2hsl(k)[0] + 1/3) - floor(rgb2hsl(k)[0] + 1/3), abs_tol=1e-8)

                    T_120 = Set([(U[a], U[b]) for a in U for b in U if is120(a,b) and U[a] in C and U[b] in C])
                    list(T_120)
                </input>
            </sage>
            <p>
               Composing this relation with itself causes it will map one color to other colors with hues <m>120^\circ</m> away on the color wheel. This may miss some color pairs, in C, but these pairs lack a third color and thus do not constitute a triadic scheme. These pairs are therefore omitted. 
            </p>
            <sage>
                <input>
                    T_240 = Set([(t1[0], t2[1]) for t1 in T_120 for t2 in T_120 if t1[1] == t2[0]])
                    list(T_240)
                </input>
            </sage>
            <subsubsection xml:id="subsubsec-triadic-outfits">
                <title>Triadic Outfits</title>
                <p>
                    With triadic outfits we can not intersect (or union for that matter) two sets of clothes because all pieces of clothing should be in different colors. We can still combine two sets in order to streamline the creation of relations by remembering that a relation is itself a set, and therefore we can create a relation from a set onto a relation. 
                </p>
                <sage>
                    <input>
                        Triads = Set([(c, t) for c in C for t in T_240 if ((c, t[0]) in T_120 or (c, t[1]) in T_120) and not (c in t)])
                        list(Triads)
                    </input>
                </sage>
                <p>
                    Now that you have a relation that describes all triadic schemes in <m>C</m>, you need to now narrow it down to the color combinations allowed by the website's stock. 
                </p>
                <sage>
                    <input>
                        All_Outfits = Set(cartesian_product([Over, cartesian_product([Tee, Bottoms])]))
                        T_Outfits = All_Outfits &amp; Triads
                        list(T_Outfits)
                    </input>
                </sage>
            </subsubsection>
        </subsection>
</section>
