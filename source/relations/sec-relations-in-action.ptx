<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="relations-in-action" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Relations in Action</title>
    <introduction>
        <p>
            A website of a certain brand is to be designed using a 2-color scheme. These colors should be chosen from the brand's color palette, with the constraint that the two colors should be complementary. We need to design two versions of the website, one for light mode and another for dark mode. Let's decide what two colors we should use for each of the modes.
        </p>
        <p>
            Here is the <c>Set</c> of the brand's color palette.
        </p>
        <sage>
            <input>
            C = Set(['paleturquoise', 'maroon', 'teal', 'green',
                'violet', 'lightcoral'])
            C
            </input>
        </sage>
        <p>
            Using <c>.show()</c> we can display the colors in <m>C</m>.
        </p>
        <sage>
            <input>
            for c in C:
                print(c)
                circle((0,0),1, color=c, fill=true).show(figsize=[0.5,0.5], axes=False)
            </input>
        </sage>
        <p>
            We can then check if all of these color names are in Sage's <c>colors</c> dictionary.
        </p>
        <sage>
            <input>
            C.issubset(Set(colors))
            </input>
        </sage>
        <p>
            First we will find all pairs of complementary colors in the set <m>C</m> and then we will decide which one is the lightest pair to use in the dark mode, and which one is the darkest pair to use in the light mode.
        </p>
    </introduction>
    <subsection xml:id="subsec-Color-Complements">
    <title>Color Complements</title>
        <p>
            Complementary colors are pairs of colors whose hues are located directly opposite each other on the color wheel. For this example, we will consider the RGB (Red, Green, Blue) color wheel used in screen displays.
        </p>  
        <figure xml:id="fig-complements">
            <caption>On RGB displays, red and cyan are complementary colors.</caption>
                <image width="40%" xml:id="complement-wheel">
                <shortdescription> RGB color wheel with a line connecting red and cyan</shortdescription>
                <latex-image>
                    \begin{tikzpicture}
                		\shade[shading=color wheel] (0,0) circle (1.5);
            			\draw [fill=white, white](0,0) circle (1);
                        \draw [black, fill = white] (0,-1.25) circle (0.25) node[black] {C}
            			(0,1.25) circle (0.25) node[black] {R};
                        \draw[very thick] (0,1) -- (0,-1);
            		\end{tikzpicture}
                </latex-image>
            </image>
        </figure>
        <p>
            Colors in the Sage RGB system are defined as tuples <c>(r,g,b)</c> where each component lies in the interval <m>[0,1]</m>. For example:
        </p>
        <sage>
            <input>
                colors['violet']
            </input>
        </sage>
        <p>
            The Hue-Saturation-Lightness (HSL) system provides an alternate representation <c>(h,s,l)</c> of a color where the coordinates also lie in the interval <m>[0,1]</m>.
        </p>
        <p>
            We can obtain a color's hue is by using the <c>.hsl()</c> method. 
        </p>
        <sage>
            <input>
                HSL = colors['violet'].hsl()
                HSL
            </input>
        </sage>
        <p>
            The hue value is the first entry in the tuple meaning the hue is at index <c>0</c>.
        </p>
        <sage>
            <input>
                v_hue = colors['violet'].hsl()[0]
                v_hue
            </input>
        </sage>
        <p>
            The <c>float</c> class can cause issues when comparing values. For example, consider the complementary colors violet and green.
        </p>
        <sage>
            <input>
                g_hue = colors['green'].hsl()[0]
                print(v_hue)
                print(g_hue)
                print('Is complementary pair:', v_hue == g_hue + 0.5)
            </input>
        </sage>
        <p>
            The imprecision caused by the <c>float</c> class caused a false negative when testing to see if two colors were complementary. This can be avoided by converting the hue values to Sage's <c>rational</c> class.
        </p>
        <sage>
            <input>
                g_hue = Rational(colors['green'].hsl()[0])
                v_hue = Rational(colors['violet'].hsl()[0])
                print(v_hue)
                print(g_hue)
                print('Is complementary pair:', v_hue == g_hue + 1/2)
            </input>
        </sage>
        <p>
            Now we define a function in Sage to describe the following relation: a color <c>c1</c> is related to a color <c>c2</c> if and only if the hues of <c>c1</c> and <c>c2</c> are complementary, where the test for complementation is the method used above.
        </p>
        <sage>
            <input>
                def iscomplement(m, k):
                    m_hue = Rational(colors[m].hsl()[0])
                    k_hue = Rational(colors[k].hsl()[0])
                    return m_hue == k_hue + 1/2

                Comp = [(c1, c2) for c1 in C for c2 in C
                    if iscomplement(c1, c2)]
                Comp
            </input>
        </sage>
        </subsection>
        <subsection xml:id="subsec-Dark-Light-Mode">
            <title>Light and Dark Modes</title>
            <introduction>
                <p>
                    Now that we know what pairs are complements, we will create a partial order on <c>Comp</c> to help select a color pair for the light-mode and a color pair for the dark-mode. The poset will be created by adding the lightness values of both colors in the pair then ordering the pairs based on the size of the total lightness value. This results in the highest lightness at the top of the poset and the lowest lightness at the bottom of the poset.
                </p>
            </introduction>
            <p>
                The lightness value is the third value in the tuple created by <c>.hsl()</c> meaning it is indexed at <c>2</c>.
            </p>
            <sage>
                <input>
                    v_light = colors['violet'].hsl()[2]
                    v_light
                </input>
            </sage>
            <p>
                We will now compare the lightness between two complementary pairs to create the light mode and the dark mode. This can be done by adding the lightness value of each color in the pair before comparing them. For example, let's calculate the total lightness of the pair (violet, green):
            </p>
            <sage>
                <input>
                    vg = ('violet', 'green')
                    v_light = colors[vg[0]].hsl()[2]
                    g_light = colors[vg[1]].hsl()[2]
                    vg_total = v_light + g_light
                    vg_total
                </input>
            </sage>
            <p>
                Using the previous calculation for total lightness of the pair, we define a partial order relation on <c>Comp</c> as follows: <c>p1</c> relates to <c>p2</c> if and only if the total lightness of <c>p1</c> is less than the total of <c>p2</c>. Let's define a function in Sage to build this relation.
            </p>
            <sage>
                <input>
                    def isBrighterPair(m, k):
                        m_total = colors[m[0]].hsl()[2] + colors[m[1]].hsl()[2]
                        k_total = colors[k[0]].hsl()[2] + colors[k[1]].hsl()[2]
                        return m_total &lt; k_total 
                        
                    L = [(p1,p2) for p1 in Comp for p2 in Comp
                        if isBrighterPair(p1,p2)]
                    L
                </input>
            </sage>
            <p>
                Recall, <c>L</c> is a relation on <c>Comp</c>, therefore it orders our complementary pairs. For example, the pair of violet and green have a lower total lightness than pale-turquoise and maroon.
            </p>
            <p>
                A Hasse diagram can now be used to visually analyze the poset.
            </p>
            <sage>
                <input>
                    P = Poset((Comp, L))
                    P.plot(vertex_size=0, figsize=7)
                </input>
            </sage>
            <p>
                The <c>.top()</c> and <c>.bottom()</c> methods can be used to assign the brightest and darkest pairs to variables.
            </p>
            <sage>
                <input>
                    highest_pair = P.top() 
                    lowest_pair = P.bottom() 

                    print('The highest lightness pair is:', highest_pair)
                    print('The lowest lightness pair is:', lowest_pair)
                </input>
            </sage>

            <p>
                Teal and maroon will be used for light-mode because they are the darkest, while pale-turquoise and light-coral will be used for dark-mode because they are the lightest.
            </p>
            <p>
                The <c>.html_color()</c> method can be used to find these colors corresponding hex codes for use in the website's code.
            </p>
            <sage>
                <input>
                    highest_hex = (colors[highest_pair[0]].html_color(),
                        colors[highest_pair[1]].html_color())
                    lowest_hex = (colors[lowest_pair[0]].html_color(),
                        colors[lowest_pair[1]].html_color())

                    print('Dark-mode hex codes are:', highest_hex)
                    (circle((0,0),1, color=highest_pair[0], fill=true) + circle((2.5,0),1, color=highest_pair[1], fill=true)).show(figsize=[3.5,1], axes=False)
                    print('Light-mode hex codes are:', lowest_hex)
                    (circle((0,0),1, color=lowest_pair[0], fill=true) + circle((2.5,0),1, color=lowest_pair[1], fill=true)).show(figsize=[3.5,1], axes=False)
                </input>
            </sage>
        </subsection>
</section>
