<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="relations-in-action" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Relations in Action</title>
    <introduction>
        <p>
            A website of a certain brand is to be designed using a 2-color scheme. These colors should be chosen from the brand's color palette, with the constraint that the two colors should be complementary. We need to design two versions of the website, one for light mode and another for dark mode.
        </p>
        <p>
            Here is the <c>Set</c> of the brand's color palette.
        </p>
        <sage>
            <input>
            C = Set(['paleturquoise', 'maroon', 'teal', 'green',
                'violet', 'firebrick'])
            C
            </input>
        </sage>
        <p>
            Using <c>.show()</c> we can see the colors themselves.
        </p>
        <sage>
            <input>
            for c in C:
                print(c)
                circle((0,0),1, color=c, fill=true).show(figsize=[0.5,0.5], axes=False)
            </input>
        </sage>
        <p>
            We can then check if all of these color names are in Sage's <c>colors</c> dictionary.
        </p>
        <sage>
            <input>
            C.issubset(Set(colors))
            </input>
        </sage>
        <p>
            RGB values are tuples in the format <c>(red, green, blue)</c>, and in sage each entry is a <c>float</c> in the interval <m>[0,1]</m>. <c>colors</c> will return the RGB value of a color when the color's name is input.
        </p>
        <sage>
            <input>
                colors['violet']
            </input>
        </sage>
    </introduction>
    <subsection xml:id="subsec-Color-Complements">
    <title>Color Complements</title>
        <p>
            Complementary colors are two colors whose hues are on opposite sides of the color wheel.
        </p>  
        <figure xml:id="fig-complements">
            <caption>On RGB displays, red and cyan are complementary colors.</caption>
                <image width="40%" xml:id="complement-wheel">
                <shortdescription> RGB color wheel with a line connecting red and cyan</shortdescription>
                <latex-image>
                    \begin{tikzpicture}
                		\shade[shading=color wheel] (0,0) circle (1.5);
            			\draw [fill=white, white](0,0) circle (1);
                        \draw [black, fill = white] (0,-1.25) circle (0.25) node[black] {C}
            			(0,1.25) circle (0.25) node[black] {R};
                        \draw[very thick] (0,1) -- (0,-1);
            		\end{tikzpicture}
                </latex-image>
            </image>
        </figure>
        <p>
            We can obtain a color's hue is by using the <c>.hsl()</c> attribute. The <c>.hsl()</c> attribute outputs in the format <c>(hue, saturation, lightness)</c> with all values being a <c>float</c> in the interval <m>[0,1]</m>. This interval causes colors to be complementary if and only if their hues differ by <m>\frac{1}{2}</m>.
        </p>
        <sage>
            <input>
                v_HSL = colors['violet'].hsl()
                v_HSL
            </input>
        </sage>
        <p>
            The hue value is the first entry in the tuple meaning the hue is at index <c>0</c>.
        </p>
        <sage>
            <input>
                v_hue = colors['violet'].hsl()[0]
                v_hue
            </input>
        </sage>
        <p>
            The <c>float</c> type can cause issues when comparing values. For example, consider the complementary colors violet and green.
        </p>
        <sage>
            <input>
                g_hue = colors['green'].hsl()[0]
                print(v_hue)
                print(g_hue)
                print('Is complementary pair:', v_hue == g_hue + 0.5)
            </input>
        </sage>
        <p>
            The imprecision caused by the <c>float</c> type caused a false negative when testing to see if two colors were complements. This can be avoided by converting the hue values to Sage's <c>rational</c> type.
        </p>
        <sage>
            <input>
                g_hue = Rational(colors['green'].hsl()[0])
                v_hue = Rational(colors['violet'].hsl()[0])
                print(v_hue)
                print(g_hue)
                print('Is complementary pair:', v_hue == g_hue + 1/2)
            </input>
        </sage>
        <p>
            Here is a relation, on <m>C</m>, defined as follows: a color <c>c1</c> is related to a color <c>c2</c> if and only if the hues of <c>c1</c> and <c>c2</c> are complementary, where the test for complementation is the method used above.
        </p>
        <sage>
            <input>
                def iscomplement(m, k):
                    m_hue = Rational(colors[m].hsl()[0])
                    k_hue = Rational(colors[k].hsl()[0])
                    return m_hue == k_hue + 1/2

                Comp = [(c1, c2) for c1 in C for c2 in C
                    if iscomplement(c1, c2)]
                Comp
            </input>
        </sage>
        </subsection>
        <subsection xml:id="subsec-Dark-Light-Mode">
            <title>Light and Dark Modes</title>
            <introduction>
                <p>
                    Now that we know what pairs are complements, we will create a partial order on <c>Comp</c> to help select a color pair for the light-mode and a color pair for the dark-mode. This partial order will be defined by comparing the lightness values of the pairs in <c>Comp</c>.
                </p>
            </introduction>
            <p>
                The lightness value is the third value in the tuple created by <c>.hsl()</c> meaning it is indexed at <c>2</c>.
            </p>
            <sage>
                <input>
                    v_light = colors['violet'].hsl()[2]
                    v_light
                </input>
            </sage>
            <p>
                We will now compare the lightness between two complementary pairs to create the light mode and the dark mode. This can be done by adding the lightness value of each color in the pair before comparing them.
            </p>
            <sage>
                <input>
                    vg = ('violet', 'green')
                    v_light = colors[vg[0]].hsl()[2]
                    g_light = colors[vg[1]].hsl()[2]
                    vg_total = v_light + g_light
                    vg_total
                </input>
            </sage>
            <p>
                Using this calculation for total lightness, a partial order on <c>Comp</c> can be created. We define this relation as follows: <c>p1</c> relates to <c>p2</c> if and only if the total lightness of <c>p1</c> is less than the total of <c>p2</c>.
            </p>
            <sage>
                <input>
                    def isBrighterPair(m, k):
                        m_total = colors[m[0]].hsl()[2] + colors[m[1]].hsl()[2]
                        k_total = colors[k[0]].hsl()[2] + colors[k[1]].hsl()[2]
                        return m_total &lt; k_total 
                        
                    L_order = [(p1,p2) for p1 in Comp for p2 in Comp
                        if isBrighterPair(p1,p2)]
                    L_order
                </input>
            </sage>
            <p>
                Recall, <c>L_order</c> is a relation on <c>Comp</c>, therefore it orders our complementary pairs. For example, the pair of teal and firebrick have a lower total lightness than violet and green.
            </p>
            <p>
                The <c>.top()</c> and <c>.bottom()</c> attributes can be used to find the brightest and darkest pairs.
            </p>
            <sage>
                <input>
                    P = Poset((Comp, L_order))
                    highest_pair = P.top() 
                    lowest_pair = P.bottom() 

                    print('The highest lightness pair is:', highest_pair)
                    print('The lowest lightness pair is:', lowest_pair)
                </input>
            </sage>
            <p>
                Teal and maroon will be used for light-mode because they are the darkest, while pale-turquoise and firebrick will be used for dark-mode because they are the lightest.
            </p>
            <p>
                The <c>.html_color()</c> attribute can be used to find these colors' corresponding hex codes for use in the website's code.
            </p>
            <sage>
                <input>
                    highest_hex = (colors[highest_pair[0]].html_color(),
                        colors[highest_pair[1]].html_color())
                    lowest_hex = (colors[lowest_pair[0]].html_color(),
                        colors[lowest_pair[1]].html_color())

                    print('Dark-mode hex codes are:', highest_hex)
                    (circle((0,0),1, color=highest_pair[0], fill=true) + circle((2.5,0),1, color=highest_pair[1], fill=true)).show(figsize=[3.5,1], axes=False)
                    print('Light-mode hex codes are:', lowest_hex)
                    (circle((0,0),1, color=lowest_pair[0], fill=true) + circle((2.5,0),1, color=lowest_pair[1], fill=true)).show(figsize=[3.5,1], axes=False)
                </input>
            </sage>
        </subsection>
</section>
