<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="relations-in-action" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Relations in Action</title>
    <introduction>
        <p>
            Imagine you have been contracted to update a piece of commercial software by implementing a new messaging system for customers and updating one for employees. The contractor has required you to use brand complaint colors to represent all messages and that your color choices maximize hue contrast to make messages easily identifiable.
        </p>
        <p>
            Here is the <c>Set</c> of approved colors.
        </p>
        <sage>
            <input>
            C = Set(['brown', 'olive', 'darkcyan', 'green', 'violet', 'navy'])
            # Sage has a built in dictionary of colors we can use to analyze our colors and we can test to see if our colors are accounted for
            C.issubset(Set(colors))
            </input>
        </sage>
        <p>
            <dl> 
                <li><title>Customer System</title>
                    <p>
                        The contractor requested two new message types that can be represented by two different color schemes, one for a dark-mode and the other for a light-mode. These will be created with a complementary color scheme.
                    </p>
                </li>
                <li><title>Employee System</title>
                    <p>
                        The contractor requested a single color scheme that maintains the color maroon for the preexisting message type while adding two additional message types. These will be created with a triadic color scheme.
                    </p>
                </li>
            </dl>
        </p>
    </introduction>
    <subsection xml:id="subsec-Color-Complements">
    <title>Color Complements</title>
        <p>
            Complementary colors are two colors, who's hues are <m>180^\circ</m> away from each other on the color wheel. This results in maximally contrasting hues.
        </p>  
        <figure xml:id="fig-complements">
            <caption>Cyan and red are complementary colors (on RGB displays).</caption>
                <image width="100%" xml:id="complement-wheel"> 
                <shortdescription> RGB color wheel with a line connecting red and cyan</shortdescription>
                <latex-image>
                    \begin{tikzpicture}
                		\shade[shading=color wheel]  (0,0) circle (1.5);
            			\draw [fill=white, white](0,0) circle (1);
			            \draw [black, fill = white] (0,-1.25) circle (0.25) node[black] {C}
            			(0,1.25) circle (0.25) node[black] {R};
			            \draw[very thick] (0,1) -- (0,-1);
            		\end{tikzpicture}
                </latex-image>
            </image>
        </figure>
        <p>
            RGB values do not let us compare hues easily so we will use the <c>.hsl()</c> attribute and the hue values it generates to compute which colors are complements. The <c>.hsl()</c> attribute outputs in the format <c>(hue, saturation, lightness)</c> with all values, <m>v</m>, in the range <m>0 \leq v \leq 1</m>, so instead of checking for complements with increments of <m>180^\circ</m>, we will use increments of <c>1/2</c>. 
        </p>
        <p>
            Here is a relation, on <m>C</m>, that maps colors to their complements using this method.
        </p>
        <sage>
            <input>
                from math import isclose
                # To account for floating point errors isclose will be used instead of ==
                def iscomplement(v, k):
                    return isclose(colors[v].hsl()[0], (colors[k].hsl()[0] + 1/2) , abs_tol=1e-8)

                Complement = Set([(c1, c2) for c1 in C for c2 in C if iscomplement(c1, c2)])
                Complement
            </input>  
        </sage>
        <p>
            It may appear as if the <c>Complement</c> relation can be categorized as an equivalence relation, but this is not the case; colors do not complement themselves therefore the relation is not reflexive.
        </p>
        <subsubsection xml:id="subsubsec-customer-colors">
        <title>Customer Colors</title>
            <introduction>
                <p>
                    A partial order on <c>Complement</c> can be created, as relations are themselves sets, to select which color pairs should be used for light-mode and dark-mode. This will be done by adding the lightness values (obtained using the <c>.hsl()</c> attribute) of a given pair's elements and mapping the pairs with the smaller values to the pairs with the larger values. 
                </p>
            </introduction>
                <sage>
                    <input>
                        def isbrighterpair(v,k):
                            return colors[v[0]][2] + colors[v[1]][2] &lt;= colors[k[0]][2] + colors[k[1]][2]
                            
                        light_order = Set([(p1,p2) for p1 in Complement for p2 in Complement if isbrighterpair(p1,p2)])
                        light_order
                    </input>
                </sage>
                <p>
                    A Hasse diagram can now be used to visually analyze the poset.
                </p>
                <sage>
                    <input>
                        P = Poset((list(Complement), list(light_order)))
                        P.plot(vertex_size=9000, figsize=7)
                    </input>
                </sage>
                <p>
                    This Hasse diagram shows that green and violet form the brightest complementary combination so they are best fit for light-mode. Olive and navy form the darkest combination they will fit best for dark-mode.
                </p>
            </subsubsection>
        </subsection>
        <subsection xml:id="subsec-Triadic-Schemes">
            <title>Triadic Schemes</title>
            <introduction>
                <p>
                    Hue contrast can still be maximized with the three color requirement, for the employee software, by using a triadic color scheme. Triadic color schemes consist of three different colors, where each color is <m>120^\circ</m> or <m>240^\circ</m> away on the color wheel.
                </p>  
                <figure xml:id="fig-triadic">
                    <caption>Red, green, and blue form a triadic color scheme (on RGB displays).</caption>
                        <image width="100%" xml:id="triadic-wheel"> 
                        <shortdescription> RGB color wheel with a triangle connecting red, green, and blue.</shortdescription>
                        <latex-image>
                            \begin{tikzpicture} [xrange=-1.5:1.5,yrange=-1.5:1.5] 
                        		\shade[shading=color wheel]  (0,0) circle (1.5);
                    			\draw [fill=white, white](0,0) circle (1);
                    			\draw[very thick] (1.0825,-0.625) -- (0,1.25) -- (-1.0825,-0.625) -- cycle;
                    			\draw [black, fill = white] (0,1.25) circle (0.25) node[black] {R}
                    			(-1.0825,-0.625) circle (0.25) node[black] {B}
                    			(1.0825,-0.625) circle (0.25) node[black] {G};
                    		\end{tikzpicture}
                        </latex-image>
                    </image>
                </figure> 
                <p>
                    Instead of creating a single relation on <m>C</m> for the employee messages, two relations will be made one from the set containing maroon, set <m>M</m>, to <m>C</m> and the other from <m>C</m> to <m>M</m>. This is done because relations output pairs while triadic schemes require three colors.
                </p>
            </introduction>
            <subsubsection xml:id="subsubsec-employee-colors">
                <title>Employee Colors</title>
            <p>
                Here is a relation that maps maroon to the colors with the hue <m>120^\circ</m> to its right. 
            </p>
            <sage>
                <input>
                    def is120(v,k):
                        return isclose(colors[v].hsl()[0], ((colors[k].hsl()[0] + 1/3) % 1), abs_tol=1e-8)
                    
                    M = Set(['maroon'])
                    M_r120 = Set([(m, c) for c in C for m in M if is120(m, c)])
                    M_r120.list()
                </input>
            </sage>
            <p>
                Here is a relation that maps colors to maroon if they are <m>240^\circ</m> to its right. 
            </p>
            <sage>
                <input>
                    def is240(v,k):
                        return isclose(colors[v].hsl()[0], ((colors[k].hsl()[0] + 2/3) % 1), abs_tol=1e-8)

                    r240_M = Set([(c, m) for c in C for m in M if is240(m, c)])
                    r240_M.list()
                </input>
            </sage>
            <p>
                If these two relations are composed, the resulting relation describes all pairs of colors which satisfy the contractor's requests because they describe colors that form triadic schemes with maroon.
            </p>
            <sage>
                <input>
                    Employee = Set([(p1[0],p2[1]) for p1 in r240_M for p2 in M_r120 if p1[1] == p2[0]])
                    Employee
                </input>
            </sage>
            </subsubsection>
        </subsection>
</section>
