<section xml:id="sec-plot-options" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Plot Options</title>

    <p>
        Visualizing graphs in Sage not only provides insights into the structure and properties of the graph but also offers flexibility through customization options. These options include adjusting colors, edge thickness, vertex size, and more, allowing for clearer representation and better understanding of complex graphs. This subsection will guide you through various customization techniques for graph visualization in Sage.
    </p>
    <p>
        To begin with, you can customize the color of vertices and edges. This is particularly useful for highlighting specific parts of a graph, such as a path or a subgraph.
    </p>
    <p>
        Here is an example of how to set different colors for vertices and edges:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            G.plot(vertex_color='blue', edge_color='red')
        </input>
        <output>
            # A graphical representation of the graph with blue vertices and red edges.
        </output>
    </sage>
    
    <p>
        Adjusting the thickness of edges can also enhance the visualization, especially for weighted graphs or to emphasize certain edges over others.
    </p>
    <p>
        To modify the edge thickness:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            # above from previous code  
            G.plot(edge_thickness=2.5)  # Adjusts the thickness of all edges
        </input>
        <output>
            # A graphical representation of the graph with thicker edges.
        </output>
    </sage>
    <p>
        The <c>edge_thickness</c> parameter allows you to specify the thickness of the edges in the plot.
    </p>
    <p>
        Another useful customization is adjusting the size of the vertices, which can be helpful when dealing with graphs that have a large number of vertices or when you want to fit certain texts inside of the vertices.
    </p>
    <p>
        To change the size of vertices:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            # above from previous code  
            G.plot(vertex_size=2000)  # Adjusts the size of all vertices
        </input>
        <output>
            # A graphical representation of the graph with larger vertices.
        </output>
    </sage>

    <p>
      While customizing labels, Sage allows you to enable or disable labels for both vertices and edges, providing clarity and additional context to the graph. However, note that setting specific colors for edge labels directly through the <c>plot</c> method is not supported.
  </p>
  <p>
      To customize labels and enable them for vertices and edges:
  </p>
  <sage>
      <input>
          G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
          # above from previous code  
          G.plot(vertex_labels=True, edge_labels=True)
      </input>
      <output>
          # A graphical representation of the graph with vertex and edge labels enabled.
      </output>
  </sage>


  <p>
    Layouts in Sage determine how vertices are positioned on the plane. Various layout algorithms can provide different perspectives of the graph's structure.
</p>
<p>
    To apply a Graphviz layout to the graph for a more natural look:
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        # Use the Graphviz layout with the 'twopi' program for a more natural look
        G.plot(layout='graphviz', prog='twopi')
    </input>
    <output>
        # A graphical representation of the graph using the Graphviz 'twopi' layout.
    </output>
</sage>
<p>
    In Sage, the <c>layout</c> option in the <c>plot</c> method is used to select the algorithm that determines the positioning of the graph's vertices. When set to <c>graphviz</c>, Sage uses the Graphviz library's sophisticated layout algorithms. The <c>prog</c> parameter within <c>layout</c> specifies which Graphviz layout engine to use. Different layout engines are optimized for different types of graphs and visual preferences.
</p>
<p>
    The <c>'dot'</c> engine is used for directed graphs, <c>'neato'</c> for undirected graphs with a more natural layout, <c>'fdp'</c> and <c>'sfdp'</c> for force-directed layouts of large graphs, <c>'twopi'</c> for radial layouts, and <c>'circo'</c> for circular layouts. These various engines help highlight different aspects of the graph's structure, from hierarchical relationships with <c>'dot'</c> to symmetrical patterns with <c>'circo'</c>.
</p>
<p>
    Beyond Graphviz layouts, SageMath offers native layout algorithms that are versatile for various graph types. For instance, the <c>circular</c> layout positions vertices in a circle, emphasizing symmetry and connectivity.
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        # above from previous code
        G.plot(layout='circular')
    </input>
    <output>
        # Visualizes the graph with a circular layout.
    </output>
</sage>
<p>
    The <c>planar</c> layout is applied to graphs that can be drawn without edge crossings, illustrating planarity.
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        # above from previous code
        G.plot(layout='planar')
    </input>
    <output>
        # Displays the graph with a planar layout, if possible.
    </output>
</sage>

  <p>
      Changing the shape of the vertices can be useful for differentiating types of vertices or just for aesthetic purposes.
  </p>
  <p>
      To set the vertex shape to a square:
  </p>
  <sage>
      <input>
          G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
          # above from previous code
          G.plot(vertex_shape='s')  # Changes the shape of vertices to squares
      </input>
      <output>
          # A graphical representation of the graph with square-shaped vertices.
      </output>
  </sage>

  <p>
      Customizing the style of the edges can help in distinguishing different types of relationships or interactions between vertices.
  </p>
  <p>
      To change the edge style to dashed lines:
  </p>
  <sage>
      <input>
          G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
          # above from previous code
          G.plot(edge_style='dashed')  # Changes the edges to dashed lines
      </input>
      <output>
          # A graphical representation of the graph with dashed edges.
      </output>
  </sage>

  <p>
    Below is an example how to apply multiple options to a plot:
  </p>
  <sage>
    <input>
        # Creating the graph with its edges
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        
        # Applying multiple plot options:
        # 'graphviz' layout with 'twopi' program for radial layout
        # Blue vertices and red edges for color differentiation
        # Edge thickness set to 2.5 for better visibility
        # Vertex size increased to 2000 for emphasis
        # Vertex labels and edge labels enabled for clarity
        # Vertex shape set to square for aesthetic differentiation
        # Edge style set to dashed for visual distinction
        G.plot(layout='graphviz', prog='twopi', vertex_color='blue', edge_color='red', edge_thickness=2.5, vertex_size=2000, vertex_labels=True, edge_labels=True, vertex_shape='s', edge_style='dashed')
    </input>
    <output>
        # A graphical representation of the graph incorporating multiple customization options for enhanced visualization.
    </output>
</sage>


</section>
