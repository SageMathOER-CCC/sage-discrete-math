<section xml:id="sec-plot-options" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Plot Options</title>

    <p>
        Visualizing graphs in Sage not only provides insights into the structure and properties of the graph but also offers flexibility through customization options. These options include adjusting colors, edge thickness, vertex size, and more, allowing for clearer representation and better understanding of complex graphs. This subsection will guide you through various customization options for graph visualization in Sage.
    </p>
    <idx><h>graph plotting</h><h>edge color</h></idx>
    <p>
        To begin with, you can customize the color of vertices and edges. This is particularly useful for highlighting specific parts of a graph, such as a path or a subgraph.
    </p>
    <p>
        Here is an example of how to set different colors for vertices and edges:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            G.plot(vertex_color='blue', edge_color='red')
        </input>
        <output>
            # A graphical representation of the graph with blue vertices and red edges.
        </output>
    </sage>
    <idx><h>graph plotting</h><h>edge thickness</h></idx>
    <p>
        Adjusting the thickness of edges can also enhance the visualization, especially for weighted graphs or to emphasize certain edges over others.
    </p>
    <p>
        To modify the edge thickness:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            G.plot(edge_thickness=2.5)  # Adjusts the thickness of all edges
        </input>
        <output>
            # A graphical representation of the graph with thicker edges.
        </output>
    </sage>
    <p>
        The <c>edge_thickness</c> parameter allows you to specify the thickness of the edges in the plot.
    </p>
    <idx><h>graph plotting</h><h>vertex size</h></idx>
    <p>
        Another useful customization is adjusting the size of the vertices, which can be helpful when dealing with graphs that have a large number of vertices or when you want to fit certain texts inside of the vertices.
    </p>
    <p>
        To change the size of vertices:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            G.plot(vertex_size=2000)  # Adjusts the size of all vertices
        </input>
        <output>
            # A graphical representation of the graph with larger vertices.
        </output>
    </sage>
    <p>
        In order to avoid the previous graph cropping, we can use
    </p>
    <idx><h>graph plotting</h><h>border</h></idx>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            G.plot(vertex_size=2000, graph_border=True)
        </input>
        <output>
            # A graphical representation of the graph with larger vertices.
        </output>
    </sage>
    <p>
        While customizing labels, Sage allows you to enable or disable labels for both vertices and edges, providing clarity and additional context to the graph. However, note that setting specific colors for edge labels directly through the <c>plot</c> method is not supported.
    </p>
    <idx><h>graph plotting</h><h>labels</h></idx>
    <p>
        To customize labels and enable them for vertices and edges:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            G.plot(vertex_labels=True, edge_labels=True)
        </input>
        <output>
            # A graphical representation of the graph with vertex and edge labels enabled.
        </output>
    </sage>
    <idx><h>graph plotting</h><h>layouts</h></idx>
    <p>
    Layouts in Sage determine how vertices are positioned on the plane. SageMath provides several standard layout algorithms, each offering a unique perspective on the graph's structure.
</p>
<p>
    For instance, the <c>circular</c> layout places vertices in a circle, which can highlight the symmetry and regular structure of a graph.
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        G.plot(layout='circular')
    </input>
    <output>
        # Visualizes the graph with vertices positioned in a circular layout.
    </output>
</sage>
<p>
    The <c>spring</c> layout, also known as a force-directed layout, positions vertices to minimize edge intersections and edge length variance, resembling a system of springs. This layout often reveals the underlying structure of the graph by separating clusters of nodes.
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        G.plot(layout='spring')
    </input>
    <output>
        # Displays the graph using a spring (force-directed) layout.
    </output>
</sage>
<idx><h>graph plotting</h><h>planar</h></idx>
<p>
    Another common layout is the <c>planar</c> layout, which is applied to graphs that can be drawn without any edge crossings.
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        G.plot(layout='planar')
    </input>
    <output>
        # Attempts to display the graph with a planar layout, if possible. If the graph is not planar, an error message is printed.
    </output>
</sage>
<p>
    After exploring the standard layouts, you might want to delve into more sophisticated layout algorithms offered by Graphviz. By setting the <c>layout</c> option to <c>graphviz</c>, you can access various Graphviz layout engines. For instance, <c>prog='dot'</c> is great for hierarchical graphs, <c>prog='neato'</c> for undirected graphs with spring model layouts, <c>prog='fdp'</c> for force-directed layouts, <c>prog='twopi'</c> for radial layouts, and <c>prog='circo'</c> for circular layouts. These layouts are particularly useful when the graph's structure needs to be visualized in a way that standard layouts cannot accommodate.
</p>
<p>
    Here is an example using a Graphviz layout:
</p>
<sage>
    <input>
        G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
        G.plot(layout='graphviz', prog='dot')
    </input>
    <output>
        # The graph is rendered using the Graphviz 'neato' layout.
    </output>
</sage>


    <p>
        Changing the shape of the vertices can be useful for differentiating types of vertices or just for aesthetic purposes.
    </p>
    <p>
        To set the vertex shape to a square:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            # above from previous code
            G.plot(vertex_shape='s')  # Changes the shape of vertices to squares
        </input>
        <output>
            # A graphical representation of the graph with square-shaped vertices.
        </output>
    </sage>

    <p>
        Customizing the style of the edges can help in distinguishing different types of relationships or interactions between vertices.
    </p>
    <p>
        To change the edge style to dashed lines:
    </p>
    <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A')])
            # above from previous code
            G.plot(edge_style='dashed')  # Changes the edges to dashed lines
        </input>
        <output>
            # A graphical representation of the graph with dashed edges.
        </output>
    </sage>

    <p>
    Below is an example how to apply multiple options to a plot:
    </p>
    <sage>
    <input>
        # Creating the graph with its edges
        G = Graph(
            [
                ('A', 'B'),
                ('B', 'C'),
                ('C', 'D'),
                ('D', 'E'),
                ('E', 'A')
            ]
        )
        G.plot(
            layout='circular',
            vertex_color='blue',
            edge_color='red',
            edge_thickness=2.5,
            vertex_size=2000,
            vertex_labels=True,
            edge_labels=True,
            vertex_shape='s',
            edge_style='dashed'
        )
    </input>
    <output>
        # A graphical representation of the graph incorporating multiple customization options for enhanced visualization.
    </output>
</sage>
</section>
