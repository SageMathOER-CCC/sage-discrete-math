<?xml version="1.0" encoding="UTF-8" ?>

<section xml:id="sec-basics" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Basics</title>

    <subsection>
        <title>Graph Definition</title>

        <idx><h>graphs</h><h>graph definition</h></idx>
        <idx><h>graphs</h><h>nodes</h></idx>
        <idx><h>graphs</h><h>links</h></idx>
        <idx><h>graphs</h><h>arcs</h></idx>
        <p>
            A <term>graph</term> <m>G = (V, E)</m> consists of a set <m>V</m> of vertices and a set <m>E</m> of edges, where
            <me>
                E \subset \{\{u, v\} \mid u, v \in V\}
            </me>
            The set of edges is a set whose elements are subsets of two vertices.
        </p>

        <p>
            Terminology:
            <ul>
                <li>
                    <p>
                        Vertices are synonymous with <term>nodes</term>.
                    </p>
                </li>

                <li>
                    <p>
                        Edges are synonymous with <term>links</term> or <term>arcs</term>.
                    </p>
                </li>

                <li>
                    <p>
                        In an <term>undirected graph</term> edges are <term>unordered</term> pairs of vertices.
                    </p>
                </li>

                <li>
                    <p>
                        In a <term>directed graph</term> edges are <term>ordered</term> pairs of vertices.
                    </p>
                </li>
            </ul>
        </p>

        <p>
            There are several ways to define a graph in Sage.
            We can define a graph by listing the vertices and edges:
        </p>
        <sage>
        <input>
            V = ['A', 'B', 'C', 'D', 'E']
            E = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'D'), ('C', 'E')]
            G = Graph([V, E])
            G.plot()
        </input> </sage> <aside>
        <title>Notes</title>

        <p>
            Graph theory is pivotal in areas such as network routing and social networking. For example, in telecommunications, graphs are used to model and optimize routing of communications like telephone traffic or internet data packets through a network of nodes and links, ensuring efficient and fault-tolerant network design. 
        </p>
        </aside>

        <p>
            We can define a graph with an edge list. Each edge is a pair of vertices: 
        </p>
        <sage>
        <input>
            L = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'E')]
            G = Graph(L)
            G.plot()
        </input>
        </sage>

        <p>
            We can define a graph with an edge dictionary like so: <c>{edge: [neighbor, neighbor, etc], edge: [ neighbor, etc], etc: [etc]}</c>
            Each dictionary key is a vertex.
            The dictionary values are the vertex neighbors.
        </p>
        <sage>
        <input>
            E = {1: [2, 3, 4], 2: [1, 3, 4], 3: [1, 2, 4], 4: [1, 2, 3]}
            G = Graph(E)
            G.plot()
        </input>
        </sage>

        <p>
            You can improve the readability of a dictionary by placing each item of the collection on a new line:
        </p>
        <sage>
        <input>
            E = {
                1: [2, 3, 4],
                2: [1, 3, 4], 
                3: [1, 2, 4],
                4: [1, 2, 3]
            }
            G = Graph(E)
            G.plot()
        </input>
        </sage>

        <p>
            Sage offers a collection of predefined graphs. Here are some examples:
        </p>
        <sage>
        <input>
              graphs.PetersenGraph().show()
              graphs.CompleteGraph(5).show()
              graphs.TetrahedralGraph().show()
              graphs.DodecahedralGraph().show()
              graphs.HexahedralGraph().show()
        </input>
        </sage>
    </subsection>


    <subsection>
        <title>Weighted Graphs</title>

        <idx><h>graphs</h><h>weighted</h></idx>
        <p>
            A <term>weighted graph</term> has a weight, or number, associated with each edge.
            These weights can model anything including represent distances, costs, or other relevant quantities.
        </p>

        <p>
            To create a weighted graph, add a third element to each pair of vertices.
        </p>
        <sage>
        <input>
            E = [('A', 'B', 2), ('B', 'C', 3), ('C', 'D', 4), ('D', 'E', 5), ('E', 'A', 1)]
            G = Graph(E, weighted=True)
            G.plot(edge_labels=True)
        </input>
        </sage>
    </subsection>


    <subsection>
        <title>Graph Characteristics</title>

        <p>
            Sage offers many built-in functions for analyzing graphs.
            Let's examine the following graph:
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.show()
        </input>
        </sage>
        <idx><h>graphs</h><h>vertices</h></idx>
        <p>
            The <c>vertices()</c> method returns a list of the graph's vertices.
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.vertices()
        </input>
        </sage>
        <idx><h>graphs</h><h>edges</h></idx>
        <p>
            The <c>G.edges()</c> method returns triples representing the graph's vertices and edge labels.
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.edges()
        </input>
        </sage>

        <p>
            Return the edges as a tuple without the label by setting <c>labels=false</c>.
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.edges(labels=false)
        </input>
        </sage>

        <p>
            The <term>order</term> of <m>G=(V,E)</m> is the number of vertices <m>|V|</m>.
        </p>
        <idx><h>graphs</h><h>order</h></idx>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.order()
        </input>
        </sage>
        <idx><h>graphs</h><h>size</h></idx>
        <p>
            The size of <m>G=(V,E)</m> is the number of edges <m>|E|</m>.
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.size()
        </input>
        </sage>
        <idx><h>graphs</h><h>degree</h></idx>
        <p>
            The degree of the vertex <m>v</m>, <m>deg(v)</m> is the number of edges incident with <m>v</m>.
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.degree('A')
        </input>
        </sage>

        <p>
            The degree sequence of <m>G = (V, E)</m> is the list of degrees of its vertices.
        </p>
        <sage>
        <input>
            G = Graph([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'A'), ('A', 'C'), ('B', 'D')])
            G.degree_sequence()
        </input>
        </sage>
    </subsection>


    <subsection>
        <title>Graphs and Matrices</title>

        <idx><h>graphs</h><h>adjacency matrix</h></idx>
        <p>
            The <em>adjacency matrix</em> of a graph is a square matrix used to represent which vertices of the graph are adjacent to which other vertices.
            Each entry <m>a_{ij}</m> in the matrix is equal to 1 if there is an edge from vertex <c>i</c> to vertex <c>j</c>, and is equal to 0 otherwise.
        </p>
        <sage>
        <input>
              G = Graph([('A', 'B'), ('A', 'E'), ('B', 'C'), ('C', 'D'), ('D', 'E')])
              G.adjacency_matrix()
        </input>
        </sage>

        <p>
            We can also define a graph with an adjacency matrix:
        </p>
        <sage>
        <input>
              A = Matrix([
                        [0, 1, 0, 0, 1],
                        [1, 0, 1, 0, 0],
                        [0, 1, 0, 1, 0],
                        [0, 0, 1, 0, 1],
                        [1, 0, 0, 1, 0]
              ])
              G = Graph(A)
              G.plot()
        </input>
        </sage>
        <idx><h>graphs</h><h>incidence matrix</h></idx>
        <p>
            The <em>incidence matrix</em> is an alternative matrix representation of a graph, which describes the relationship between vertices and edges.
            In this matrix, rows correspond to vertices, and columns correspond to edges, with entries indicating whether a vertex is incident to an edge.
        </p>
        <sage>
        <input>
          G = Graph([('A', 'B'), ('A', 'E'), ('B', 'C'), ('C', 'D'), ('D', 'E')])
          G.incidence_matrix()
        </input>
        </sage>
    </subsection>


    <subsection>
        <title>Manipulating Graphs in Sage</title>

        <idx><h>graphs</h><h>add vertex</h></idx>
        <p>
            To add a vertex to a graph:
        </p>
        <sage>
        <input>
            G = Graph([(1, 2), (2, 3), (3, 4), (4, 1)])
            G.add_vertex(5)
            G.show()
        </input>
        </sage>
        <p>
            To add a list of vertices:
        </p>
        <sage>
        <input>
             G.add_vertices([10, 11, 12])
             G.show()
        </input>
        </sage>
        <idx><h>graphs</h><h>remove vertex</h></idx>
        <p>
            To remove a vertex from a graph:
        </p>
        <sage>
        <input>
            G.delete_vertex(12)
            G.show()
        </input>
        </sage>
        <idx><h>graphs</h><h>add edge</h></idx>
        <p>
            To add an edge between two vertices:
        </p>
        <sage>
        <input>
            G.add_edge(1, 3)
            G.show()
        </input>
        </sage>
        <idx><h>graphs</h><h>delete vertex</h></idx>
        <p>
            To delete an edge from a graph:
        </p>
        <sage>
        <input>
            G.delete_edge(2, 3)
            G.show()
        </input>
        </sage>
        <p>
            Deleting a nonexistent vertex returns an error.
            Deleting a nonexistent edge leaves the graph unchanged.
            Adding a vertex or edge already in the graph, leaves the graph unchanged.
        </p>
    </subsection>
</section>
