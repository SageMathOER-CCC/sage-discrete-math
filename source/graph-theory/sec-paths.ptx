<section xml:id="paths" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Paths</title>
  <p>
    A path is a sequence of edges which connects a sequence of vertices through a non-repeating walk.
  </p>
  <p>
    To get all paths between two vertices:
  </p>
  <sage>
    <input>
      G = Graph({1: [2, 3], 2: [3], 3: [4]})
      G.all_paths(1, 4)
    </input>
    <output>
        # Lists all paths from vertex 1 to vertex 4.
    </output>
  </sage>
  <p>
    The length of a path in graph theory is defined as the number of edges that make up the path.
  </p>
  <p>
    Finding the shortest path between two vertices can be achieved using the <c>shortest_path()</c> function:
  </p>
  <sage>
      <input>
          G = Graph({1: [2, 3], 2: [3], 3: [4]})
          G.shortest_path(1, 4)
      </input>
      <output>
          # Retrieves the shortest path from vertex 1 to vertex 4, if it exists.
      </output>
  </sage>
  <p>
    A graph is said to be connected if there is a path between any two vertices in the graph.
  </p>
  <p>
    To determine if a graph is fully connected, where there is a path between every pair of vertices, we can use the <c>is_connected()</c> function:
  </p>
  <sage>
      <input>
          G = Graph({1: [2, 3], 2: [3], 3: [4]})
          G.is_connected()
      </input>
      <output>
          # Checks if the graph is fully connected, returning a boolean value.
      </output>
  </sage>
  <p>
    Connected components of an undirected graph are the subgraphs in which any two vertices are connected to each other by paths, and which are connected to no additional vertices in the supergraph.
  </p>
  <p>
    To identify all connected components of a graph, the <c>connected_components()</c> function can be utilized:
  </p>
  <sage>
      <input>
          G = Graph({1: [2, 3], 2: [4], 5: [6]})
          G.connected_components()
      </input>
      <output>
          # Returns a list of connected components, with each component represented as a list of vertices.
      </output>
  </sage>
  <p>
    We can combine both code to help us better evaluate the path of a graph.
  </p>
  <sage>
    <input>
        G = Graph({1: [2, 3], 2: [4], 5: [6, 7], 6: [7]})
        G.show()
        G.is_connected()
        G.connected_components()
    </input>
    <output>
    </output>
</sage>
  <p>
    The diameter of a graph is the length of the longest shortest path between any two vertices, providing insight into the graph's size and connectivity:
  </p>
  <sage>
      <input>
          G = Graph({1: [2, 3], 2: [3, 4], 3: [4]})
          G.diameter()
      </input>
      <output>
          # Calculates the diameter of the graph.
      </output>
  </sage>
  <p>
    Additionally, knowing whether a graph is bipartite is crucial as it affects the structure and properties of paths within the graph. A graph is bipartite if its vertices can be divided into two disjoint sets such that every edge connects a vertex in one set to a vertex in the other set:
  </p>
  <sage>
      <input>
          G = Graph({1: [2, 3], 2: [4], 3: [4]})
          G.is_bipartite()
      </input>
      <output>
          # Checks if the graph is bipartite, returning a boolean value along with the partition sets if it is bipartite.
      </output>
  </sage>
</section>
