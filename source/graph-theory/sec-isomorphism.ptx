<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="isomorphism" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Isomorphism</title>
  <idx>
    <h>isomorphism</h>
  </idx>
  <p> Informally, we can say that an <term>isomorphism</term> is a relation of sameness between
    graphs. Let's say that the graphs <m>G = (V, E)</m> and <m>G' = (V', E')</m> are isomorphic if
    there exists a bijection <m>f: V \rightarrow V'</m> such that
    <m>\{u, v\} \in E \Leftrightarrow \{f(u), f(v)\} \in E'</m>. </p>
  <p>
    This means there is a bijection between the set of vertices such that every time two vertices
    determine an edge in the first graph, the image of these vertices by the bijection also
    determines an edge in the second graph, and vice versa. Essentially, the two graphs have the
    same structure, but the vertices are labeled differently.
  </p>
  <aside>
    <title>Notes</title>
    <p>
      Graph isomorphism identifies structures relevant to chemistry, biology, machine learning, and
      neural networks.
    </p>
  </aside>
  <sage>
    <input>
      C = Graph(
        {
          'a': ['b', 'c', 'g'],
          'b': ['a', 'd', 'h'],
          'c': ['a', 'd', 'e'],
          'd': ['b', 'c', 'f'],
          'e': ['c', 'f', 'g'],
          'f': ['d', 'e', 'h'],
          'g': ['a', 'e', 'h'],
          'h': ['b', 'f', 'g']
        }
      )

      D = Graph(
        {
          1: [2, 6, 8],
          2: [1, 3, 5],
          3: [2, 4, 8],
          4: [3, 5, 7],
          5: [2, 4, 6],
          6: [1, 5, 7],
          7: [4, 6, 8],
          8: [1, 3, 7]
        }
      )

      C.show()
      D.show()
    </input>
  </sage>
  <p> The sage <c>is_isomorphic()</c> method can be used to check if two graphs are isomorphic. The
    method returns <c>True</c> if the graphs are isomorphic and <c>False</c> if the graphs are not
    isomorphic. </p>
  <sage>
    <input>
      C.is_isomorphic(D)
    </input>
  </sage>

  <p> The <term>invariants under isomorphism</term> are conditions that can be checked to determine
    if two graphs are not isomorphic. If one of these fails then the graphs are not isomorphic. If
    all of these are true then the graph may or may not be isomorphic. The three conditions for
    invariants under isomorphism are: <me>
      G = (V, E) \text{ is connected if and only if } G' = (V', E') \text{ is connected}
    </me>
    <me>
      |V| = |V'| \text{ and } |E| = |E'|
    </me>
    <me>
      \text{degree sequence of } G = \text{ degree sequence of } G'
    </me>
  </p>
  <p>
    To summarize, if one graph is connected and the other is not, then the graphs are not
    isomorphic. If the number of vertices and edges are different, then the graphs are not
    isomorphic. If the degree sequences are different, then the graphs are not isomorphic. If all
    three invariants are satisfied, then the graphs may or may not be isomorphic.
  </p>
  <p>
    Let's define a function to check if two graphs satisfy the invariants under isomorphism. Make
    sure you run the next cell to define the function before using the function.
  </p>
  <sage>
    <input>
      def invariant_under_isomorphism(G1, G2):
          print("Are both graphs connected? ", end="")
          are_connected: bool = (
              G1.is_connected() == G2.is_connected()
          )
          print("Yes" if are_connected else "No")

          print(
              "Do both graphs have same number of "
              "vertices and edges? ", end=""
          )
          have_equal_vertex_and_edge_counts: bool = (
              G1.order() == G2.order() and
              G1.size() == G2.size()
          )
          print(
              "Yes" if have_equal_vertex_and_edge_counts else "No"
          )

          # Sort the degree-sequences because
          # the order of vertices doesn't matter.
          print(
              "Do both graphs have the same degree sequence? ",
              end=""
          )
          have_same_degree_sequence: bool = (
              sorted(G1.degree_sequence()) ==
              sorted(G2.degree_sequence())
          )
          print("Yes" if have_same_degree_sequence else "No")

          # All checks
          are_invariant_under_isomorphism =(
              are_connected and
              have_equal_vertex_and_edge_counts and
              have_same_degree_sequence
          )
          print(
              "\nTherefore, the graphs {0} isomorphic.".format(
                  "may be" if are_invariant_under_isomorphism
                  else "are not"
              )
          )
    </input>
  </sage>
  <p> If we use <c>invariant_under_isomorphism</c> on the <m>C</m> and <m>D</m>, the output will
    let's know that the graphs may or may not be isomorphic. We can use the <c>is_isomorphic()</c>
    method to check if the graphs are definitively isomorphic. </p>
  <sage>
    <input>
      invariant_under_isomorphism(C, D)
    </input>
  </sage>
  <p>
    Let's construct a different pair of graphs <m>A</m> and <m>B</m> defined as follow
  </p>
  <sage>
    <input>
      A = Graph(
        [
          ('a', 'b'),
          ('b', 'c'),
          ('c', 'f'),
          ('f', 'd'),
          ('d', 'e'),
          ('e', 'a')
        ]
      )

      B = Graph(
        [
          (1, 5),
          (1, 9),
          (5, 9),
          (4, 6),
          (4, 7),
          (6, 7)
        ]
      )

      A.show()
      B.show()
    </input>
  </sage>
  <p> This time, if we apply <c>invariant_under_isomorphism</c> function on <m>A</m> and <m>B</m>,
    the output will show us that they are not isomorphic. </p>
  <sage>
    <input>
      invariant_under_isomorphism(A, B)
    </input>
  </sage>
</section>
