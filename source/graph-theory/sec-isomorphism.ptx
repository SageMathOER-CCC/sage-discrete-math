<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="isomorphism" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Isomorphism</title>
  <p>
    <term>Isomorphism</term> is a relation of sameness between graphs. The symbol for equivalence relation, <m>\sim</m> is the same symbol for isomorphism. Let's say that the graphs <m>G</m> and <m>G'</m> are isomorphic:
  </p>
  <me>
    G = (V, E) \sim G' = (V', E') \\
  </me>
  <p>
    <m>G</m> is isomorphic to <m>G'</m> if there exists a bijection <m>f: V \rightarrow V'</m> such that <m>\{u, v\} \in E \Leftrightarrow \{f(u), f(v)\} \in E'</m>.
  </p>
  <p>
    Recall from learning about functions, a bijection is a function that is both injective and surjective. This means that every vertex in <m>G</m> is mapped to a unique vertex in <m>G'</m>.
  </p>
  <p>
    Every time two vertices determine an edge in the first graph, the image of these vertices determined by the bijection also determine an edge in the second graph. This means that the two graphs have the same structure, but the vertices are labeled differently.
  </p>

  <p>
    When dealing with a large graph with many edges and vertices, it can be difficult to determine if two graphs are isomorphic. In general, it is easier to prove that the graphs are not isomorphic. The <term>invariant under isomorphism</term> theorem is a set of conditions that can be checked to determine if two graphs are not isomorphic. If one of these fails then the graphs are not isomorphic. If all of these are true then the graph may or may not be isomorphic. The three conditions for invariants under isomorphism are:
    <me>
      G = (V, E) \text{ is connected iff } G' = (V', E') \text{ is connected}
    </me>
    <me>
      |V| = |V'| \text{ and } |E| = |E'|
    </me>
    <me>
      \text{degree sequence of } G = \text{ degree sequence of } G'
    </me>
  </p>
  <p>
    To summarize, if one graph is connected and the other is not, then the graphs are not isomorphic. If the number of vertices and edges are different, then the graphs are not isomorphic. If the degree sequences are different, then the graphs are not isomorphic. If all three invariants are satisfied, then the graphs may or may not be isomorphic.
  </p>
  <sage>
    <input>

      def invariants_under_isomorphism(G1, G2):
          # Are both graphs connected?
          are_both_connected = G1.is_connected() == G2.is_connected()
          print("Are both graphs connected? " + ("Yes" if are_both_connected else "No"))
          
          # Do both graphs have the same number of vertices and edges?
          same_number_of_vertices_and_edges = (G1.order() == G2.order()) and (G1.size() == G2.size())
          print("Do both graphs have the same number of vertices and edges? " + ("Yes" if same_number_of_vertices_and_edges else "No"))
          
          # Do both graphs have the same degree sequence?
          # Sort the degree sequences because the order of the vertices does not matter.
          same_degree_sequence = sorted(G1.degree_sequence()) == sorted(G2.degree_sequence())
          print("Do both graphs have the same degree sequence? " + ("Yes" if same_degree_sequence else "No"))
          
          # Final check
          if are_both_connected and same_number_of_vertices_and_edges and same_degree_sequence:
              print("The graphs may be isomorphic.")
          else:
              print("The graphs are not isomorphic.")
    </input>
  </sage>
  <sage>
    <input>
      A = Graph([('a', 'b'), ('b', 'c'), ('c', 'f'), ('f', 'd'), ('d', 'e'), ('e', 'a')])
      B = Graph([(1, 5), (1, 9), (5, 9), (4, 6), (4, 7), (6, 7)])
      invariants_under_isomorphism(A, B)
    </input>
  </sage>

  <sage>
    <input>
      C = Graph({
          'a': ['b', 'c', 'g'],
          'b': ['a', 'd', 'h'],
          'c': ['a', 'd', 'e'],
          'd': ['b', 'c', 'f'],
          'e': ['c', 'f', 'g'],
          'f': ['d', 'e', 'h'],
          'g': ['a', 'e', 'h'],
          'h': ['b', 'f', 'g']
          })

      D = Graph({
          1: [2, 6, 8],
          2: [1, 3, 5],
          3: [2, 4, 8],
          4: [3, 5, 7],
          5: [2, 4, 6],
          6: [1, 5, 7],
          7: [4, 6, 8],
          8: [1, 3, 7]
          })
      
      invariants_under_isomorphism(C, D)
    </input>
  </sage>
  <p>
    Since invariants under isomorphism are satisfied for the first pair of graphs, the graphs may be isomorphic. Let's check if graphs <m>C</m> and <m>D</m> are definitively isomorphic.
  </p>
  <sage>
    <input>
      C.is_isomorphic(D)
    </input>
  </sage>
</section>