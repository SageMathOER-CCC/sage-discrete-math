<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-fsm-in-action" xmlns:xi="http://www.w3.org/2001/XInclude"
    xml:lang="en">
    <title>State Machine in Action</title>
    <idx>
        <h>state machines</h>
        <h>application</h>
    </idx>
    <introduction>
        <p>
            Traffic light systems are crucial for regulating traffic. These systems use carefully
            coordinated signals to ensure safety for both vehicles and pedestrians. In the previous
            section, the traffic light system was modeled in an overly simplistic way. This section
            adds complexity to account for pedestrian presence, ensuring safe crossings while
            maintaining smooth traffic flow.</p>
    </introduction>
    <subsection>
        <title> Traffic Light Controller: Problem Overview</title>
        <p>
            Letâ€™s design a traffic light system for a two-way road with pedestrian crossings. This
            system coordinates the movement of vehicles and pedestrians using lights to indicate
            when vehicles can proceed, slow down, or stop, and when pedestrians can cross safely.
            Vehicle traffic lights include three signals: Red, Yellow, and Green. For simplicity,
            the pedestrian lights also use three signals: red, yellow, and green. Signal transitions
            are governed by timers, as described in the previous section, with each timer triggering
            a transition event after a predefined duration.</p>
        <figure>
            <media>
                <image source="finite-state-machines/simple_traffic_light.svg" width="80%" />
            </media>
            <caption>Simple Traffic Light</caption>
        </figure>
        <p>
            The system must ensure safety and smooth traffic flow by coordinating appropriate traffic
            and pedestrian light configurations. Initially, vehicle traffic proceeds with a traffic
            green light, while pedestrian crossing is prohibited with a pedestrian red light.</p>
    </subsection>
    <subsection>
        <title>Elements of the FSM Model</title>
        <p>
            The goal here is to define a state machine model that can control this traffic light
            system, construct it, then put it under test. This system has different configurations
            of lights: Red (<c>R</c>), Yellow (<c>Y</c>), and Green (<c>G</c>) for traffic, and
            red (<c>r</c>), yellow (<c>y</c>), and green (<c>g</c>) for pedestrians. Note that not
            all possible combinations makes sense.</p>
        <p>
            For inputs, the system leverage four independent timers with different preset durations
            and triggering different use cases as follows:
            <ul>
                <li>30sec timer <m>t30s</m>: drives the traffic light transition from <c>G</c> to <c>Y</c>. The pedestrian light remains <c>r</c> and unchanged.</li>
                <li>5sec timer <m>t5s</m>: drives the traffic light transition from <c>Y</c> to <c>R</c>, and the pedestrian light transition from <c>r</c> to <c>g</c>.</li>
                <li>20sec timer <m>t20s</m>: drives the pedestrian light transition from <c>g</c> to <c>y</c>, while the traffic light remains <c>R</c> and unchanged.</li>
                <li>10sec timer <m>t10s</m>: drives the pedestrian light transition from <c>y</c> to <c>r</c>, and the traffic light transition from <c>R</c> back to <c>G</c>.</li>
            </ul>
        </p>
        <p>
            From the above timers and lights configurations, the following set of 4 distinct states emerges:
            <ul>
                <li>State <c>Yr</c>: Where the traffic light is Yellow, pedestrian light is red.</li>
                <li>State <c>Rg</c>: Where the traffic light is Red, pedestrian light is green.</li>
                <li>State <c>Ry</c>: Where the traffic light is Red, pedestrian light is yellow.</li>
                <li>State <c>Gr</c>: Where the traffic light is Green, pedestrian light is red.</li>
            </ul>
        </p>
        <p>
            Finally, the system's outputs corresponding to each of the above are the light configurations and would be similar to the states:
            <ul>
                <li>
                    <c>(Y,r)</c>: Traffic light turning Yellow and the pedestrian light remains red.
                </li>
                <li>
                    <c>(R,g)</c>: Traffic light turning Red and the pedestrian light turning green.
                </li>
                <li>
                    <c>(R,y)</c>: Traffic light remains Red and the pedestrian light turning yellow.
                </li>
                <li>
                    <c>(G,r)</c>: Traffic light turning Green and the pedestrian light turning red.
                </li>
            </ul>
        </p>
        <p>
            The following table summarize the elements of the new traffic light FSM.</p>
        <p>
            <table>
                <title>The Traffic Light State Machine Definition</title>
                <tabular halign="center">
                    <row header="yes" bottom="major">
                        <cell></cell>

                        <cell>next</cell>
                        <cell></cell>
                        <cell></cell>
                        <cell></cell>

                        <cell>output</cell>
                        <cell></cell>
                        <cell></cell>
                        <cell></cell>
                    </row>
                    <row header="yes" bottom="minor">
                        <cell>current</cell>

                        <cell><m>t_{5s}</m></cell>
                        <cell><m>t_{10s}</m></cell>
                        <cell><m>t_{20s}</m></cell>
                        <cell><m>t_{30s}</m></cell>

                        <cell><m>t_{5s}</m></cell>
                        <cell><m>t_{10s}</m></cell>
                        <cell><m>t_{20s}</m></cell>
                        <cell><m>t_{30s}</m></cell>
                    </row>

                    <row>
                        <cell><m>Gr</m></cell>

                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>Yr</m></cell>

                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>(Y,r)</m></cell>
                    </row>

                    <row>
                        <cell><m>Yr</m></cell>

                        <cell><m>Rg</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>

                        <cell><m>(R,g)</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                    </row>

                    <row>
                        <cell><m>Rg</m></cell>

                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>Ry</m></cell>
                        <cell><m>-</m></cell>

                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>(R,y)</m></cell>
                        <cell><m>-</m></cell>
                    </row>

                    <row>
                        <cell><m>Ry</m></cell>

                        <cell><m>-</m></cell>
                        <cell><m>Gr</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>

                        <cell><m>-</m></cell>
                        <cell><m>(G,r)</m></cell>
                        <cell><m>-</m></cell>
                        <cell><m>-</m></cell>
                    </row>
                </tabular>
            </table>
        </p>
        <p>
            <em>The symbol <m>-</m> indicates no state change, and no output change.</em>
        </p>
    </subsection>
    <subsection>
        <title>Construct the FSM</title>
        <sage>
            <input>
                # FSM elements
                states = ['Gr', 'Yr', 'Rg', 'Ry']
                inputs = ['t5s', 't10s', 't20s', 't30s']
                outputs = ['(G,r)', '(Y,r)', '(R,g)', '(R,y)']

                # Traffic light state machine definition
                significant_configs = [
                    # from-state, to-state, input, output
                    ('Gr', 'Yr', 't30s', '(Y,r)'),
                    ('Yr', 'Rg', 't5s',  '(R,g)'),
                    ('Rg', 'Ry', 't20s', '(R,y)'),
                    ('Ry', 'Gr', 't10s', '(G,r)'),
                ]

                machine_configs = {}
                for config in significant_configs:
                    (fr, to, evt, out) = config
                    # Add the significant transition
                    machine_configs[fr] = [
                        (to, evt, out),
                    ]
                    # Add no-state change transitions
                    machine_configs[fr].extend(
                        [(fr, event, '_') for event in inputs if event != evt]
                    )

                traffic_light_controller = FiniteStateMachine(
                    machine_configs,
                    initial_states=['Gr']
                )

                print('States:', traffic_light_controller.states())
                print()
                [print(_) for _ in traffic_light_controller.transitions()]
                print()

                print('-'*100)
                print('FSM Config:', machine_configs)
                traffic_light_controller
            </input>
        </sage>
    </subsection>
    <subsection>
        <title>Display the State Transition Graph</title>
        <p>
            The FSM is visualized as before (a directed graph with nodes representing states and edges showing transitions).
        </p>
        <sage>
            <input>
                traffic_light_controller.graph().plot(
                    figsize=[6, 6],
                    vertex_size=800,
                    edge_labels=True,
                    vertex_labels=True,
                    edge_color=(.2,.4,1),
                    edge_thickness=1.0
                )
            </input>
        </sage>
    </subsection>
    <subsection>
        <title>Simulate a Full Cycle Run of the FSM</title>
        <p>
            The simulation starts in the initial state (<c>Gr</c>) and transitions through all states.</p>
        <sage>
            <input>
                # pass in the initial state and the list of inputs
                Gr = traffic_light_controller.state('Gr')
                *_, outputs_history = traffic_light_controller.process(
                    initial_state=Gr,
                    input_tape=['t30s', 't5s', 't20s', 't10s', 't30s'],
                )

                # print out the outputs of the state machine run
                print("FSM outputs:")
                [print(_) for _ in outputs_history];
                print()
            </input>
        </sage>
    </subsection>
    <conclusion>
        <p>
            It is worth noting that using Sage built-in modules could produce an error when handling transitions that
            were not defined in the FSM. For instance, in the previous example, if the timer durations _pattern_ for
            the input does not match the defined transitions, the output will be a <c>None</c> value. Similarly, an
            exception would be thrown if attempting to run the FSM starting at state that is not part of the FSM definition.</p>
</conclusion>
</section>
