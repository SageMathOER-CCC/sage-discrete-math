<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-state-machine-definition" xmlns:xi="http://www.w3.org/2001/XInclude"
    xml:lang="en">
    <title>Definitions and Components</title>
    <introduction xml:id="sm-definition-and-components">
        <p>The defining feature of any abstract machine is its memory structure, ranging from a <em>
            finite</em> set of states in the case of finite-state machines to more complex memory
            systems (ex.<em>Turing machines</em>, and <em>Petri net</em>).</p>

        <p>A <term>Finite-State Machine (FSM)</term> is a a computational model that has a finite
            set of possible states <m>S</m>, a finite set of possible input symbols (the input
            alphabet) <m>X</m>, a finite set of possible output symbols (the output alphabet) <m>
            Z</m>. The machine can exist in one of the states at any time, and based on the
            machine input and its current state, it can transition to any other state. The default
            state of an FSM is referred to as the <em>initial state</em>.</p>

        <p>An infinite sequence of input (respectively, output) symbols is called an input
            (respectively, output) <em>stream</em>. Although the input and output alphabets of a
            finite-state machine are finite sets, the input and output <em>streams</em> can be of
            infinite size.</p>

        <p>For every input the machine receives, it transition to a new state (or remains at the
            current state), and it produces an output. The functions that take in the machine
            current state and its input and map them to the machine's future state and its output
            are referred to as the <em>state transition</em> function and the <em>output</em>
            function respectively.</p>

        <p>In a finite state machine, a <em>final state</em> (also known as the accepted state) is a <em>
            special</em> predefined state that indicates whether an input sequence is valid or
            accepted by the machine. The set <m>F</m> of all final states is a subset of the states
            set <m>S</m>. </p>

        <p>When the state machine processes a finite input sequence, it transition through various
            states based on each input in the sequence and the current state of the machine. If,
            after processing the entire sequence, the machine ends up in any of the <em>final state</em>,
            then the input is considered valid (or recognized according to the machine's rules).
            Otherwise, the input is rejected as invalid. The final states subset is only meaningful
            for finite state machines that process the inputs sequence in chunks or segments.</p>
    </introduction>

    <subsection xml:id="sm-definition">
        <title>Definition</title>
        <idx>
            <h>state machines</h>
            <h>definition</h>
        </idx>
        <p> A finite-state machine is defined by the tuple <m>(S, X, Z, w, t, s_0, F)</m> where:
            <ul>
                <li>
                    <p>
                        <m>S=\{s_0, s_1, s_2,\ldots , s_n\}</m> is the state set, a finite set that
            corresponds to the set of all memory configurations that the machine can have at any
            time <m>s_0</m> is the <em>initial state</em>
            <em>optionally</em> <m>F \subset S</m> is
            the subset of all final states (when omitted, it is assumed that <m>F=S</m>).</p>
                </li>
                <li>
                    <p>
                        <m>X=\{x_0, x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                </li>
                <li>
                    <p>
                        <m>Z=\{z_0, z_1,z_2, \ldots ,z_k\}</m> is the output alphabet.</p>
                </li>
                <li>
                    <p>
                        <m>w: S\times X \to Z</m> is the output function, which specifies which
            output symbol <m>w(s, x) \in Z</m> is written onto the output device when the machine is
            in state <m>s</m> and the input symbol <m>x</m> is read.</p>
                </li>
                <li>
                    <p>
                        <m>t:S\times X \to S</m> is the next-state (or transition) function, which
            specifies which state <m>t(s, x) \in S</m> the machine should move to when it is
            currently in state <m>s</m> and it reads the input symbol <m>x</m>.</p>
                </li>
            </ul>
        </p>
    </subsection>

    <subsection>
        <title>Types of Finite State Machines</title>

        <definition>
            <title>Mealy Machine</title>
            <statement>
                <p> The output in a <term>Mealy Machine</term>, is a function of both the current
                    state and the input, which means the output can change immediately when inputs
                    change, without needing to wait for the state transition.</p>

                <p> A Mealy machine is represented by the 6-tuple <m>(S, X, Z, w, t, s_0)</m> where:
                    <ul>
                        <li>
                            <p>
                                <m>S=\{s_0, s_1, s_2,\ldots , s_n\}</m> is the state set, and <m>s_0</m>
                                is the initial state.</p>
                        </li>
                        <li>
                            <p>
                                <m>X=\{x_0, x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                        </li>
                        <li>
                            <p>
                                <m>Z=\{z_0, z_1,z_2, \ldots ,z_k\}</m> is the output alphabet.</p>
                        </li>
                        <li>
                            <p>
                                <m>w: S\times X \to Z</m> is the output function, which specifies which
                                output symbol <m>w(s, x) \in Z</m> maps to the machine state <m>s</m> and the input
                                <m>x</m>.</p>
                        </li>
                        <li>
                            <p>
                                <m>t:S\times X \to S</m> is the transition function, which
                                specifies which next state <m>t(s, x) \in S</m> the machine should move to when its
                                current state is <m>s</m> and it has the input symbol <m>x</m>.</p>
                        </li>
                    </ul>
                </p>
                <p>Example: A vending machine that produces output based on the current state and
                    inserted coins.</p>
            </statement>
        </definition>

        <definition>
            <title>Moore Machine</title>
            <p> In a <term>Moore Machine</term>, the output depends <em>solely</em> on the current state.
                Unlike Mealy state machine, this machine must enter a new state for the output to change.</p>

            <p> A Moore machine is also represented by the 6-tuple <m>(S, X, Z, w, t, s_0)</m> where:
                <ul>
                    <li>
                        <p>
                            <m>S=\{s_0, s_1, s_2,\ldots , s_n\}</m> is the state set, and <m>s_0</m>
                            is the initial state.</p>
                    </li>
                    <li>
                        <p>
                            <m>X=\{x_0, x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>Z=\{z_0, z_1,z_2, \ldots ,z_k\}</m> is the output alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>w: S \to Z</m> is the output function, which specifies which
                            output symbol <m>w(s) \in Z</m> maps to the machine current state <m>s</m>.</p>
                    </li>
                    <li>
                        <p>
                            <m>t:S\times X \to S</m> is the transition function, which
                            specifies which next state <m>t(s, x) \in S</m> the machine should move to when
                            its current state is <m>s</m> and it has the input symbol <m>x</m>.</p>
                    </li>
                </ul>
            </p>
            <p>Example: A traffic light system where the light color is based on the current
                state of the system.</p>
        </definition>
    </subsection>

    <subsection>
        <title>Other Variants of FSMs</title>
        <subsection>
            <title>Finite-State Automaton</title>
            <p> A <term>Finite-State Automaton</term> is a finite state machine <em>with no output</em>,
                and it is represented by the 5-tuple <m>(S, X, t, s_0, F)</m> where:
                <ul>
                    <li>
                        <p>
                            <m>S=\{s_0, s_1, s_2,\ldots , s_n\}</m> is the state set, and <m>s_0</m>
                            is the initial state, and <m>F</m> is the set of finite states.</p>
                    </li>
                    <li>
                        <p>
                            <m>X=\{x_0, x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>t:S\times X \to S</m> is the transition function, which
                            specifies which next state <m>t(s, x) \in S</m> the machine should move to when
                            its current state is <m>s</m> and it has the input symbol <m>x</m>.</p>
                    </li>
                </ul>
            </p>
        </subsection>

        <subsection>
            <title>Deterministic Finite Automaton (DFA)</title>
            <p> A <term>Deterministic Finite Automaton (DFA)</term> is a simplified FSM where each
                state has exactly one transition for each input.</p>
            <p> DFAs are typically used for lexical analysis, language recognition, and pattern matching.
                Example: A string-matching system to recognize specific languages or regular expressions.</p>
        </subsection>

        <subsection>
            <title>Nondeterministic Finite Automaton (NFA)</title>
            <p> Unlike DFA, an <term>NFA</term> allows multiple transitions for the same input or even
                transitions without consuming input (<m>\epsilon</m>-transitions).</p>
            <p>Example: Regular expression (RegEx) engines that explore multiple paths to find a pattern match.</p>
        </subsection>

        <subsection>
            <title>Turing Machine</title>
            <p> A <term>Turing Machine</term> is an FSM with infinite tape memory representing both the input and
                output streams (shared stream). Unlike all other FSMs, a Turing machine can alter the input/output
                stream, and as such it is capable of simulating any algorithm. Turing machines are the theoretical
                foundation for modern computation. </p>
            <p>Example: Any general-purpose computer executing any algorithm can be modeled as a Turing Machine.</p>
        </subsection>
    </subsection>

    <conclusion>
        <p>
            Finite state machines are a foundational concept in computer science, which offer a structured way to
            model systems with discrete states and transitions. Different variants like Mealy machine and
            Moore machine have distinct characteristics, and as such can adapt to various applications.
        </p>
    </conclusion>
</section>
