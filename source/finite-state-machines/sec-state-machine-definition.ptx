<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-state-machine-definition" xmlns:xi="http://www.w3.org/2001/XInclude"
    xml:lang="en">
    <title>Definitions and Components</title>
    <introduction xml:id="sm-definition-and-components">
        <p>The defining feature of any abstract machine is its memory structure, ranging from
            a <em>finite</em> set of states in the case of finite-state machines to more complex memory
            systems (e.g., <em>Turing machines</em> and <em>Petri nets</em>).</p>

        <p>A <term>Finite-State Machine (FSM)</term> is a computational model that has a finite
            set of possible states <m>S</m>, a finite set of possible input symbols (the input
            alphabet) <m>X</m>, and a finite set of possible output symbols (the output alphabet) <m>Z</m>.
            The machine can exist in one of the states at any time, and based on the machine's input and
            its current state, it can transition to any other state and produce an output. The functions
            that take in the machine's current state and its input and map them to the machine's future
            state and its output are referred to as the <em>state transition</em> function and
            the <em>output</em> function, respectively. The default state of an FSM is referred to as
            the <em>initial state</em>.</p>
    </introduction>

    <subsection xml:id="sm-definition">
        <title>Mealy State Machine</title>
        <idx>
            <h>state machines</h>
            <h>definition</h>
        </idx>
        <p> A Mealy finite-state machine is defined by the tuple <m>(S, X, Z, w, t, s_0)</m> where: <ul>
                <li>
                    <p>
                        <m>S=\{s_0, s_1, s_2,\ldots , s_n\}</m> is the state set, a finite set that
                        corresponds to the set of all memory configurations that the machine can have
                        at any time.</p>
                </li>
                <li>
                    <p>The state <m>s_0</m> is called the <em>initial state</em>.</p>
                </li>
                <li>
                    <p>
                        <m>X=\{x_0, x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                </li>
                <li>
                    <p>
                        <m>Z=\{z_0, z_1,z_2, \ldots ,z_k\}</m> is the output alphabet.</p>
                </li>
                <li>
                    <p>
                        <m>w: S\times X \to Z</m> is the output function, which specifies which
                        output symbol <m>w(s, x) \in Z</m> is written onto the output device when
                        the machine is in state <m>s</m> and the input symbol <m>x</m> is read.</p>
                </li>
                <li>
                    <p>
                        <m>t:S\times X \to S</m> is the next-state (or transition) function, which
                        specifies which state <m>t(s, x) \in S</m> the machine should move to when
                        it is currently in state <m>s</m> and it reads the input symbol <m>x</m>.</p>
                </li>
            </ul>
        </p>
    </subsection>

    <subsection>
        <title>Other Types of Finite State Machines</title>

        <subsubsection>
            <title>Moore Machine</title>
            <p> In a <term>Moore Machine</term>, the output depends <em>solely</em> on the current
                state. Unlike Mealy state machine, this machine must enter a new state for the
                output to change.</p>

            <p> A Moore machine is also represented by the 6-tuple <m>(S, X, Z, w, t, s_0)</m>
                where: <ul>
                    <li>
                        <p>
                            <m>S=\{s_0, s_1, s_2,\ldots , s_n\}</m> is the state set, and <m>s_0</m>
                is the initial state.</p>
                    </li>
                    <li>
                        <p>The state <m>s_0</m> is called the <em>initial state</em>.</p>
                    </li>
                    <li>
                        <p>
                            <m>X=\{x_0, x_1, x_2, \ldots ,x_m\}</m> is the input alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>Z=\{z_0, z_1,z_2, \ldots ,z_k\}</m> is the output alphabet.</p>
                    </li>
                    <li>
                        <p>
                            <m>w: S \to Z</m> is the output function, which specifies which output
                symbol <m>w(s) \in Z</m> associated with the machine current state <m>s</m>.</p>
                    </li>
                    <li>
                        <p>
                            <m>t:S \times X \to S</m> is the transition function, which specifies
                which next state <m>t(s, x) \in S</m> the machine should move to when its current
                state is <m>s</m> and it has the input symbol <m>x</m>.</p>
                    </li>
                </ul>
            </p>
        </subsubsection>

        <subsubsection>
            <title>Finite-State Automaton</title>
            <p>A <em>final state</em> (also known as the accepted state) is defined as a <em>special</em> predefined
                state that indicates whether an input sequence is valid or accepted by the finite-state machine.
                The set <m>F</m> of all final states is a subset of the states set <m>S</m>.</p>

            <p>A <term>Finite-State Automaton</term> is a finite-state machine <em>with no output</em>, and it is
                represented by the 5-tuple <m>(S, X, t, s_0, F)</m> where: <ul>
                <li>
                    <p>
                        <m>S=\{s_0, s_1, s_2, \ldots , s_n\}</m> is the state set, <m>s_0</m> is the initial state,
                        and <m>F</m> is the set of final states.</p>
                </li>
                <li>
                    <p>The state <m>s_0</m> is called the <em>initial state</em>.</p>
                </li>
                <li>
                    <p>The subset <m>F \subset S</m> is the set of all final states of the machine.</p>
                </li>
                <li>
                    <p><m>X=\{x_0, x_1, x_2, \ldots , x_m\}</m> is the input alphabet.</p>
                </li>
                <li>
                    <p><m>t: S \times X \to S</m> is the transition function, which specifies which next
                        state <m>t(s, x) \in S</m> the machine should move to when its current state
                        is <m>s</m> and it has the input symbol <m>x</m>.</p>
                </li>
            </ul>
            </p>

            <p>When the state machine processes a finite input sequence, it transitions through various
                states based on each input in the sequence and the current state of the machine. If, after
                processing the entire sequence, the machine lands in any of the <em>final states</em>, then
                the input sequence is considered valid (or recognized according to the machine's rules).
                Otherwise, the input sequence is rejected as invalid.</p>
        </subsubsection>

        <subsubsection>
            <title>Deterministic Finite Automaton (DFA)</title>
            <p>A <term>Deterministic Finite Automaton (DFA)</term> is a simplified automaton in which
                each state has exactly one transition for each input. DFAs are typically used for lexical
                analysis, language recognition, and pattern matching.</p>
            <aside>
                <title>Note</title>
                <p>A text parser or a string-matching application that recognizes a specific language or
                    regular expressions are real-world examples of DFA use.</p>
            </aside>
        </subsubsection>

        <subsubsection>
            <title>Nondeterministic Finite Automaton (NFA)</title>
            <p> Unlike a DFA, an <term>NFA</term> allows multiple transitions for the same input or
                even transitions without consuming input (<m>\epsilon</m>-transitions).</p>
        </subsubsection>

        <subsubsection>
            <title>Turing Machine</title>
            <p>A <term>Turing Machine</term> is an expansion of an FSM, which includes infinite tape memory
                representing both the input and output streams (shared stream). Unlike all other FSMs, a Turing
                machine can alter the input/output stream, and as such, it is capable of simulating any algorithm.
                Turing machines are the theoretical foundation for modern computation (any general-purpose computer
                executing any algorithm can be modeled as a Turing Machine).</p>
        </subsubsection>
    </subsection>

    <conclusion>
        <p>Finite state machines are a foundational concept in computer science, often associated
            with tasks related to system designs (circuits and digital computers, algorithms, etc.).
            However, the vast and rich domain of applications of state machines extends far beyond simple
            simulations to the full control logic of complex industrial processes and workflows. These tasks
            can vary in complexity, ranging from a simple parity check to managing traffic patterns, a programming
            language compiler, or natural language recognition and processing.</p>

        <p>State machines offer a structured way to model systems with discrete states and transitions. Different
            variants, such as the Mealy machine and Moore machine, have distinct characteristics and, as such,
            can adapt to various applications.</p>
    </conclusion>
</section>
