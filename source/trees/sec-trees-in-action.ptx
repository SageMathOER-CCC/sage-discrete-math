<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-trees-in-action">
    <title>Trees in Action</title>
    <introduction>
        <p>
            Imagine your task is to create a railway between all the City Colleges of Chicago (CCC) campus locations. The contract requests that you use minimal track material to save construction costs. For simplicity's sake, assume each railway is a straight line between campuses.
        </p>
    </introduction>
    <subsection xml:id="subsec-Railway-Problem">
        <title>Railway Problem</title>
        <p>
            Let's make a plan to solve our railway construction optimization problem.
            <ol>
                <li>
                    <p>
                        Find the latitude and longitude of each CCC campus location. We are using latitude and longitude because we are calculating new railway paths that do not already exist on roads. Therefore, we cannot use addresses.
                    </p>
                </li>
                <li>
                    <p>
                        Calculate the distances between the locations. The distance is a straight line between campuses. By straight line, we mean there are no turns on the track. However, we do account for the curve of the Earth.
                    </p>
                </li>
                <li>
                    <p>
                        Make a Graph of the CCC campuses. Each location is a node. The weight of the edges represents the distance between locations.
                    </p>
                </li>
                <li>
                    <p>
                        Find the minimum spanning tree (MST) of the CCC Graph.
                    </p>
                </li>
            </ol>
        </p>
    </subsection>
    <subsection xml:id="subsec-location-distances">
        <title>Location Distances</title>
        <table>
            <title>City Colleges of Chicago Locations</title>
            <tabular row-headers="no" left="medium" right="medium" top="medium" bottom="medium">
                <row header="yes" bottom="medium">
                    <cell>Name</cell>
                    <cell>(Latitude, Longitude)</cell>
                </row>
                <row>
                    <cell>Harold Washington College</cell>
                    <cell>(41.88609733324964, -87.62682604591349)</cell>
                </row>
                <row>
                    <cell>Harry S Truman College</cell>
                    <cell>(41.9646769664519, -87.65901943241516)</cell>
                </row>
                <row>
                    <cell>Kennedy-King College</cell>
                    <cell>(41.77847328856264, -87.6435785385309)</cell>
                </row>
                <row>
                    <cell>Malcolm X College</cell>
                    <cell>(41.87800548491064, -87.67453475017268)</cell>
                </row>
                <row>
                    <cell>Olive-Harvey College</cell>
                    <cell>(41.71006715754713, -87.5886722734757)</cell>
                </row>
                <row>
                    <cell>Richard J. Daley College</cell>
                    <cell>(41.75677704810169, -87.72315805813204)</cell>
                </row>
                <row>
                    <cell>Wilbur Wright College</cell>
                    <cell>(41.95836512405638, -87.78738482318016)</cell>
                </row>
            </tabular>
        </table>
        <figure>
            <media>
                <image source="ccc_map.png"/>
            </media>
            <caption>City Colleges of Chicago</caption>
        </figure>
        <p>
            Now, let's calculate the distances between campus locations. We will first create a <c>dictionary</c> to store the campus name, latitude, and longitude values.
        </p>
        <sage>
            <input>
                lat_long = {
                    "HW": (41.88609733324964, -87.62682604591349),
                    "HT": (41.9646769664519, -87.65901943241516),
                    "KK": (41.77847328856264, -87.6435785385309),
                    "MX": (41.87800548491064, -87.67453475017268),
                    "OH": (41.71006715754713, -87.5886722734757),
                    "RD": (41.75677704810169, -87.72315805813204),
                    "WW": (41.95836512405638, -87.78738482318016)
                }
                lat_long
            </input>
        </sage>
        <p>
            Since the Earth is curved, we cannot use the Euclidean distance. We will use the Haversine formula instead. Note that the Haversine formula still produces an approximation because the Earth is not a perfect sphere. Here is a function to compute the Haversine formula.
        </p>
        <sage>
            <input>
                def haversine(lat1, lon1, lat2, lon2):
                    '''Reference: https://cs.nyu.edu/~visual/home/proj/tiger/gisfaq.html'''
                    import math

                    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])

                    dlat = lat2 - lat1
                    dlon = lon2 - lon1

                    a = math.sin(dlat / 2)**2 + \
                        math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2

                    c = 2 * math.asin(min(1.0, math.sqrt(a)))

                    # Earth's approximate radius in kilometers
                    R = 6367.0

                    distance = R * c

                    return distance

                print("Ready to use `haversine()`")
            </input>
        </sage>
        <p>
            Now we can make an edge <c>list</c>. We will represent each campus as a node with the initials of the college name. The weight of the edge will represent the Haversine value between the locations. For example, express the route between Harold Washington College and Harry S Truman College as <c>("HW", "HT", Haversine)</c>.
        </p>
        <sage>
            <input>
                distances = []
                colleges = list(lat_long.items())
                for i in range(len(colleges)):
                    college1, (lat1, lon1) = colleges[i]
                    for j in range(i + 1, len(colleges)):
                        college2, (lat2, lon2) = colleges[j]
                        dist = haversine(lat1, lon1, lat2, lon2)
                        distances.append((college1, college2, dist))

                print("\nDistances between colleges (in kilometers):")
                for edge in distances:
                    college1, college2, dist = edge
                    print(f"{college1} - {college2}: {dist:.2f} km")
            </input>
        </sage>
    </subsection>
    <subsection xml:id="subsec-CCC-Graph">
        <title>Graph</title>
        <p>
            Swap <m>(Latitude, Longitude)</m> coordinates for plotting with <m>(x,y)</m> coordinates.
        </p>
        <sage>
            <input>
                pos = {college: (lon, lat) for college, (lat, lon) in lat_long.items()}
                pos
            </input>
        </sage>
        <p>
            Create a <c>Graph</c> from the edge <c>list</c>:
        </p>
        <sage>
            <input>
                G = Graph(distances)
                G.show(
                    pos=pos,  # Positions are (longitude, latitude)
                    edge_labels=True,
                    vertex_size=500,
                    figsize=20,
                    title="CCC Distance Graph"
                )
            </input>
        </sage>
    </subsection>
    <subsection xml:id="subsec-Railway">
        <title>Railway</title>
        <p>
            So far, we have encountered various concepts for connecting a graph's vertices, including the Hamilton path and the MST. Let's consider what technique is best suited for solving the problem of constructing a railway that optimizes material costs.
        </p>
        <p>
            The previous chapter used the traveling salesperson algorithm to optimize a delivery route. Since we aim to optimize material costs, you might think of following a similar approach: apply the traveling salesperson algorithm, eliminate the greatest edge from the Hamilton circuit, and design the railway with the minimum Hamilton path. If we take a Hamilton circuit
            and eliminate one edge, we obtain a spanning tree. While the Hamilton path optimizes graph traversal by visiting each vertex exactly once in a single path, it does not guarantee that all vertices are connected with the minimal total weight.
        </p>
        <p>
            In a Hamilton path, the requirement to visit each vertex in a single path can force the inclusion of high-weight edges. Alternatively, the MST is not restricted by the requirement of connecting vertices with a path. The MST can avoid high-weight edges by connecting vertices without regard to forming a path as long as the graph remains connected and acyclic. Although the minimum Hamilton path is one of many possible spanning trees, it is not an MST. Prim's Algorithm ensures the weight of the spanning tree is minimal because, at each iteration, it selects the smallest-weight edge.
        </p>
        <p>
            Let's find the MST edge <c>list</c> of the campus locations with the <c>min_spanning_tree(by_weight=True)</c> function.
        </p>
        <sage>
            <input>
                mst = G.min_spanning_tree(by_weight=True)
                mst
            </input>
        </sage>
        <p>
            Visualize the MST with the vertex positions mapped to the geographical coordinates of each campus location.
        </p>
        <sage>
            <input>
                Graph(mst).show(
                    pos=pos,
                    edge_labels=True,
                    vertex_size=500,
                    figsize=15,
                    title="CCC Minimum Spanning Tree"
                )
            </input>
        </sage>
    </subsection>
    <subsection xml:id="subsec-Conclusion">
        <title>Conclusion</title>
        <p>
            In this exercise, we only optimized construction material costs. In a real-world scenario, we may want to create a railway that optimizes both travel time and material costs. In the case of the Chicago L train system, the railway resembles a tree when ignoring the downtown Loop. The L receives criticism for its lack of interconnectivity. For example, finding an efficient route connecting the end of the Blue Line with the end of the Red Line is challenging because a traveler may need to commute all the way downtown from one end of the railway to reach another end. As an interesting challenge, you can optimize both travel time and construction costs.
        </p>
    </subsection>
</section>