<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="search-algorithms" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Search Algorithms</title><idx><h>search algorithms</h></idx>
    <p>
        The graph <m>G' = (V', E')</m> is a <term>subgraph</term> of <m>G = (V, E)</m> if <m>V' \subseteq V</m> and <m>E' \subseteq \{\{u, v\} \in E \ |\ u, v \in V'\}</m>.
    </p>
    <idx><h>subgraph</h></idx>
    <idx><h>spanning subgraph</h></idx>
    <idx><h>spanning tree</h></idx>
    <p>
        The subgraph <m>G' = (V', E')</m> is a <term>spanning subgraph</term> of <m>G = (V, E)</m> if <m>V' = V</m>.
    </p>
    <p>
        A <term>spanning tree</term> for the graph <m>G</m> is a spanning subgraph of <m>G</m> that is a tree.
    </p>
    <p>
        Given a graph, various algorithms can calculate a spanning tree, including depth-first search and breadth-first search.
    </p>
    <idx><h>Breadth-first search</h></idx>
    <p>
        <term>Breadth-first search algorithm</term>
        <ol>
            <li>
                <p>
                    Choose a vertex of the graph (root) arbitrarily.
                </p>
            </li>
            <li>
                <p>
                    Travel all the edges incident with the root vertex.
                </p>
            </li>
            <li>
                <p>
                    Give an order to this set of new vertices added.
                </p>
            </li>
            <li>
                <p>
                    Consider each of these vertices as a root, in order, and add all the unvisited incident edges that do not produce a cycle.
                </p>
            </li>
            <li>
                <p>
                    Repeat the method with the new set of vertices.
                </p>
            </li>
            <li>
                <p>
                    Follow the same procedure until all the vertices are visited.
                </p>
            </li>
        </ol>
        The output of this algorithm is a spanning tree.
    </p>
    <p>
        The <c>breadth_first_search()</c> function provides a flexible method for traversing both directed and undirected graphs. Let's consider the following graph:
    </p>
    <sage>
        <input>
            G = Graph({"a":{"c":8, "e":1}, "b":{"c":6, "d":4}, "c":{"e":2}, "d":{"a":5, "c":4}})
            G.show()
            print(list(G.breadth_first_search(start="a", report_distance=True)))
        </input>
    </sage>
    <p>
        In the example above, the <c>start</c> parameter begins the traversal at vertex <c>a</c>. The <c>report_distance=True</c>, parameter reports pairs in the format <c>(vertex, distance)</c>. Distance is the length of the path from the start vertex. From the output above, we see:
        <ul>
            <li>
                <p>
                    The distance from vertex <c>a</c> to vertex <c>a</c> is <c>0</c>.
                </p>
            </li>
            <li>
                <p>
                    The distance from vertex <c>a</c> to vertex <c>d</c> is <c>1</c>.
                </p>
            </li>
            <li>
                <p>
                    The distance from vertex <c>a</c> to vertex <c>e</c> is <c>1</c>.
                </p>
            </li>
            <li>
                <p>
                    The distance from vertex <c>a</c> to vertex <c>c</c> is <c>1</c>.
                </p>
            </li>
            <li>
                <p>
                    The distance from vertex <c>a</c> to vertex <c>b</c> is <c>2</c>.
                </p>
            </li>
        </ul>
    </p>
    <p>
        We can also set the parameter <c>edges=True</c> to return the edges of the BFS tree. Sage will raise an error if you use the <c>edges</c> and <c>report_distance</c> parameters simultaneously.
    </p>
    <sage>
        <input>
            G = Graph({"a":{"c":8, "e":1}, "b":{"c":6, "d":4}, "c":{"e":2}, "d":{"a":5, "c":4}})
            s = list(G.breadth_first_search("a", edges=True))
            print(s)
            Graph(s)
        </input>
    </sage>
    <p>
        The above graph is a spanning tree, but not necessarily a minimum spanning tree. Let's check how many spanning trees exist.
    </p>
    <sage>
        <input>
            G.spanning_trees_count()
        </input>
    </sage>
    <p>
        Iterate over all the spanning trees of a graph with <c>spanning_trees()</c>.
    </p>
    <sage>
        <input>
            G = Graph({"a":{"c":8, "e":1}, "b":{"c":6, "d":4}, "c":{"e":2}, "d":{"a":5, "c":4}})
            spanning_trees = list(G.spanning_trees(labels=True))
            for i, tree in enumerate(spanning_trees):
                print(f"Spanning Tree {i + 1}: {tree.edges()}")
                show(tree.plot())
        </input>
    </sage>

    <idx><h>minimal spanning tree</h></idx>
    <p>
        Given a weighted graph of all possible spanning trees we can calculate, we may be interested in the minimal one. A <term>minimal spanning tree</term> is a spanning tree whose sum of weights is minimal. Prim's Algorithm calculates a minimal spanning tree.
    </p>
    <idx><h>Prim's algorithm</h></idx>
    <p>
        <term>Prim's Algorithm</term>: Keep two disjoint sets of vertices. One <m>(L)</m> contains vertices that are in the growing spanning tree, and the other <m>(R)</m> that are not in the growing spanning tree.
        <ol>
            <li>
                <p>
                    Choose a vertex <m>u \in V</m> arbitrarily. At this step, <m>L = \{u\}</m> and <m>R = V - \{u\}</m>.
                </p>
            </li>
            <li>
                <p>
                    In <m>R</m>, select the cheapest vertex connected to the growing spanning tree <m>L</m> and add it to <m>L</m>
                </p>
            </li>
            <li>
                <p>
                    Follow the same procedure until all the vertices are in <m>L</m>
                </p>
            </li>
        </ol>
        The output of this algorithm is a minimal spanning tree.
    </p>
    <sage>
        <input>
            G = Graph({"a":{"c":8, "e":1}, "b":{"c":6, "d":4}, "c":{"e":2}, "d":{"a":5, "c":4}})
            G.show(edge_labels = True)
        </input>
    </sage>
    <p>
        We can ask Sage for the minimal spanning tree of this graph. By running <c>Graph.min_spanning_tree??</c> We can see that <c>min_spanning_tree()</c> uses a variation of Prim's Algorithm by default. We can also use other algorithms such as Kruskal, Boruvka, or NetworkX.
    </p>
    <aside>
        <title>Notes</title>
        <p>
            Minimal spanning trees influence the efficient design of networks and roads.
        </p>
    </aside>
    <sage>
        <input>
            G.min_spanning_tree(by_weight=True)
        </input>
    </sage>
    <p>
        From the output of <c>min_spanning_tree(by_weight=True)</c>, we see an edge <c>list</c> of the minimal spanning tree. Each element of the edge lis is a <c>tuple</c> where the first two values are vertices, and the third value is the edge weight or label.
    </p>
    <p>
        Let's visualize the minimal spanning tree.
    </p>
    <sage>
        <input>
            h = Graph(G.min_spanning_tree(by_weight=True))
            h.show(edge_labels = True)
        </input>
    </sage>
    <p>
        Let's define a function to view the minimal spanning tree in the context of the original graph. The function parameters include:
        <ul>
            <li>
                <p>
                    <c>graph</c>: A SageMath Graph object.
                </p>
            </li>
            <li>
                <p>
                    <c>mst_color</c>: Color for edges part of the MST (default: <c>'darkred'</c>).
                </p>
            </li>
            <li>
                <p>
                    <c>non_mst_color</c>: Color for edges not part of the MST (default: <c>'lightblue'</c>).
                </p>
            </li>
            <li>
                <p>
                    <c>figsize</c>: Dimensions for the graph image.
                </p>
            </li>
        </ul>
    </p>
    <sage>
        <input>
            def visualize_mst(input_graph, mst_color='darkred', non_mst_color='lightblue', figsize=None):
                try:
                    if not input_graph.is_connected():
                        print("The graph must be connected")
                        return

                    mst_edges = input_graph.min_spanning_tree(by_weight=True)
                    print("MST Edges:", mst_edges)
                    Graph(mst_edges).show(edge_labels=True, figsize=figsize, edge_color=mst_color)

                    edge_colors = {mst_color: [], non_mst_color: []}

                    mst_edge_set = set((v1, v2) for v1, v2, _ in mst_edges)

                    for edge in input_graph.edges():
                        v1, v2, _ = edge
                        if (v1, v2) in mst_edge_set or (v2, v1) in mst_edge_set:
                            edge_colors[mst_color].append((v1, v2))
                        else:
                            edge_colors[non_mst_color].append((v1, v2))

                    print("MST overlaid on the original graph:")
                    p = input_graph.plot(edge_labels=True, edge_colors=edge_colors, figsize=figsize)
                    show(p)

                except Exception as e:
                    print("Error:", e)
        </input>
    </sage>
    <p>
        Let's generate a random graph and view the minimal spanning tree.
    </p>
    <sage>
        <input>
            import random

            vertices = 5
            G = Graph([(i, j, random.randint(1, 20)) for i in range(vertices) for j in range(i+1, vertices)])

            visualize_mst(G)
        </input>
    </sage>
    <p>
        The following graph contains 9 vertices.
    </p>
    <sage>
        <input>
            import random

            vertices = 9
            G = Graph([(i, j, random.randint(1, 20)) for i in range(vertices) for j in range(i+1, vertices)])

            visualize_mst(G, figsize=10)
        </input>
    </sage>
    <p>
        The following graph contains 15 vertices.
    </p>
    <sage>
        <input>
            import random

            vertices = 15
            G = Graph([(i, j, random.randint(1, 20)) for i in range(vertices) for j in range(i+1, vertices)])

            visualize_mst(G, figsize=10)
        </input>
    </sage>
</section>
