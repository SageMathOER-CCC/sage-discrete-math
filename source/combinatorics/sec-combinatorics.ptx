<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-combinatorics" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Combinatorics</title>

    <!-- Factorial Function Subsection -->
    <subsection>
        <title>Factorial Function</title><idx><h>factorial</h></idx>
        <p>
            The factorial of a non-negative integer <m>n</m>, denoted by <m>n!</m>, is the product of all positive integers less than or equal to <m>n</m>. In Sage, the <c>factorial()</c> function computes this value, which is essential in permutations and combinations.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                Factorials play a crucial role in machine learning, particularly in algorithms like Naive Bayes and Hidden Markov Models. These models use probabilities, and when dealing with large datasets, factorial calculations help in determining how different sequences of events or features might occur, especially when considering all possible permutations of events over time.
            </p>
        </aside>
        <p>
            For example, to compute the factorial of 5:
        </p>
        <sage>
            <input>
                factorial(5)
            </input>
            <output></output>
        </sage>
    </subsection>

    <!-- Combinations Subsection -->
    <subsection>
        <title>Combinations</title><idx><h>combination</h></idx>
        <p>
            The combination <m>(n, k)</m> is an unordered selection of <m>k</m> objects from a set of <m>n</m> objects.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                Combinations are frequently used in genetics to determine how traits are passed down from parents to offspring. For example, given a set of genes, combinations help calculate how many different ways a particular trait can be inherited by offspring. This has practical implications in predicting probabilities of diseases or genetic disorders in families.
            </p>
        </aside>
        <p>
            For instance, to calculate the number of ways to choose 3 elements from a set of 5:
        </p>
        <sage>
            <input>
                Combinations(5, 3).cardinality()
            </input>
            <output></output>
        </sage>
        <idx><h>binomial</h></idx>
        <p>
            Another method would be using the <c>binomial()</c> function.
        </p>
        <sage>
            <input>
                binomial(5, 3)
            </input>
            <output></output>
        </sage>
    </subsection>

    <!-- Permutations Subsection -->
    <subsection>
        <title>Permutations</title><idx><h>permutation</h></idx>
        <p>
            A permutation <m>(n, k)</m> is an ordered selection of <m>k</m> objects from a set of <m>n</m> objects.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                Permutations are essential in cryptography, where the order of elements (such as characters in a password or keys) determines the strength of encryption. By understanding all possible permutations of a set of characters, cryptographers can estimate the complexity of breaking encryption algorithms, making systems more secure from attacks like brute-forcing.
            </p>
        </aside>
        <p>
            For instance, to calculate the number of ways to choose 3 elements from a set of 5 when the order matters, we use the <c>Permutations()</c> and the <c>cardinality()</c> functions.
        </p>
        <sage>
            <input>
                Permutations(5, 3).cardinality()
            </input>
            <output></output>
        </sage>
        <p>
            To display the set of permutations for 3 chosen elements from a set of 5 in order, we use the <c>Permutations()</c> function and the use the <c>Set()</c> function.
        </p>
        <sage>
            <input>
                A = Permutations(5, 3)
                Set(A)
            </input>
            <output></output>
        </sage>
        <p>
            When <m>n = k</m>, we can calculate permutations of <m>n</m> elements.
        </p>
        <p>
            To calculate the permutation of a set with 3 elements, we use the <c>Permutations()</c> and the <c>cardinality()</c> functions.
        </p>
        <sage>
            <input>
                Permutations(3).cardinality()
            </input>
            <output></output>
        </sage>
        <p>
            Similarly, we can also show the sets of permutations:
        </p>
        <sage>
            <input>
                A = Permutations(3)
                Set(A)
            </input>
            <output></output>
        </sage>
        <p>
            We can also specify the elements:
        </p>
        <sage>
            <input>
            A = Permutations(['a', 'b', 'c'])
            
            for f in Set(A):
                print(f)
            </input>
            <output></output>
        </sage>
    </subsection>

</section>
