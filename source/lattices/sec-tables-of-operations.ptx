<section xml:id="sec-tables-of-operations">
    <title>Tables of Operations</title>
    <introduction>
        <p>
            This section delves into the representation of meet <m>(⊓)</m> and join <m>(⊔)</m> operations within lattices using operation tables. Such tables are pivotal for visualizing the algebraic structure of lattices and understanding how elements combine under each operation.
        </p>
    </introduction>

    <subsection xml:id="meet-operation-table">
        <title>Meet Operation Table</title>
        <p>
            The meet operation table illustrates the greatest lower bound, or meet, for every pair of elements in the lattice. 
        </p>
        <p>
            For outputting the table as a matrix, we need to specify that the poset is indeed a lattice, thus requiring us to use the function <c>LatticePoset()</c>. Then we can use the function <c>meet_matrix()</c> to process the table. 
        </p>
        <sage>
            <input>
                L = LatticePoset((['a', 'b', 'c', 'd', 'e', 'f', 'g'], 
                           [['a', 'b'], ['a', 'c'], ['b', 'd'], ['c', 'd'], 
                            ['c', 'e'], ['d', 'f'], ['e', 'f'], ['f', 'g']]))
                P = L.meet_matrix(); L
                show(P)
            </input>
            <output>
                # Displays the meet operation table as a matrix.
            </output>
        </sage>
        <p>
            From the output matrix, we can verify the <m>a_{ij}</m> are the position of the elements in the poset instead of the actual values. Sage does not have a specific function to output the exact values, but we can define our own function for this purpose.
        </p>
        <sage>
            <input>
                L = LatticePoset((['a', 'b', 'c', 'd', 'e', 'f', 'g'], 
                           [['a', 'b'], ['a', 'c'], ['b', 'd'], ['c', 'd'], 
                            ['c', 'e'], ['d', 'f'], ['e', 'f'], ['f', 'g']]))
                P = L.meet_matrix()
                elements = L.list()
                K = [['' for _ in range(P.ncols())] for _ in range(P.nrows())]
                for i in range(P.nrows()):
                    for j in range(P.ncols()):
                        K[i][j] = elements[P[i,j]]

                for row in K:
                    print(row)
            </input>
            <output>
            </output>
        </sage>

    </subsection>

    <subsection xml:id="join-operation-table">
        <title>Join Operation Table</title>
        <p>
            Conversely, the join operation table presents the least upper bound, or join, for each pair of lattice elements. 
        </p>
        <p>
            Similarly, we can use the function <c>join_matrix()</c> to process the table. 
        </p>
        <sage>
            <input>
                L = LatticePoset((['a', 'b', 'c', 'd', 'e', 'f', 'g'], 
                           [['a', 'b'], ['a', 'c'], ['b', 'd'], ['c', 'd'], 
                            ['c', 'e'], ['d', 'f'], ['e', 'f'], ['f', 'g']]))
                P = L.join_matrix(); L
                show(P)
            </input>
            <output>
                # Displays the join operation table as a matrix.
            </output>
        </sage>
        <p>
            We can also output the elements of the poset by slightly changing the function we previously defined.
        </p>
        <sage>
            <input>
                L = LatticePoset((['a', 'b', 'c', 'd', 'e', 'f', 'g'], 
                           [['a', 'b'], ['a', 'c'], ['b', 'd'], ['c', 'd'], 
                            ['c', 'e'], ['d', 'f'], ['e', 'f'], ['f', 'g']]))
                P = L.join_matrix()
                elements = L.list()
                K = [['' for _ in range(P.ncols())] for _ in range(P.nrows())]
                for i in range(P.nrows()):
                    for j in range(P.ncols()):
                        K[i][j] = elements[P[i,j]]

                for row in K:
                    print(row)
            </input>
            <output>
            </output>
        </sage>
    </subsection>


</section>
