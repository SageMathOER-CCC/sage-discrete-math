<section xml:id="sec-recursion" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Recursion</title>
    <introduction>
        <p>
            Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem. This approach is extensively used in mathematics and computer science, especially in the computation of binomial coefficients, the evaluation of polynomials, and the generation of sequences.
        </p>
    </introduction>

    <!-- Recursion in Sequences -->
    <subsection>
        <title>Recursion in Sequences</title>
        <p>
            A recursive sequence is defined by one or more base cases and a recursive step that relates each term to its predecessors.
        </p>
        <p>
            Here, <c>s</c> is a function representing the sequence. The equation <c>eqn</c> defines the recursive relation <m>s_n = s_{n-1} + 2\cdot s_{n-2}</m>. The <c>rsolve()</c> function is then used to find a closed-form solution to this recurrence, given the initial conditions <m>s_0 = 2</m> and <m>s_1 = 7</m>. At last, we use the <c>SR()</c> function to convert from Python notation to mathematical notation.
        </p>
        <sage>
            <input>
                from sympy import Function, rsolve
                from sympy.abc import n
                s = Function('s')
                eqn = s(n) - s(n-1) - 2*s(n-2)
                sol = rsolve(eqn, s(n), {s(0): 2, s(1): 7})
                show(SR(sol))
            </input>
            <output></output>
        </sage>
        <p>
            We can use the <c>show()</c> function to make the output visually more pleasing; you can try removing it and see how the output looks.
        </p>
        <p>
            Similarly, the Fibonacci sequence is another example of a recursive sequence, defined by the base cases <m>F_0 = 0</m> and <m>F_1 = 1</m>, and the recursive relation <m>F_n = F_{n-1} + F_{n-2}</m> for <m>n &gt; 1</m>. This sequence is a cornerstone example in the study of recursion.
        </p>
        <sage>
            <input>
                from sympy import Function, rsolve
                from sympy.abc import n
                F = Function('F')
                fib_eqn = F(n) - F(n-1) - F(n-2)
                fib_sol = rsolve(fib_eqn, F(n), {F(0): 0, F(1): 1})
                show(SR(fib_sol))
            </input>
            <output></output>
        </sage>
        <p>
            The <c>show()</c> function is again used here to present the solution in a more accessible mathematical notation, illustrating the power of recursive functions to describe complex sequences with simple rules.
        </p>
    </subsection>    

    <!-- Recursion with Binomial Coefficients -->
    <subsection>
        <title>Recursion with Binomial Coefficients</title>
        <p>
            Binomial coefficients, denoted as <m>\binom{n}{k}</m>, count the number of ways to choose <m>k</m> elements from an <m>n</m>-element set. They can be defined recursively. Sage can compute binomial coefficients using the <c>binomial(n, k)</c> function.
        </p>
        <sage>
            <input>
                binomial(5, 3)
            </input>
            <output></output>
        </sage>
        <p>
            We can also explore the recursive nature of binomial coefficients using Python syntax.
        </p>
        <sage>
            <input>
                def binomial_recursive(n, k):
                    if k == 0 or k == n:
                        return 1
                    else:
                        return binomial_recursive(n-1, k-1) + binomial_recursive(n-1, k)

                binomial_recursive(5, 3)
            </input>
            <output></output>
        </sage>
        <p>
            This function implements the recursive formula <m>\binom{n}{k} = \binom{n-1}{k-1} + \binom{n-1}{k}</m>, with base cases <m>\binom{n}{0} = \binom{n}{n} = 1</m>.
        </p>
    </subsection>

</section>
