<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
    <!ENTITY cup "entity-value">
    <!ENTITY cap "entity-value">
    <!ENTITY Cross "entity-value">
]>

<section xml:id="sec-operation-on-sets" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Operations on Sets</title>

    <subsection>
        <title>Union of Sets</title>
        <idx><h>set operations</h><h>union</h></idx>
        <p>
            There are two distinct methods available in Sage for calculating unions.
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>union()</c> function to calculate <m>A ∪ B</m>.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                The union operation is relevant in real-world scenarios, such as merging two distinct music playlists into one. In this case, any song that appears in both playlists will only be listed once in the merged playlist.

            </p>
        </aside>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6]) 
                A.union(B)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> | </c> operator to perform the union operation.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A | B 
            </input>
        </sage>

    </subsection>


    <subsection>
        <title>Intersection of Sets</title>
        <idx><h>set operations</h><h>intersection</h></idx>
        <p>
            Similar to union, there are two methods of using the intersection function in Sage.
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>intersection()</c> function to calculate <m>A ∩ B</m>.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                A practical application of set intersection could be finding common members between two different social media groups. Members who belong to both groups represent the intersection of these groups.
            </p>
        </aside> 
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A.intersection(B)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> &amp; </c> operator to perform the intersection operation.  
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A &amp; B
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Difference of Sets</title>
        <idx><h>set operations</h><h>difference</h></idx>
        <p>
            We have two methods to solve for the difference as well.
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>difference()</c> function to calculate the difference between 2 sets.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                In a real-life context, this can be seen as identifying items on a restaurant menu (set A) that you have not yet tried (set B), with A - B representing the new dishes to explore.
            </p>
        </aside>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A.difference(B)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> - </c> operator to perform the difference operation.  
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A - B 
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Multiple Sets</title>
        <p>
            When performing operations involving multiple sets, we can repeat the operations to get our results. Here is an example:
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m>, <m>B = \{3, 4, 5, 6\}</m> and <m>C = \{5, 6, 7\}</m>. To find the union of all three sets, we will repeat the <c>union()</c> function.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6]) 
                C = Set([5, 6, 7]) 
                A.union(B).union(C)
            </input>
        </sage>
        <p>
            Alternatively, we can repeat the <c> | </c> operator to perform the union operation.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                C = Set([5, 6, 7])
                A | B | C
            </input>
        </sage>
        <p>
            The <c>intersection()</c> and <c>difference()</c> functions can perform similar chained operations on multiple sets.
        </p>

    </subsection>


    <subsection>
        <title>Complement of Sets</title>
        <idx><h>set operations</h><h>compliment</h></idx>
        <p>
            Let <m>U = \{1, 2, 3, 4, 5, 6, 7, 8, 9\}</m> be the universal set. Given the set <m>A = \{1, 2, 3, 4, 5\}</m>. We can use the <c>difference()</c> function to find the complement of <m>A</m>.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                This is analogous to having a list of all possible ice cream flavors (U) and identifying those flavors you have yet to try (A').
            </p>
        </aside>
        <sage>
            <input>
                U = Set([1, 2, 3, 4, 5, 6, 7, 8, 9])
                A = Set([1, 2, 3, 4, 5])
                U.difference(A)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> - </c> operator.  
        </p>
        <sage>
            <input>
                U = Set([1, 2, 3, 4, 5, 6, 7, 8, 9])
                A = Set([1, 2, 3, 4, 5])
                U - A
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Cartesian Product of Sets</title>
        <idx><h>set operations</h><h>Cartesian product</h></idx>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>D = \{x, y\}</m>. We can use the <c>cartesian_product()</c> and <c>Set()</c> functions to display the Cartesian product <m>A × D</m>.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                This concept can be applied in situations like determining all possible combinations of two different sets, such as shirt colors and pants styles in a wardrobe.
            </p>
        </aside>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                D = Set(['x', 'y'])
                Set(cartesian_product([A, D]))
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c>.</c> notation to find the Cartesian product.
        </p>
        <sage>
            <input>
            A = Set([1, 2, 3, 4, 5])
            D = Set(['x', 'y'])
            Set(A.cartesian_product(D))
            </input>
        </sage>
    </subsection>


    <subsection>
        <aside>
            <title>Notes</title>
            <p>
                Exploring the power set of a set can be particularly useful in fields such as combinatorics, probability theory, and computer science, where understanding the relationships between subsets of a given set is crucial.
            </p>
        </aside>
        <title>Power Set of Sets</title>
        <idx><h>set operations</h><h>power set</h></idx>
        <p>
            The power set of a set <m>A</m> is the set of all subsets of <m>A</m>, including the empty set and <m>A</m> itself. Sage offers several ways to create a power set including the <c>Subsets()</c> and <c>powerset()</c> functions. We will demonstrate the use cases of both functions. While the <c>powerset()</c> function is more flexible, the <c>Subsets()</c> function is more user-friendly due to the built-in <c>Set</c> methods.
        </p>
        <p>
            The <c>Subsets()</c> function returns all subsets of a finite set in no particular order. Here we will find the power set of the set of colors of the rainbow.
        </p>
        <sage>
            <input>
                rainbow = Set(["red", "orange", "yellow", "green", "blue", "indigo", "violet"])
                color_combos = Subsets(rainbow)
                color_combos
            </input>
        </sage>
        <p>
            We can confirm that the empty set and the set itself are included in the power set.
        </p>
        <sage>
            <input>
                Set([]) in color_combos
            </input>
        </sage>
        <sage>
            <input>
                rainbow in color_combos
            </input>
        </sage>
        <p>
            We can find the total number of subsets with <c>cardinality()</c> method.
        </p>
        <sage>
            <input>
                color_combos.cardinality()
            </input>
        </sage>
        <p>
            We can view the subsets of a set as a <c>list</c> of <c>Sets</c>.
        </p>
        <sage>
            <input>
                color_combos.list()
            </input>
        </sage>
        <p>
            We can retrieve a random element from the power set with the <c>random_element()</c> method.
        </p>
        <sage>
            <input>
                color_combos.random_element()
            </input>
        </sage>
        <p>
            There are limitations to the <c>Subsets()</c> function. For example, the <c>Subsets()</c> function returns sets that often include non-hashable objects. Observe the error message when trying to create a power set of a list containing a list.
        </p>
        <sage>
            <input>
                non_hashable_elements = [1, [2, 3], 4]
                Subsets(non_hashable_elements).list() 
            </input>
        </sage>
        <p>
            The <c>powerset()</c> function returns an iterator over the <c>list</c> of all subsets in no particular order. The <c>powerset()</c> function is ideal when working with non-hashable objects.
        </p>
        <sage>
            <input>
                non_hashable_elements = [1, [2, 3], 4]
                list(powerset(non_hashable_elements))
            </input>
        </sage>
        <p>
            The <c>powerset()</c> function supports infinite sets. Let's generate the first 7 subsets from the power set of integers.
        </p>
        <sage>
            <input>
                power_set_integers = powerset(ZZ)

                i = 0
                for subset in power_set_integers:
                    print(subset)
                    i += 1
                    if i == 7:
                        break
            </input>
        </sage>
        <p>
            While the <c>Subsets()</c> function can represent infinite sets symbolically, it is not practical. Observe the error message when trying to retrieve a random element from <c>Subsets(ZZ)</c>
        </p>
        <sage>
            <input>
                powerset_of_integers = Subsets(ZZ)
                powerset_of_integers
            </input>
        </sage>
        <sage>
            <input>
                powerset_of_integers.random_element()
            </input>
        </sage>
        <p>
            Pay close attention to the capitalization of function names. Notice the lowercase <c>s</c> in <c>subsets()</c>, which is an alias for <c>powerset()</c>.
        </p>
    </subsection>

</section>