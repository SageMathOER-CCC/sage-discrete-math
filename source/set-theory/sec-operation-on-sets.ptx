<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
    <!ENTITY cup "entity-value">
    <!ENTITY cap "entity-value">
    <!ENTITY Cross "entity-value">
]>

<section xml:id="sec-operation-on-sets" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Operations on Sets</title>

        <!-- Set Membership Check Subsection -->
        <subsection>
             <title>Set Membership Check</title>
            <p>
               Sage allows you to easily check whether a certain element belongs to a set. You can use the <c>in</c> operator to check membership, which returns <c>True</c> if the element is in the set and <c>False</c> otherwise.
            </p>
            <p>
                Let's consider <m>A = \{1, 2, 3, 4, 5\}</m>. We can check if the number 3 is in set A:
            </p>
            <aside>
                <title>Tips!</title>
                <p>
                    For organizations such as clubs, gyms, or online subscription services, set membership checks can be used to validate if a user is a member or subscriber. This can help control access to facilities or content.
                </p>
            </aside>        
            <sage>
                <input>
                A = Set([1, 2, 3, 4, 5])
                3 in A
                </input>
                <output></output>
            </sage>
            <p>
                We also can check if <m>B = \{3, 4, 5, 6\}</m> is a subset of A by using the <c>Subsets</c> function to generate a set S with all the subsets of A. Then we use the <c>in</c> function to check whether B belongs to the subset of A.
            </p>
            <sage>
                <input>
                A = Set([1, 2, 3, 4, 5])
                S = Subsets(A)
                B = Set([3, 4, 5, 6])
                B in S
                </input>
                <output></output>
            </sage>
        </subsection>

        <!-- Set Union Subsection -->
        <subsection>
            <title>Union of Sets</title>
            <p>
                There are two distinct methods available in Sage for calculating unions.
            </p>

               <p>
                    Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>union()</c> function to calculate <m>A ∪ B</m>.
               </p>
                <aside>
                    <title>Tips!</title>
                    <p>
                        This operation can be visualized in real-world scenarios such as merging two distinct music playlists into one. In this case, any song that appears in both playlists will only be listed once in the merged playlist.
                    </p>
                </aside>  
            <sage>
                <input>
                    A = Set([1, 2, 3, 4, 5])
                    B = Set([3, 4, 5, 6]) 
                    A.union(B)
                </input>
                <output></output>
                </sage>
                <p>
                    Alternatively, we can also use the <c> | </c> operator to perform the union operation.  
                </p>
                <sage>
                    <input>
                        A = Set([1, 2, 3, 4, 5])
                        B = Set([3, 4, 5, 6])
                        A | B 
                    </input>
                    <output></output>
                  </sage>

        </subsection>

        <!-- Set Intersection Subsection -->
        <subsection>
            <title>Intersection of Sets</title>
            <p>
                Similar to union, there are two methods of using the intersection function in sage.
            </p>
                <p>
                    Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>intersection()</c> function to calculate <m>A ∩ B</m>.
                </p>
                <aside>
                    <title>Tips!</title>
                    <p>
                        A practical application of set intersection could be finding common members between two different social media groups. Members who belong to both groups represent the intersection of these groups.
                    </p>
                </aside>        
                <sage>
                    <input>
                        A = Set([1, 2, 3, 4, 5])
                        B = Set([3, 4, 5, 6])
                        A.intersection(B)
                    </input>
                    <output></output>
                    </sage>
                    <p>
                        Alternatively, we can also use the <c> &amp; </c> operator to perform the intersection operation.  
                    </p>
                    <sage>
                        <input>
                            A = Set([1, 2, 3, 4, 5])
                            B = Set([3, 4, 5, 6])
                            A &amp; B
                        </input>
                        <output></output>
                      </sage>
        </subsection>

        <!-- Set Difference Subsection -->
        <subsection>
            <title>Difference of Sets</title>
            <p>
                We have two methods to solve for difference as well.
            </p>
                <p>
                    Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>difference()</c> function to calculate the difference between 2 sets.
                </p>
                <aside>
                    <title>Tips!</title>
                    <p>
                        In a real-life context, this can be seen as identifying items on a restaurant menu (set A) that you have not yet tried (set B), with A - B representing the new dishes to explore.
                    </p>
                </aside>    
                <sage>
                    <input>
                        A = Set([1, 2, 3, 4, 5])
                        B = Set([3, 4, 5, 6])
                        A.difference(B)
                    </input>
                    <output></output>
                    </sage>
                    <p>
                        Alternatively, we can also use the <c> - </c> operator to perform the difference operation.  
                    </p>
                    <sage>
                        <input>
                            A = Set([1, 2, 3, 4, 5])
                            B = Set([3, 4, 5, 6])
                            A - B 
                        </input>
                        <output></output>
                      </sage>           
        </subsection>

        <!-- Multi Set Opperation Subsection -->
        <subsection>
            <title>Multiple Sets</title>
            <p>
                For doing operations involving multiple sets, we can repeat the operations to get our results, let us see an example.
            </p>

               <p>
                    Suppose <m>A = \{1, 2, 3, 4, 5\}</m>, <m>B = \{3, 4, 5, 6\}</m> and <m>C = \{5, 6, 7\}</m>. To find the union of all three sets, we will repeat the <c>union()</c> function.
               </p> 
            <sage>
                <input>
                    A = Set([1, 2, 3, 4, 5])
                    B = Set([3, 4, 5, 6]) 
                    C = Set([5, 6, 7]) 
                    A.union(B).union(C)
                </input>
                <output></output>
                </sage>
                <p>
                    Alternatively, we can also repeat the <c> | </c> operator to perform the union operation.  
                </p>
                <sage>
                    <input>
                        A = Set([1, 2, 3, 4, 5])
                        B = Set([3, 4, 5, 6])
                        C = Set([5, 6, 7])
                        A | B | C
                    </input>
                    <output></output>
                  </sage>
                  <p>
                    Similar operations can also be done using the <c>intersection()</c> and <c>difference()</c> functions as well as their operators.
                  </p>

        </subsection>

        <!-- Set Complement Subsection -->
        <subsection>
            <title>Complement of Sets</title>
                <p>
                    Assume the universal set, <m>U = \{1, 2, 3, 4, 5, 6, 7, 8, 9\}</m> and <m>A = \{1, 2, 3, 4, 5\}</m>. We can use the <c>difference()</c> function to find the complement of A.
                </p>
                <aside>
                    <title>Tips!</title>
                    <p>
                        This is analogous to having a list of all possible ice cream flavors (U) and identifying those flavors you have yet to try (A').
                    </p>
                </aside>    
                <sage>
                    <input>
                        U = Set([1, 2, 3, 4, 5, 6, 7, 8, 9])
                        A = Set([1, 2, 3, 4, 5])
                        U.difference(A)
                    </input>
                    <output></output>
                    </sage>
                    <p>
                        Alternatively, we can also use the <c> - </c> operator as well.  
                    </p>
                    <sage>
                        <input>
                            U = Set([1, 2, 3, 4, 5, 6, 7, 8, 9])
                            A = Set([1, 2, 3, 4, 5])
                            U - A
                        </input>
                        <output></output>
                      </sage>  
        </subsection>

        <!-- Cartesian Product of Sets Subsection -->
        <subsection>
            <title>Cartesian Product of Sets</title>
                <p>
                    Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>D = \{x, y\}</m>. We can use the <c>cartesian_product()</c> and <c>Set()</c> functions to display the operation <m>A × D</m>.
                </p>
                <aside>
                    <title>Tips!</title>
                    <p>
                        This concept can be applied in situations like determining all possible combinations of two different sets, such as shirt colors and pants styles in a wardrobe.
                    </p>
                </aside>    
                <sage>
                    <input>
                        A = Set([1, 2, 3, 4, 5])
                        D = Set(['x', 'y'])
                        Set(cartesian_product([A, D]))
                    </input>
                    <output>
                    </output>
                    </sage>
        </subsection>

</section>