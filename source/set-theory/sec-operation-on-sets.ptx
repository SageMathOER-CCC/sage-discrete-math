<section xml:id="sec-operation-on-sets" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Operations on Sets</title>

    <subsection>
        <title>Union of Sets</title>
        <idx><h>set operations</h><h>union</h></idx>
        <p>
            There are two distinct methods available in Sage for calculating unions.
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>union()</c> function to calculate <m>A \cup B</m>.
        </p>
        <aside>
            <title>Notes</title>
            <p>
                The union operation is relevant in real-world scenarios, such as merging two distinct music playlists into one. In this case, any song that appears in both playlists will only be listed once in the merged playlist.
            </p>
        </aside>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A.union(B)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> | </c> operator to perform the union operation.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A | B
            </input>
        </sage>

    </subsection>


    <subsection>
        <title>Intersection of Sets</title>
        <idx><h>set operations</h><h>intersection</h></idx>
        <p>
            Similar to union, there are two methods of using the intersection function in Sage.
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>intersection()</c> function to calculate <m>A \cap B</m>.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A.intersection(B)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> &amp; </c> operator to perform the intersection operation.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A &amp; B
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Difference of Sets</title>
        <idx><h>set operations</h><h>difference</h></idx>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>B = \{3, 4, 5, 6\}</m>. We can use the <c>difference()</c> function to calculate the difference between sets.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A.difference(B)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> - </c> operator to perform the difference operation.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                A - B
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Multiple Sets</title>
        <p>
            When performing operations involving multiple sets, we can repeat the operations to get our results. Here is an example:
        </p>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m>, <m>B = \{3, 4, 5, 6\}</m> and <m>C = \{5, 6, 7\}</m>. To find the union of all three sets, we repeat the <c>union()</c> function.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                C = Set([5, 6, 7])
                A.union(B).union(C)
            </input>
        </sage>
        <p>
            Alternatively, we can repeat the <c> | </c> operator to perform the union operation.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                B = Set([3, 4, 5, 6])
                C = Set([5, 6, 7])
                A | B | C
            </input>
        </sage>
        <p>
            The <c>intersection()</c> and <c>difference()</c> functions can perform similar chained operations on multiple sets.
        </p>
    </subsection>


    <subsection>
        <title>Complement of Sets</title>
        <idx><h>set operations</h><h>compliment</h></idx>
        <p>
            Let <m>U = \{1, 2, 3, 4, 5, 6, 7, 8, 9\}</m> be the universal set. Given the set <m>A = \{1, 2, 3, 4, 5\}</m>. We can use the <c>difference()</c> function to find the complement of <m>A</m>.
        </p>
        <sage>
            <input>
                U = Set([1, 2, 3, 4, 5, 6, 7, 8, 9])
                A = Set([1, 2, 3, 4, 5])
                U.difference(A)
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c> - </c> operator.
        </p>
        <sage>
            <input>
                U = Set([1, 2, 3, 4, 5, 6, 7, 8, 9])
                A = Set([1, 2, 3, 4, 5])
                U - A
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Cartesian Product of Sets</title>
        <idx><h>set operations</h><h>Cartesian product</h></idx>
        <p>
            Suppose <m>A = \{1, 2, 3, 4, 5\}</m> and <m>D = \{x, y\}</m>. We can use the <c>cartesian_product()</c> and <c>Set()</c> functions to display the Cartesian product <m>A \times D</m>.
        </p>
        <sage>
            <input>
                A = Set([1, 2, 3, 4, 5])
                D = Set(['x', 'y'])
                Set(cartesian_product([A, D]))
            </input>
        </sage>
        <p>
            Alternatively, we can use the <c>.</c> notation to find the Cartesian product.
        </p>
        <sage>
            <input>
            A = Set([1, 2, 3, 4, 5])
            D = Set(['x', 'y'])
            Set(A.cartesian_product(D))
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Power Sets</title>
        <idx><h>set operations</h><h>power set</h></idx>
        <p>
            The power set of the set <m>V</m> is the set of all subsets, including the empty set <m> \{ \emptyset \} </m> and the set <m>V</m> itself. Sage offers several ways to create a power set, including the <c>Subsets()</c> and <c>powerset()</c> functions. First, we will explore the <c>Subsets()</c> function. The <c>Subsets()</c> function is more user-friendly due to the built-in <c>Set</c> methods. Next, we will examine some limitations of the <c>Subsets()</c> function. We introduce the <c>powerset()</c> function as an alternative for working with advanced sets not supported by <c>Subsets()</c>.
        </p>
        <p>
            The <c>Subsets()</c> function returns all subsets of a finite set in no particular order. Here, we find the power set of the set of vowels and view the subsets as a <c>list</c> where each element is a <c>Set</c>.
        </p>
        <sage>
            <input>
                V = Set(["a", "e", "i", "o", "u"])
                S = Subsets(V)
                list(S)
            </input>
        </sage>
        <p>
            We can confirm that the power set includes the empty set.
        </p>
        <sage>
            <input>
                Set([]) in S
            </input>
        </sage>
        <p>
            We can also confirm that the power set includes the original set.
        </p>
        <sage>
            <input>
                V in S
            </input>
        </sage>
        <p>
            The <c>cardinality()</c> method returns the total number of subsets.
        </p>
        <sage>
            <input>
                S.cardinality()
            </input>
        </sage>
        <p>
            There are limitations to the <c>Subsets()</c> function. For example, the <c>Subsets()</c> function does not support non-hashable objects.
        </p>
        <p>
            About hashable objects:
            <ul>
                <li>
                    <p>
                        A hashable object has a hash value that never changes during its lifetime.
                    </p>
                </li>
                <li>
                    <p>
                        A hashable object can be compared to other objects.
                    </p>
                </li>
                <li>
                    <p>
                        Most of Pythonâ€™s immutable built-in objects are hashable.
                    </p>
                </li>
                <li>
                    <p>
                        Mutable containers (lists or dictionaries) are not hashable.
                    </p>
                </li>
                <li>
                    <p>
                        Immutable containers (tuples) are only hashable if their elements are hashable.
                    </p>
                </li>
            </ul>
        </p>
        <p>
            You will see an <c>unhashable type</c> error message when trying to create <c>Subsets</c> of a list containing a list. The <c>powerset()</c> function returns an iterator over the <c>list</c> of all subsets in no particular order. The <c>powerset()</c> function is ideal when working with non-hashable objects.
        </p>
        <sage>
            <input>
                N = [1, [2, 3], 4]
                list(powerset(N))
            </input>
        </sage>
        <p>
            The <c>powerset()</c> function supports infinite sets. Let's generate the first 7 subsets from the power set of integers.
        </p>
        <sage>
            <input>
                P = powerset(ZZ)

                i = 0
                for subset in P:
                    print(subset)
                    i += 1
                    if i == 7:
                        break
            </input>
        </sage>
        <p>
            While the <c>Subsets()</c> function can represent infinite sets symbolically, it is not practical.
        </p>
        <sage>
            <input>
                P = Subsets(ZZ)
                P
            </input>
        </sage>
        <p>
            Observe the <c>TypeError</c> message when trying to retrieve a random element from <c>Subsets(ZZ)</c>
        </p>
        <sage>
            <input>
                P.random_element()
            </input>
        </sage>
        <p>
            Pay close attention to the capitalization of function names. There is a difference between the functions <c>Subsets()</c> and <c>subsets()</c>. Notice the lowercase <c>s</c> in <c>subsets()</c>, which is an alias for <c>powerset()</c>.
        </p>
    </subsection>
    <subsection xml:id="subsec-Viewing-Power-Sets">
        <title>Viewing Power Sets</title>
        <p>
            Power sets can contain many elements. The powerset of the set <m>R</m> contains elements <m>128</m> elements.
        </p>
        <sage>
            <input>
                R = Set(["red", "orange", "yellow", "green", "blue", "indigo", "violet"])
                S = Subsets(R)
                S.cardinality()
            </input>
        </sage>
        <p>
            If we only want to view part of the power set, we can specify a range of elements with a technique called slicing. For example, here are the first 5 elements of the power set. Note that although sets do not have order, they are displayed in an order, hence their can be a "first 5" elements
        </p>
        <sage>
            <input>
                S.list()[:5]
            </input>
        </sage>
        <p>
            Now, let's retrieve the following 5 elements of the power set.
        </p>
        <sage>
            <input>
                # Slicing to get elements from index 5 to 9
                S.list()[5:10]
            </input>
        </sage>
    </subsection>
</section>