<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="creating-sets" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Creating Sets</title>

    <subsection xml:id="subsec-Ways-to-create-a-set">
        <title>Set Definitions</title>

        <idx><h>data types</h><h>Set (Sage)</h></idx>
        <p>
            To construct a set, encase the elements within square brackets <c>[]</c>. Then, pass this <c>list</c> as an argument to the <c>Set()</c> function. It's important to note that the <c>S</c> in <c>Set()</c> should be uppercase to define a Sage set. In a set, each element is unique.
        </p>
        <sage>
        <input>
            M = Set(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
            show(M)
        </input>
        </sage>
        <p>
            Notice that the months in set <m>M</m> do not appear in the same order as when you created the set. Sets are unordered collections of elements.
        </p>

        <p>
            We can ask Sage to compare two sets to see whether or not they are equal.
            We can use the <c>==</c> operator to compare two values. A single equal sign <c>=</c> and double equal sign <c>==</c> have different meanings.
        </p>
        <idx><h>equality operator</h></idx>
        <p>
            The <term>equality operator</term> <c>==</c> is used to ask Sage if two values are equal. Sage compares the values on each side of the operator and returns the Boolean value. The <c>==</c> operator returns <c>True</c> if the sets are equal and <c>False</c> if they are not equal.
        </p>
        <idx><h>assignment operator</h></idx>
        <p>
            The <term>assignment operator</term> <c>=</c> assigns the value on the right side to the variable on the left side.
        </p>
        <sage>
        <input>
            M = Set(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
            M_duplicates = Set(["Jan", "Jan", "Jan", "Feb", "Feb", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])

            # The Set function eliminates duplicates
            M == M_duplicates
        </input>
        </sage>

        <p>
            If you have experience with Python, you may have used a Python <c>set</c>. Notice how the Python <c>set</c> begins with a lowercase <c>s</c>. Even though Sage supports Python sets, we will use Sage <c>Set</c> for the added features. Be sure to define <c>Set()</c> with an upper case <c>S</c>.
        </p>
    </subsection>


    <subsection xml:id="subsec-set-builder-notation">
        <title>Set Builder Notation</title>

        <p>
            Instead of explicitly listing the elements of a set, we can use a set builder notation to define a set. The set builder notation is a way to define a set by describing the properties of its elements. Here, we use the Sage <c>srange</c> instead of the Python <c>range</c> function for increased flexibility and functionality.
        </p>
        <sage>
        <input>
            # Create a set of even numbers between 1 and 10
            A = Set([x for x in srange(1, 11) if x % 2 == 0])
            A
        </input>
        </sage>

        <p>
            Iteration is a way to repeat a block of code multiple times and can be used to automate repetitive tasks. We could have created the same set by typing <c> A = Set([2, 4, 6, 8, 10])</c>. Imagine if we wanted to create a set of even numbers between 1 and 100. It would be much easier to use iteration.
        </p>
        <sage>
        <input>
            B = Set([x for x in srange(1, 101) if x % 2 == 0])
            B
        </input>
        </sage>
    </subsection>


    <subsection xml:id="subsec-subsets">
        <title>Subsets</title>

        <p>
            To list all the subsets included in a set, we can use the <c>Subsets()</c> function and then use a <c>for</c> loop to display each subset.
        </p>
        <sage>
        <input>
            W = Set(["Sun", "Cloud", "Rain", "Snow", "Tornado", "Hurricane"])
            subsets_of_weather = Subsets(W)

            subsets_of_weather.list()
        </input>
        </sage>
    </subsection>


    <subsection>
        <title>Set Membership Check</title>

        <p>
            Sage allows you to check whether an element belongs to a set. You can use the <c>in</c> operator to check membership, which returns <c>True</c> if the element is in the set and <c>False</c> otherwise.
        </p>

        <aside>
        <title>Notes</title>

        <p>
            One well-known tool for this is the Bloom filter, a clever data structure used in systems like Google Bigtable. It quickly checks if something, like a URL, might be part of a set. While it can sometimes say something's in the set when it's not (a false positive), it will never miss something that's actually there (no false negatives). This makes Bloom filters great for high-speed searches in systems where memory is tight.
        </p>
        </aside>
        <sage>
        <input>
            "earthquake" in W
        </input>
        </sage>

        <p>
            We can check if <m>Severe = \{Tornado, Hurricane \}</m> is a subset of <m>W</m> by using the <c>issubset</c> method.
        </p>
        <sage>
        <input>
            Severe = Set(["Tornado", "Hurricane"])
            Severe.issubset(W)
        </input>
        </sage>

        <p>
            When we evaluate <c>W.issubset(Severe)</c>, Sage returns <c>False</c> because <m>W</m> is not a subset of <m>Severe</m>.
        </p>
        <sage>
            <input>
                W.issubset(Severe)
            </input>
        </sage>
    </subsection>
</section>