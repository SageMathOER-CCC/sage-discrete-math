<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="creating-sets" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Creating Sets</title>

    <subsection xml:id="subsec-Ways-to-create-a-set">
        <title>Set Definitions</title>

        <idx><h>data types</h><h>Set (Sage)</h></idx>
        <p>
            To construct a set, encase the elements within square brackets <c>[]</c>. Then, pass this <c>list</c> as an argument to the <c>Set()</c> function. It's important to note that the <c>S</c> in <c>Set()</c> should be uppercase to define a Sage set. In a set, each element is unique.
        </p>
        <sage>
        <input>
            A = Set(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
            print(A)
        </input>
        </sage>

        <p>
            We can ask Sage to compare two sets to see whether or not they are equal.
            We can use the <c>==</c> operator to compare two values. A single equal sign <c>=</c> and double equal sign <c>==</c> have different meanings.
        </p>
        <idx><h>equality operator</h></idx>
        <p>
            The <term>equality operator</term> <c>==</c> is used to ask Sage if two values are the same. Sage compares the values on each side of the operator and returns the Boolean value. The <c>==</c> operator returns <c>True</c> if the sets are equal and <c>False</c> if they are not equal.
        </p>
        <idx><h>assignment operator</h></idx>
        <p>
            The <term>assignment operator</term> <c>=</c> is used to assign a value to a variable. The value on the right side of the operator is assigned to the variable on the left side.
        </p>
        <sage>
        <input>
            A = Set(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
            B = Set(["Jan", "Jan", "Jan", "Feb", "Feb", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
            # The Set function eliminates duplicates 
            A == B
        </input>
        </sage>

        <p>
            If you are familiar with Python, you may have used a Python <c>set</c>. Notice how the Python <c>set</c> begins with a lower case <c>s</c>. Even though Sage supports Python sets, we will be using Sage <c>Set</c> for the added features. Be sure to define <c>Set()</c> with an upper case <c>S</c>.
        </p>
    </subsection>


    <subsection xml:id="subsec-set-builder-notation">
        <title>Set Builder Notation</title>

        <p>
            Instead of explicitly listing the elements of a set, we can use a set builder notation to define a set. The set builder notation is a way to define a set by describing the properties of its elements. Here we use the Sage <c>srange</c> instead of the Python <c>range</c> function for increased flexibility and functionality.
        </p>
        <sage>
        <input>
            # Create a set of even numbers between 1 and 10
            C = Set([x for x in srange(1, 11) if x % 2 == 0])
            C
        </input>
        </sage>

        <p>
            Iteration is a way to repeat a block of code multiple times and can be used to automate repetitive tasks. We could have created the same set by typing <c> C = Set([2, 4, 6, 8, 10])</c>. Imagine if we wanted to create a set of even numbers between 1 and 100. It would be much easier to use iteration.
        </p>
        <sage>
        <input>
            D = Set([x for x in srange(1, 101) if x % 2 == 0])
            D
        </input>
        </sage>
    </subsection>


    <subsection xml:id="subsec-subsets">
        <title>Subsets</title>

        <p>
            To list all the subsets included in a set, we can use the <c>Subsets()</c> function and then use the <c>Set()</c> function to display the set of subsets.
        </p>
        <sage>
        <input>
            A = Subsets([1, 2, 3, 4, 5])
            Set(A)
        </input> <output></output>
        </sage>
    </subsection>


    <subsection>
        <title>Set Membership Check</title>

        <p>
            Sage allows you to easily check whether a certain element belongs to a set. You can use the <c>in</c> operator to check membership, which returns <c>True</c> if the element is in the set and <c>False</c> otherwise.
        </p>

        <p>
            Let's consider <m>A = \{1, 2, 3, 4, 5\}</m>. We can check if the number <m>3</m> is in set <m>A</m>:
        </p>
        <aside>
        <title>Notes</title>

        <p>
            For organizations such as clubs, gyms, or online subscription services, set membership checks can be used to validate if a user is a member or subscriber. This can help control access to facilities or content.
        </p>
        </aside>
        <sage>
        <input>
           A = Set([1, 2, 3, 4, 5])
           3 in A
        </input>
        </sage>

        <p>
            We can check if <m>B = \{3, 4, 5, 6\}</m> is a subset of <m>A</m> by using the <c>issubset</c> method.
        </p>
        <sage>
        <input>
           A = Set([1, 2, 3, 4, 5])
           B = Set([3, 4, 5, 6])
           B.issubset(A)
        </input>
        </sage>

        <p>
            When we evaluate <c>B.issubset(A)</c>, Sage returns <c>False</c> because <m>B</m> is not a subset of <m>A</m> since <m>6</m> is not in <m>A</m>.
        </p>
    </subsection>
</section>